{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetSize = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nvar createSetSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    compareNatural = _ref.compareNatural;\n\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n});\nexports.createSetSize = createSetSize;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSetSize","_array","require","_factory","name","dependencies","factory","_ref","typed","compareNatural","ArrayMatrix","a","Array","isArray","flatten","length","toArray","ArrayMatrixBoolean","unique","b","sort","count","i"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/set/setSize.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetSize = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nvar createSetSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compareNatural = _ref.compareNatural;\n\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n\n        return count;\n      }\n    }\n  });\n});\nexports.createSetSize = createSetSize;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAE9B,IAAIC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,gBAAgB,CAAC;AAC9C,IAAIL,aAAa,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC3F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,cAAc,GAAGF,IAAI,CAACE,cAAc;;EAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASM,WAAW,CAACC,CAAC,EAAE;MACxC,OAAOC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAG,CAAC,CAAC,EAAEV,MAAM,CAACa,OAAO,EAAEH,CAAC,CAAC,CAACI,MAAM,GAAG,CAAC,CAAC,EAAEd,MAAM,CAACa,OAAO,EAAEH,CAAC,CAACK,OAAO,EAAE,CAAC,CAACD,MAAM;IACnG,CAAC;IACD,yBAAyB,EAAE,SAASE,kBAAkB,CAACN,CAAC,EAAEO,MAAM,EAAE;MAChE,IAAIA,MAAM,KAAK,KAAK,IAAIP,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;QACtC,OAAOH,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAG,CAAC,CAAC,EAAEV,MAAM,CAACa,OAAO,EAAEH,CAAC,CAAC,CAACI,MAAM,GAAG,CAAC,CAAC,EAAEd,MAAM,CAACa,OAAO,EAAEH,CAAC,CAACK,OAAO,EAAE,CAAC,CAACD,MAAM;MACnG,CAAC,MAAM;QACL,IAAII,CAAC,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACa,OAAO,EAAEF,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAGA,CAAC,CAACK,OAAO,EAAE,CAAC,CAACI,IAAI,CAACX,cAAc,CAAC;QACpF,IAAIY,KAAK,GAAG,CAAC;QAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACJ,MAAM,EAAEO,CAAC,EAAE,EAAE;UACjC,IAAIb,cAAc,CAACU,CAAC,CAACG,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YACxCD,KAAK,EAAE;UACT;QACF;QAEA,OAAOA,KAAK;MACd;IACF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFvB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}