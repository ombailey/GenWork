{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEqualScalarNumber = exports.createEqualScalar = void 0;\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _complex = require(\"../../utils/complex.js\");\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nvar createEqualScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (0, _complex.complexEquals)(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return this(x.value, y.value);\n    }\n  });\n});\nexports.createEqualScalar = createEqualScalar;\nvar createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n    config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    }\n  });\n});\nexports.createEqualScalarNumber = createEqualScalarNumber;","map":{"version":3,"names":["Object","defineProperty","exports","value","createEqualScalarNumber","createEqualScalar","_nearlyEqual","require","_number","_factory","_complex","name","dependencies","factory","_ref","typed","config","booleanBoolean","x","y","numberNumber","nearlyEqual","epsilon","BigNumberBigNumber","eq","FractionFraction","equals","ComplexComplex","complexEquals","UnitUnit","equalBase","Error","_ref2"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/relational/equalScalar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEqualScalarNumber = exports.createEqualScalar = void 0;\n\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _complex = require(\"../../utils/complex.js\");\n\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nvar createEqualScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (0, _complex.complexEquals)(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return this(x.value, y.value);\n    }\n  });\n});\nexports.createEqualScalar = createEqualScalar;\nvar createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    }\n  });\n});\nexports.createEqualScalarNumber = createEqualScalarNumber;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}