{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNode = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _is = require(\"../../utils/is.js\");\nvar _keywords = require(\"../keywords.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _map = require(\"../../utils/map.js\");\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nvar createNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var mathWithTransform = _ref.mathWithTransform;\n\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n  Node.prototype.evaluate = function (scope) {\n    return this.compile().evaluate(scope);\n  };\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{evaluate: function([Object])}} object\n   *                Returns an object with a function 'evaluate',\n   *                which can be invoked as expr.evaluate([scope: Object]),\n   *                where scope is an optional object with\n   *                variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(mathWithTransform, {});\n    var args = {};\n    var context = null;\n    function evaluate(scope) {\n      var s = (0, _map.createMap)(scope);\n      _validateScope(s);\n      return expr(s, args, context);\n    }\n    return {\n      evaluate: evaluate\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n  Node.prototype._ifNode = function (node) {\n    if (!(0, _is.isNode)(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    // eslint-disable-next-line\n    callback(this, null, null); // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n        _traverse(child, callback);\n      });\n    }\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n  Node.prototype.transform = function (callback) {\n    function _transform(child, path, parent) {\n      var replacement = callback(child, path, parent);\n      if (replacement !== child) {\n        // stop iterating when the node is replaced\n        return replacement;\n      }\n      return child.map(_transform);\n    }\n    return _transform(this, null, null);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n  Node.prototype.equals = function (other) {\n    return other ? (0, _object.deepStrictEqual)(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n  Node.prototype.toString = function (options) {\n    var customString = this._getCustomString(options);\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n  Node.prototype.toHTML = function (options) {\n    var customString = this._getCustomString(options);\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n  Node.prototype.toTex = function (options) {\n    var customString = this._getCustomString(options);\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Helper used by `to...` functions.\n   */\n\n  Node.prototype._getCustomString = function (options) {\n    if (options && (0, _typeof2[\"default\"])(options) === 'object') {\n      switch ((0, _typeof2[\"default\"])(options.handler)) {\n        case 'object':\n        case 'undefined':\n          return;\n        case 'function':\n          return options.handler(this, options);\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n  function _validateScope(scope) {\n    for (var _i = 0, _arr = (0, _toConsumableArray2[\"default\"])(_keywords.keywords); _i < _arr.length; _i++) {\n      var symbol = _arr[_i];\n      if (scope.has(symbol)) {\n        throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n      }\n    }\n  }\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createNode = createNode;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createNode","_toConsumableArray2","_typeof2","_is","_keywords","_object","_factory","_map","name","dependencies","factory","_ref","mathWithTransform","Node","SyntaxError","prototype","evaluate","scope","compile","type","isNode","comment","expr","_compile","args","context","s","createMap","_validateScope","math","argNames","Error","forEach","callback","map","_ifNode","node","TypeError","traverse","_traverse","child","path","parent","transform","_transform","replacement","filter","nodes","push","clone","cloneDeep","equals","other","deepStrictEqual","toString","options","customString","_getCustomString","_toString","toJSON","toHTML","toTex","_toTex","handler","getIdentifier","getContent","_i","_arr","keywords","length","symbol","has","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/node/Node.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNode = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _keywords = require(\"../keywords.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _map = require(\"../../utils/map.js\");\n\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nvar createNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var mathWithTransform = _ref.mathWithTransform;\n\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.evaluate = function (scope) {\n    return this.compile().evaluate(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{evaluate: function([Object])}} object\n   *                Returns an object with a function 'evaluate',\n   *                which can be invoked as expr.evaluate([scope: Object]),\n   *                where scope is an optional object with\n   *                variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n\n    function evaluate(scope) {\n      var s = (0, _map.createMap)(scope);\n\n      _validateScope(s);\n\n      return expr(s, args, context);\n    }\n\n    return {\n      evaluate: evaluate\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!(0, _is.isNode)(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    // eslint-disable-next-line\n    callback(this, null, null); // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    function _transform(child, path, parent) {\n      var replacement = callback(child, path, parent);\n\n      if (replacement !== child) {\n        // stop iterating when the node is replaced\n        return replacement;\n      }\n\n      return child.map(_transform);\n    }\n\n    return _transform(this, null, null);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? (0, _object.deepStrictEqual)(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Helper used by `to...` functions.\n   */\n\n\n  Node.prototype._getCustomString = function (options) {\n    if (options && (0, _typeof2[\"default\"])(options) === 'object') {\n      switch ((0, _typeof2[\"default\"])(options.handler)) {\n        case 'object':\n        case 'undefined':\n          return;\n\n        case 'function':\n          return options.handler(this, options);\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var _i = 0, _arr = (0, _toConsumableArray2[\"default\"])(_keywords.keywords); _i < _arr.length; _i++) {\n      var symbol = _arr[_i];\n\n      if (scope.has(symbol)) {\n        throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n      }\n    }\n  }\n\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createNode = createNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}