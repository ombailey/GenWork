{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createForEachTransform = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _function = require(\"../../utils/function.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _compileInlineExpression = require(\"./utils/compileInlineExpression.js\");\nvar name = 'forEach';\nvar dependencies = ['typed'];\nvar createForEachTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);\n      }\n    }\n    return _forEach(x, callback);\n  }\n  forEachTransform.rawArgs = true; // one-based version of forEach\n\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = (0, _function.maxArgumentCount)(callback);\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          (0, _array.forEach)(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});\nexports.createForEachTransform = createForEachTransform;","map":{"version":3,"names":["Object","defineProperty","exports","value","createForEachTransform","_is","require","_function","_array","_factory","_compileInlineExpression","name","dependencies","factory","_ref","typed","forEachTransform","args","math","scope","x","callback","compile","evaluate","isSymbolNode","isFunctionAssignmentNode","compileInlineExpression","_forEach","rawArgs","ArrayMatrixFunction","array","maxArgumentCount","recurse","index","Array","isArray","forEach","child","i","concat","valueOf","isTransformFunction"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/transform/forEach.transform.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createForEachTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _compileInlineExpression = require(\"./utils/compileInlineExpression.js\");\n\nvar name = 'forEach';\nvar dependencies = ['typed'];\nvar createForEachTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);\n      }\n    }\n\n    return _forEach(x, callback);\n  }\n\n  forEachTransform.rawArgs = true; // one-based version of forEach\n\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = (0, _function.maxArgumentCount)(callback);\n\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          (0, _array.forEach)(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});\nexports.createForEachTransform = createForEachTransform;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}