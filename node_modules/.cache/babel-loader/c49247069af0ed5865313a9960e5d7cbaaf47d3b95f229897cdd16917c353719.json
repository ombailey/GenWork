{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReplacer = void 0;\nvar _factory = require(\"../utils/factory.js\");\nvar name = 'replacer';\nvar dependencies = [];\nvar createReplacer = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\n  /**\n   * Stringify data types into their JSON representation.\n   * Most data types can be serialized using their `.toJSON` method,\n   * but not all, for example the number `Infinity`. For these cases you have\n   * to use the replacer. Example usage:\n   *\n   *     JSON.stringify([2, Infinity], math.replacer)\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the replaced object\n   */\n  return function replacer(key, value) {\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\n      return {\n        mathjs: 'number',\n        value: String(value)\n      };\n    }\n    return value;\n  };\n});\nexports.createReplacer = createReplacer;","map":{"version":3,"names":["Object","defineProperty","exports","value","createReplacer","_factory","require","name","dependencies","factory","replacer","key","isFinite","isNaN","mathjs","String"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/json/replacer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReplacer = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar name = 'replacer';\nvar dependencies = [];\nvar createReplacer = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\n  /**\n   * Stringify data types into their JSON representation.\n   * Most data types can be serialized using their `.toJSON` method,\n   * but not all, for example the number `Infinity`. For these cases you have\n   * to use the replacer. Example usage:\n   *\n   *     JSON.stringify([2, Infinity], math.replacer)\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the replaced object\n   */\n  return function replacer(key, value) {\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\n      return {\n        mathjs: 'number',\n        value: String(value)\n      };\n    }\n\n    return value;\n  };\n});\nexports.createReplacer = createReplacer;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAE/B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAE7C,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,EAAE;AACrB,IAAIJ,cAAc,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,YAAY;EACxF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,SAASE,QAAQ,CAACC,GAAG,EAAER,KAAK,EAAE;IACnC;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,KAAK,CAACS,QAAQ,CAACT,KAAK,CAAC,IAAIU,KAAK,CAACV,KAAK,CAAC,CAAC,EAAE;MACnE,OAAO;QACLW,MAAM,EAAE,QAAQ;QAChBX,KAAK,EAAEY,MAAM,CAACZ,KAAK;MACrB,CAAC;IACH;IAEA,OAAOA,KAAK;EACd,CAAC;AACH,CAAC,CAAC;AACFD,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}