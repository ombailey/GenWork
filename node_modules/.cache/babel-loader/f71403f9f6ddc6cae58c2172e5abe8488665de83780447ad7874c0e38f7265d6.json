{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryPlus = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nvar createUnaryPlus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    BigNumber = _ref.BigNumber;\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: _index.unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});\nexports.createUnaryPlus = createUnaryPlus;","map":{"version":3,"names":["Object","defineProperty","exports","value","createUnaryPlus","_factory","require","_collection","_index","name","dependencies","factory","_ref","typed","config","BigNumber","number","unaryPlusNumber","Complex","x","Fraction","Unit","clone","ArrayMatrix","deepMap","booleanString"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryPlus = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nvar createUnaryPlus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: _index.unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});\nexports.createUnaryPlus = createUnaryPlus;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAEhC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIE,MAAM,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAEnD,IAAIG,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC;AACnD,IAAIN,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,SAAS,GAAGH,IAAI,CAACG,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOF,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,MAAM,CAACS,eAAe;IAC9BC,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IACDJ,SAAS,EAAE,SAASA,SAAS,CAACI,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IACDC,QAAQ,EAAE,SAASA,QAAQ,CAACD,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IACDE,IAAI,EAAE,SAASA,IAAI,CAACF,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACG,KAAK,EAAE;IAClB,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACJ,CAAC,EAAE;MACxC;MACA,OAAO,CAAC,CAAC,EAAEZ,WAAW,CAACiB,OAAO,EAAEL,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IAChD,CAAC;IACD,kBAAkB,EAAE,SAASM,aAAa,CAACN,CAAC,EAAE;MAC5C;MACA,OAAOL,MAAM,CAACE,MAAM,KAAK,WAAW,GAAG,IAAID,SAAS,CAAC,CAACI,CAAC,CAAC,GAAG,CAACA,CAAC;IAC/D;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFjB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}