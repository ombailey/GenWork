{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNorm = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nvar createNorm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    abs = _ref.abs,\n    add = _ref.add,\n    pow = _ref.pow,\n    conj = _ref.conj,\n    sqrt = _ref.sqrt,\n    multiply = _ref.multiply,\n    equalScalar = _ref.equalScalar,\n    larger = _ref.larger,\n    smaller = _ref.smaller,\n    matrix = _ref.matrix,\n    ctranspose = _ref.ctranspose,\n    eigs = _ref.eigs;\n\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \"boolean\": function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return this(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n      return Number.POSITIVE_INFINITY;\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value');\n  }\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = []; // result\n\n    var maxc = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = []; // result\n\n    var maxr = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    } // MxN matrix\n\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});\nexports.createNorm = createNorm;","map":{"version":3,"names":["Object","defineProperty","exports","value","createNorm","_factory","require","name","dependencies","factory","_ref","typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs","number","Math","Complex","x","BigNumber","boolean","Array","_norm","Matrix","numberComplexBigNumberBooleanNumberBigNumberString","ArrayNumberBigNumberString","p","MatrixNumberBigNumberString","_vectorNormPlusInfinity","pinf","forEach","v","_vectorNormMinusInfinity","ninf","_vectorNorm","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isNaN","n","Error","_matrixNormFrobenius","fro","index","_matrixNormOne","c","maxc","j","cj","_matrixNormTwo","sizeX","size","RangeError","tx","squaredX","eigenVals","values","toArray","rho","length","_matrixNormInfinity","r","maxr","i","ri","_matrixNorm"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/norm.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNorm = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nvar createNorm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      pow = _ref.pow,\n      conj = _ref.conj,\n      sqrt = _ref.sqrt,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      larger = _ref.larger,\n      smaller = _ref.smaller,\n      matrix = _ref.matrix,\n      ctranspose = _ref.ctranspose,\n      eigs = _ref.eigs;\n\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \"boolean\": function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return this(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n\n      return Number.POSITIVE_INFINITY;\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value');\n  }\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = []; // result\n\n    var maxc = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = []; // result\n\n    var maxr = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});\nexports.createNorm = createNorm;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}