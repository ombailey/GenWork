{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapWord = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst calculateStringLengths = (input, size) => {\n  let subject = strip_ansi_1.default(input);\n  const chunks = [];\n  // https://regex101.com/r/gY5kZ1/1\n  const re = new RegExp('(^.{1,' + String(size) + '}(\\\\s+|$))|(^.{1,' + String(size - 1) + '}(\\\\\\\\|/|_|\\\\.|,|;|-))');\n  do {\n    let chunk;\n    const match = re.exec(subject);\n    if (match) {\n      chunk = match[0];\n      subject = subject.slice(chunk.length);\n      const trimmedLength = chunk.trim().length;\n      const offset = chunk.length - trimmedLength;\n      chunks.push([trimmedLength, offset]);\n    } else {\n      chunk = subject.slice(0, size);\n      subject = subject.slice(size);\n      chunks.push([chunk.length, 0]);\n    }\n  } while (subject.length);\n  return chunks;\n};\nconst wrapWord = (input, size) => {\n  const result = [];\n  let startIndex = 0;\n  calculateStringLengths(input, size).forEach(_ref => {\n    let [length, offset] = _ref;\n    result.push(slice_ansi_1.default(input, startIndex, startIndex + length));\n    startIndex += length + offset;\n  });\n  return result;\n};\nexports.wrapWord = wrapWord;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","wrapWord","slice_ansi_1","require","strip_ansi_1","calculateStringLengths","input","size","subject","default","chunks","re","RegExp","String","chunk","match","exec","slice","length","trimmedLength","trim","offset","push","result","startIndex","forEach"],"sources":["/Users/omarbailey/node_modules/table/dist/wrapWord.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapWord = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst calculateStringLengths = (input, size) => {\n    let subject = strip_ansi_1.default(input);\n    const chunks = [];\n    // https://regex101.com/r/gY5kZ1/1\n    const re = new RegExp('(^.{1,' + String(size) + '}(\\\\s+|$))|(^.{1,' + String(size - 1) + '}(\\\\\\\\|/|_|\\\\.|,|;|-))');\n    do {\n        let chunk;\n        const match = re.exec(subject);\n        if (match) {\n            chunk = match[0];\n            subject = subject.slice(chunk.length);\n            const trimmedLength = chunk.trim().length;\n            const offset = chunk.length - trimmedLength;\n            chunks.push([trimmedLength, offset]);\n        }\n        else {\n            chunk = subject.slice(0, size);\n            subject = subject.slice(size);\n            chunks.push([chunk.length, 0]);\n        }\n    } while (subject.length);\n    return chunks;\n};\nconst wrapWord = (input, size) => {\n    const result = [];\n    let startIndex = 0;\n    calculateStringLengths(input, size).forEach(([length, offset]) => {\n        result.push(slice_ansi_1.default(input, startIndex, startIndex + length));\n        startIndex += length + offset;\n    });\n    return result;\n};\nexports.wrapWord = wrapWord;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,YAAY,GAAGR,eAAe,CAACS,OAAO,CAAC,YAAY,CAAC,CAAC;AAC3D,MAAMC,YAAY,GAAGV,eAAe,CAACS,OAAO,CAAC,YAAY,CAAC,CAAC;AAC3D,MAAME,sBAAsB,GAAG,CAACC,KAAK,EAAEC,IAAI,KAAK;EAC5C,IAAIC,OAAO,GAAGJ,YAAY,CAACK,OAAO,CAACH,KAAK,CAAC;EACzC,MAAMI,MAAM,GAAG,EAAE;EACjB;EACA,MAAMC,EAAE,GAAG,IAAIC,MAAM,CAAC,QAAQ,GAAGC,MAAM,CAACN,IAAI,CAAC,GAAG,mBAAmB,GAAGM,MAAM,CAACN,IAAI,GAAG,CAAC,CAAC,GAAG,wBAAwB,CAAC;EAClH,GAAG;IACC,IAAIO,KAAK;IACT,MAAMC,KAAK,GAAGJ,EAAE,CAACK,IAAI,CAACR,OAAO,CAAC;IAC9B,IAAIO,KAAK,EAAE;MACPD,KAAK,GAAGC,KAAK,CAAC,CAAC,CAAC;MAChBP,OAAO,GAAGA,OAAO,CAACS,KAAK,CAACH,KAAK,CAACI,MAAM,CAAC;MACrC,MAAMC,aAAa,GAAGL,KAAK,CAACM,IAAI,EAAE,CAACF,MAAM;MACzC,MAAMG,MAAM,GAAGP,KAAK,CAACI,MAAM,GAAGC,aAAa;MAC3CT,MAAM,CAACY,IAAI,CAAC,CAACH,aAAa,EAAEE,MAAM,CAAC,CAAC;IACxC,CAAC,MACI;MACDP,KAAK,GAAGN,OAAO,CAACS,KAAK,CAAC,CAAC,EAAEV,IAAI,CAAC;MAC9BC,OAAO,GAAGA,OAAO,CAACS,KAAK,CAACV,IAAI,CAAC;MAC7BG,MAAM,CAACY,IAAI,CAAC,CAACR,KAAK,CAACI,MAAM,EAAE,CAAC,CAAC,CAAC;IAClC;EACJ,CAAC,QAAQV,OAAO,CAACU,MAAM;EACvB,OAAOR,MAAM;AACjB,CAAC;AACD,MAAMT,QAAQ,GAAG,CAACK,KAAK,EAAEC,IAAI,KAAK;EAC9B,MAAMgB,MAAM,GAAG,EAAE;EACjB,IAAIC,UAAU,GAAG,CAAC;EAClBnB,sBAAsB,CAACC,KAAK,EAAEC,IAAI,CAAC,CAACkB,OAAO,CAAC,QAAsB;IAAA,IAArB,CAACP,MAAM,EAAEG,MAAM,CAAC;IACzDE,MAAM,CAACD,IAAI,CAACpB,YAAY,CAACO,OAAO,CAACH,KAAK,EAAEkB,UAAU,EAAEA,UAAU,GAAGN,MAAM,CAAC,CAAC;IACzEM,UAAU,IAAIN,MAAM,GAAGG,MAAM;EACjC,CAAC,CAAC;EACF,OAAOE,MAAM;AACjB,CAAC;AACDxB,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}