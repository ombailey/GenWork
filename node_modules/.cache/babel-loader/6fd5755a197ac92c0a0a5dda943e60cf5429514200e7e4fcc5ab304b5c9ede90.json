{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultiplyScalar = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nvar createMultiplyScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': _index.multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : this(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : this(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n});\nexports.createMultiplyScalar = createMultiplyScalar;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMultiplyScalar","_factory","require","_index","name","dependencies","factory","_ref","typed","multiplyNumber","ComplexComplex","x","y","mul","BigNumberBigNumber","times","FractionFraction","numberFractionBigNumberComplexUnit","res","clone","_normalize","UnitNumberFractionBigNumberComplex","UnitUnit","multiply"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultiplyScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nvar createMultiplyScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': _index.multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : this(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : this(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n});\nexports.createMultiplyScalar = createMultiplyScalar;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,oBAAoB,GAAG,KAAK,CAAC;AAErC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,MAAM,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAEnD,IAAIE,IAAI,GAAG,gBAAgB;AAC3B,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIL,oBAAoB,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAClG,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAAC,gBAAgB,EAAE;IAC7B,gBAAgB,EAAEL,MAAM,CAACM,cAAc;IACvC,kBAAkB,EAAE,SAASC,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASE,kBAAkB,CAACH,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACI,KAAK,CAACH,CAAC,CAAC;IACnB,CAAC;IACD,oBAAoB,EAAE,SAASI,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,+CAA+C,EAAE,SAASK,kCAAkC,CAACN,CAAC,EAAEC,CAAC,EAAE;MACjG,IAAIM,GAAG,GAAGN,CAAC,CAACO,KAAK,EAAE;MACnBD,GAAG,CAACnB,KAAK,GAAGmB,GAAG,CAACnB,KAAK,KAAK,IAAI,GAAGmB,GAAG,CAACE,UAAU,CAACT,CAAC,CAAC,GAAG,IAAI,CAACO,GAAG,CAACnB,KAAK,EAAEY,CAAC,CAAC;MACvE,OAAOO,GAAG;IACZ,CAAC;IACD,+CAA+C,EAAE,SAASG,kCAAkC,CAACV,CAAC,EAAEC,CAAC,EAAE;MACjG,IAAIM,GAAG,GAAGP,CAAC,CAACQ,KAAK,EAAE;MACnBD,GAAG,CAACnB,KAAK,GAAGmB,GAAG,CAACnB,KAAK,KAAK,IAAI,GAAGmB,GAAG,CAACE,UAAU,CAACR,CAAC,CAAC,GAAG,IAAI,CAACM,GAAG,CAACnB,KAAK,EAAEa,CAAC,CAAC;MACvE,OAAOM,GAAG;IACZ,CAAC;IACD,YAAY,EAAE,SAASI,QAAQ,CAACX,CAAC,EAAEC,CAAC,EAAE;MACpC,OAAOD,CAAC,CAACY,QAAQ,CAACX,CAAC,CAAC;IACtB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFd,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}