{"ast":null,"code":"\"use strict\";\n\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar series_1 = __importDefault(require(\"../core/series\"));\nvar frame_1 = __importDefault(require(\"../core/frame\"));\n/**\n *\n * @param dfList Array<DataFrame | Series>\n * @param axis number\n * @returns DataFrame\n */\nfunction processColumn(dfList, axis) {\n  var allDf = {};\n  var dublicateColumns = {};\n  var maxLen = 0;\n  for (var i = 0; i < dfList.length; i++) {\n    var df = dfList[i];\n    var columnData = void 0;\n    if (df instanceof frame_1.default) {\n      columnData = df.getColumnData;\n    } else {\n      columnData = [df.values];\n    }\n    var columns = df.columns;\n    for (var j = 0; j < columns.length; j++) {\n      var column = columns[j];\n      var colData = columnData[j];\n      if (colData.length > maxLen) {\n        maxLen = colData.length;\n      }\n      if (!(column in allDf)) {\n        allDf[column] = colData;\n        dublicateColumns[column] = 0;\n      } else {\n        dublicateColumns[column] += 1;\n        column += dublicateColumns[column];\n        allDf[column] = colData;\n      }\n    }\n  }\n  Object.keys(allDf).forEach(function (value) {\n    var _a;\n    var colLength = allDf[value].length;\n    if (colLength < maxLen) {\n      var residualLen = maxLen - colLength;\n      var nanList = new Array(residualLen).fill(NaN);\n      (_a = allDf[value]).push.apply(_a, nanList);\n    }\n  });\n  return new frame_1.default(allDf);\n}\n/**\n * Concat data along rows\n * @param dfList Array<DataFrame | Series>\n * @param axis  Array<DataFrame | Series>\n * @returns DataFrame\n */\nfunction processRow(dfList, axis) {\n  var allDf = {};\n  var maxLen = 0;\n  var _loop_1 = function (i) {\n    var _a, _b;\n    var df = dfList[i];\n    var columns = df.columns;\n    var columnData = void 0;\n    if (df instanceof frame_1.default) {\n      columnData = df.getColumnData;\n    } else {\n      columnData = [df.values];\n    }\n    if (i === 0) {\n      for (var j = 0; j < columns.length; j++) {\n        var column = columns[j];\n        var colData = columnData[j];\n        allDf[column] = colData;\n      }\n    } else {\n      var nonColumn = Object.keys(allDf).filter(function (key) {\n        return !columns.includes(key);\n      });\n      for (var j = 0; j < columns.length; j++) {\n        var column = columns[j];\n        var colData = columnData[j];\n        if (Object.keys(allDf).includes(column)) {\n          (_a = allDf[column]).push.apply(_a, colData);\n        } else {\n          var residualArray = new Array(maxLen).fill(NaN);\n          residualArray.push.apply(residualArray, colData);\n          allDf[column] = residualArray;\n        }\n      }\n      if (nonColumn.length > 0) {\n        var currentDfLen = columnData[0].length;\n        for (var j = 0; j < nonColumn.length; j++) {\n          var column = nonColumn[j];\n          var residualArray = new Array(currentDfLen).fill(NaN);\n          (_b = allDf[column]).push.apply(_b, residualArray);\n        }\n      }\n    }\n    maxLen += columnData[0].length;\n  };\n  for (var i = 0; i < dfList.length; i++) {\n    _loop_1(i);\n  }\n  if (Object.keys(allDf).length === 1) {\n    return new series_1.default(Object.values(allDf)[0]);\n  }\n  return new frame_1.default(allDf);\n}\n/**\n* Concatenate pandas objects along a particular axis.\n* @param object\n* dfList: Array of DataFrame or Series\n* axis: axis of concatenation 1 or 0\n* @returns {DataFrame}\n* @example\n* concat({dfList: [df1, df2, df3], axis: 1})\n*/\nfunction concat(_a) {\n  var dfList = _a.dfList,\n    axis = _a.axis;\n  if (axis === 1) {\n    return processColumn(dfList, axis);\n  }\n  return processRow(dfList, 0);\n}\nexports.default = concat;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","series_1","require","frame_1","processColumn","dfList","axis","allDf","dublicateColumns","maxLen","i","length","df","columnData","default","getColumnData","values","columns","j","column","colData","keys","forEach","_a","colLength","residualLen","nanList","Array","fill","NaN","push","apply","processRow","_loop_1","_b","nonColumn","filter","key","includes","residualArray","currentDfLen","concat"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/transformers/concat.js"],"sourcesContent":["\"use strict\";\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar series_1 = __importDefault(require(\"../core/series\"));\nvar frame_1 = __importDefault(require(\"../core/frame\"));\n/**\n *\n * @param dfList Array<DataFrame | Series>\n * @param axis number\n * @returns DataFrame\n */\nfunction processColumn(dfList, axis) {\n    var allDf = {};\n    var dublicateColumns = {};\n    var maxLen = 0;\n    for (var i = 0; i < dfList.length; i++) {\n        var df = dfList[i];\n        var columnData = void 0;\n        if (df instanceof frame_1.default) {\n            columnData = df.getColumnData;\n        }\n        else {\n            columnData = [df.values];\n        }\n        var columns = df.columns;\n        for (var j = 0; j < columns.length; j++) {\n            var column = columns[j];\n            var colData = columnData[j];\n            if (colData.length > maxLen) {\n                maxLen = colData.length;\n            }\n            if (!(column in allDf)) {\n                allDf[column] = colData;\n                dublicateColumns[column] = 0;\n            }\n            else {\n                dublicateColumns[column] += 1;\n                column += dublicateColumns[column];\n                allDf[column] = colData;\n            }\n        }\n    }\n    Object.keys(allDf).forEach(function (value) {\n        var _a;\n        var colLength = allDf[value].length;\n        if (colLength < maxLen) {\n            var residualLen = maxLen - colLength;\n            var nanList = new Array(residualLen).fill(NaN);\n            (_a = allDf[value]).push.apply(_a, nanList);\n        }\n    });\n    return new frame_1.default(allDf);\n}\n/**\n * Concat data along rows\n * @param dfList Array<DataFrame | Series>\n * @param axis  Array<DataFrame | Series>\n * @returns DataFrame\n */\nfunction processRow(dfList, axis) {\n    var allDf = {};\n    var maxLen = 0;\n    var _loop_1 = function (i) {\n        var _a, _b;\n        var df = dfList[i];\n        var columns = df.columns;\n        var columnData = void 0;\n        if (df instanceof frame_1.default) {\n            columnData = df.getColumnData;\n        }\n        else {\n            columnData = [df.values];\n        }\n        if (i === 0) {\n            for (var j = 0; j < columns.length; j++) {\n                var column = columns[j];\n                var colData = columnData[j];\n                allDf[column] = colData;\n            }\n        }\n        else {\n            var nonColumn = Object.keys(allDf).filter(function (key) {\n                return !columns.includes(key);\n            });\n            for (var j = 0; j < columns.length; j++) {\n                var column = columns[j];\n                var colData = columnData[j];\n                if (Object.keys(allDf).includes(column)) {\n                    (_a = allDf[column]).push.apply(_a, colData);\n                }\n                else {\n                    var residualArray = new Array(maxLen).fill(NaN);\n                    residualArray.push.apply(residualArray, colData);\n                    allDf[column] = residualArray;\n                }\n            }\n            if (nonColumn.length > 0) {\n                var currentDfLen = columnData[0].length;\n                for (var j = 0; j < nonColumn.length; j++) {\n                    var column = nonColumn[j];\n                    var residualArray = new Array(currentDfLen).fill(NaN);\n                    (_b = allDf[column]).push.apply(_b, residualArray);\n                }\n            }\n        }\n        maxLen += columnData[0].length;\n    };\n    for (var i = 0; i < dfList.length; i++) {\n        _loop_1(i);\n    }\n    if (Object.keys(allDf).length === 1) {\n        return new series_1.default(Object.values(allDf)[0]);\n    }\n    return new frame_1.default(allDf);\n}\n/**\n* Concatenate pandas objects along a particular axis.\n* @param object\n* dfList: Array of DataFrame or Series\n* axis: axis of concatenation 1 or 0\n* @returns {DataFrame}\n* @example\n* concat({dfList: [df1, df2, df3], axis: 1})\n*/\nfunction concat(_a) {\n    var dfList = _a.dfList, axis = _a.axis;\n    if (axis === 1) {\n        return processColumn(dfList, axis);\n    }\n    return processRow(dfList, 0);\n}\nexports.default = concat;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}