{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createColumn = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createColumn = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Index = _ref.Index,\n    matrix = _ref.matrix,\n    range = _ref.range;\n\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix((0, _object.clone)(value)), column).valueOf();\n    }\n  });\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    (0, _array.validateIndex)(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});\nexports.createColumn = createColumn;","map":{"version":3,"names":["Object","defineProperty","exports","value","createColumn","_factory","require","_object","_array","name","dependencies","factory","_ref","typed","Index","matrix","range","_column","ArrayNumber","column","clone","valueOf","size","length","Error","validateIndex","rowRange","index","subset"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/column.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createColumn = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createColumn = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix((0, _object.clone)(value)), column).valueOf();\n    }\n  });\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    (0, _array.validateIndex)(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});\nexports.createColumn = createColumn;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAE7B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9C,IAAIE,MAAM,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIG,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;AACxD,IAAIN,YAAY,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC1F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAClBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,KAAK,GAAGJ,IAAI,CAACI,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAEQ,OAAO;IACzB,eAAe,EAAE,SAASC,WAAW,CAACf,KAAK,EAAEgB,MAAM,EAAE;MACnD,OAAOF,OAAO,CAACF,MAAM,CAAC,CAAC,CAAC,EAAER,OAAO,CAACa,KAAK,EAAEjB,KAAK,CAAC,CAAC,EAAEgB,MAAM,CAAC,CAACE,OAAO,EAAE;IACrE;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASJ,OAAO,CAACd,KAAK,EAAEgB,MAAM,EAAE;IAC9B;IACA,IAAIhB,KAAK,CAACmB,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IAEA,CAAC,CAAC,EAAEhB,MAAM,CAACiB,aAAa,EAAEN,MAAM,EAAEhB,KAAK,CAACmB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAClD,IAAII,QAAQ,GAAGV,KAAK,CAAC,CAAC,EAAEb,KAAK,CAACmB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACxC,IAAIK,KAAK,GAAG,IAAIb,KAAK,CAACY,QAAQ,EAAEP,MAAM,CAAC;IACvC,OAAOhB,KAAK,CAACyB,MAAM,CAACD,KAAK,CAAC;EAC5B;AACF,CAAC,CAAC;AACFzB,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}