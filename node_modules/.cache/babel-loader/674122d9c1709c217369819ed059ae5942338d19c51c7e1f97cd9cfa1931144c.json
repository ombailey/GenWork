{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapCell = void 0;\nconst utils_1 = require(\"./utils\");\nconst wrapString_1 = require(\"./wrapString\");\nconst wrapWord_1 = require(\"./wrapWord\");\n/**\n * Wrap a single cell value into a list of lines\n *\n * Always wraps on newlines, for the remainder uses either word or string wrapping\n * depending on user configuration.\n *\n */\nconst wrapCell = (cellValue, cellWidth, useWrapWord) => {\n  // First split on literal newlines\n  const cellLines = utils_1.splitAnsi(cellValue);\n  // Then iterate over the list and word-wrap every remaining line if necessary.\n  for (let lineNr = 0; lineNr < cellLines.length;) {\n    let lineChunks;\n    if (useWrapWord) {\n      lineChunks = wrapWord_1.wrapWord(cellLines[lineNr], cellWidth);\n    } else {\n      lineChunks = wrapString_1.wrapString(cellLines[lineNr], cellWidth);\n    }\n    // Replace our original array element with whatever the wrapping returned\n    cellLines.splice(lineNr, 1, ...lineChunks);\n    lineNr += lineChunks.length;\n  }\n  return cellLines;\n};\nexports.wrapCell = wrapCell;","map":{"version":3,"names":["Object","defineProperty","exports","value","wrapCell","utils_1","require","wrapString_1","wrapWord_1","cellValue","cellWidth","useWrapWord","cellLines","splitAnsi","lineNr","length","lineChunks","wrapWord","wrapString","splice"],"sources":["/Users/omarbailey/node_modules/table/dist/wrapCell.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapCell = void 0;\nconst utils_1 = require(\"./utils\");\nconst wrapString_1 = require(\"./wrapString\");\nconst wrapWord_1 = require(\"./wrapWord\");\n/**\n * Wrap a single cell value into a list of lines\n *\n * Always wraps on newlines, for the remainder uses either word or string wrapping\n * depending on user configuration.\n *\n */\nconst wrapCell = (cellValue, cellWidth, useWrapWord) => {\n    // First split on literal newlines\n    const cellLines = utils_1.splitAnsi(cellValue);\n    // Then iterate over the list and word-wrap every remaining line if necessary.\n    for (let lineNr = 0; lineNr < cellLines.length;) {\n        let lineChunks;\n        if (useWrapWord) {\n            lineChunks = wrapWord_1.wrapWord(cellLines[lineNr], cellWidth);\n        }\n        else {\n            lineChunks = wrapString_1.wrapString(cellLines[lineNr], cellWidth);\n        }\n        // Replace our original array element with whatever the wrapping returned\n        cellLines.splice(lineNr, 1, ...lineChunks);\n        lineNr += lineChunks.length;\n    }\n    return cellLines;\n};\nexports.wrapCell = wrapCell;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,QAAQ,GAAG,CAACK,SAAS,EAAEC,SAAS,EAAEC,WAAW,KAAK;EACpD;EACA,MAAMC,SAAS,GAAGP,OAAO,CAACQ,SAAS,CAACJ,SAAS,CAAC;EAC9C;EACA,KAAK,IAAIK,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,SAAS,CAACG,MAAM,GAAG;IAC7C,IAAIC,UAAU;IACd,IAAIL,WAAW,EAAE;MACbK,UAAU,GAAGR,UAAU,CAACS,QAAQ,CAACL,SAAS,CAACE,MAAM,CAAC,EAAEJ,SAAS,CAAC;IAClE,CAAC,MACI;MACDM,UAAU,GAAGT,YAAY,CAACW,UAAU,CAACN,SAAS,CAACE,MAAM,CAAC,EAAEJ,SAAS,CAAC;IACtE;IACA;IACAE,SAAS,CAACO,MAAM,CAACL,MAAM,EAAE,CAAC,EAAE,GAAGE,UAAU,CAAC;IAC1CF,MAAM,IAAIE,UAAU,CAACD,MAAM;EAC/B;EACA,OAAOH,SAAS;AACpB,CAAC;AACDV,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}