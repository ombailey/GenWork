{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComplex = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _collection = require(\"../../../utils/collection.js\");\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nvar createComplex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Complex = _ref.Complex;\n\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n\n    \"null\": function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createComplex = createComplex;","map":{"version":3,"names":["Object","defineProperty","exports","value","createComplex","_factory","require","_collection","name","dependencies","factory","_ref","typed","Complex","_","ZERO","number","x","numberNumber","re","im","BigNumberBigNumber","toNumber","Fraction","valueOf","clone","string","_null","Error","ArrayMatrix","deepMap"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/complex/function/complex.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComplex = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nvar createComplex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Complex = _ref.Complex;\n\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    \"null\": function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createComplex = createComplex;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}