{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTrace = void 0;\nvar _object = require(\"../../utils/object.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nvar createTrace = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    add = _ref.add;\n\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: _object.clone\n  });\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data; // process dimensions\n\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return (0, _object.clone)(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0; // loop diagonal\n\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            } // return trace\n\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n          }\n        }\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(size) + ')');\n    }\n  }\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size; // check dimensions\n\n    var rows = size[0];\n    var columns = size[1]; // matrix must be square\n\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0; // check we have data (avoid looping columns)\n\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k]; // check row\n\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]); // exit loop\n\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      } // return trace\n\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n  }\n});\nexports.createTrace = createTrace;","map":{"version":3,"names":["Object","defineProperty","exports","value","createTrace","_object","require","_string","_factory","name","dependencies","factory","_ref","typed","matrix","add","Array","_arrayTrace","x","_denseTrace","SparseMatrix","_sparseTrace","DenseMatrix","any","clone","m","size","_size","data","_data","length","RangeError","format","rows","cols","sum","i","values","_values","index","_index","ptr","_ptr","columns","j","k0","k1","k"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/trace.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTrace = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nvar createTrace = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      add = _ref.add;\n\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: _object.clone\n  });\n\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data; // process dimensions\n\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return (0, _object.clone)(data[0]);\n        }\n\n        throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0; // loop diagonal\n\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            } // return trace\n\n\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n          }\n        }\n\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(size) + ')');\n    }\n  }\n\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size; // check dimensions\n\n    var rows = size[0];\n    var columns = size[1]; // matrix must be square\n\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0; // check we have data (avoid looping columns)\n\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k]; // check row\n\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]); // exit loop\n\n              break;\n            }\n\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      } // return trace\n\n\n      return sum;\n    }\n\n    throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n  }\n});\nexports.createTrace = createTrace;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}