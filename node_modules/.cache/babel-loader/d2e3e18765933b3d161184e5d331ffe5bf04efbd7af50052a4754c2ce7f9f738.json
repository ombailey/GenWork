{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSum = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nvar createSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    add = _ref.add,\n    numeric = _ref.numeric;\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n    return sum;\n  }\n  function _nsumDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum');\n    }\n  }\n});\nexports.createSum = createSum;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSum","_collection","require","_factory","_improveErrorMessage","name","dependencies","factory","_ref","typed","config","add","numeric","_sum","_nsumDim","_","args","containsCollections","TypeError","array","sum","deepForEach","undefined","err","improveErrorMessage","number","dim","reduce"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/statistics/sum.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSum = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nvar createSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      add = _ref.add,\n      numeric = _ref.numeric;\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum');\n    }\n  }\n});\nexports.createSum = createSum;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAE1B,IAAIC,WAAW,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAEpE,IAAIG,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC;AACxD,IAAIN,SAAS,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACvF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,GAAG,GAAGH,IAAI,CAACG,GAAG;IACdC,OAAO,GAAGJ,IAAI,CAACI,OAAO;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,IAAI;IACtB;IACA,oCAAoC,EAAEC,QAAQ;IAC9C;IACA,KAAK,EAAE,SAASC,CAAC,CAACC,IAAI,EAAE;MACtB,IAAI,CAAC,CAAC,EAAEf,WAAW,CAACgB,mBAAmB,EAAED,IAAI,CAAC,EAAE;QAC9C,MAAM,IAAIE,SAAS,CAAC,wCAAwC,CAAC;MAC/D;MAEA,OAAOL,IAAI,CAACG,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASH,IAAI,CAACM,KAAK,EAAE;IACnB,IAAIC,GAAG;IACP,CAAC,CAAC,EAAEnB,WAAW,CAACoB,WAAW,EAAEF,KAAK,EAAE,UAAUpB,KAAK,EAAE;MACnD,IAAI;QACFqB,GAAG,GAAGA,GAAG,KAAKE,SAAS,GAAGvB,KAAK,GAAGY,GAAG,CAACS,GAAG,EAAErB,KAAK,CAAC;MACnD,CAAC,CAAC,OAAOwB,GAAG,EAAE;QACZ,MAAM,CAAC,CAAC,EAAEnB,oBAAoB,CAACoB,mBAAmB,EAAED,GAAG,EAAE,KAAK,EAAExB,KAAK,CAAC;MACxE;IACF,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAIqB,GAAG,KAAKE,SAAS,EAAE;MACrBF,GAAG,GAAGR,OAAO,CAAC,CAAC,EAAEF,MAAM,CAACe,MAAM,CAAC;IACjC;IAEA,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;MAC3BA,GAAG,GAAGR,OAAO,CAACQ,GAAG,EAAEV,MAAM,CAACe,MAAM,CAAC;IACnC;IAEA,OAAOL,GAAG;EACZ;EAEA,SAASN,QAAQ,CAACK,KAAK,EAAEO,GAAG,EAAE;IAC5B,IAAI;MACF,IAAIN,GAAG,GAAG,CAAC,CAAC,EAAEnB,WAAW,CAAC0B,MAAM,EAAER,KAAK,EAAEO,GAAG,EAAEf,GAAG,CAAC;MAClD,OAAOS,GAAG;IACZ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,MAAM,CAAC,CAAC,EAAEnB,oBAAoB,CAACoB,mBAAmB,EAAED,GAAG,EAAE,KAAK,CAAC;IACjE;EACF;AACF,CAAC,CAAC;AACFzB,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}