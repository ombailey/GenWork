{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBignumber = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _collection = require(\"../../../utils/collection.js\");\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nvar createBignumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    \"null\": function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBignumber = createBignumber;","map":{"version":3,"names":["Object","defineProperty","exports","value","createBignumber","_factory","require","_collection","name","dependencies","factory","_ref","typed","BigNumber","_","number","x","string","wordSizeSuffixMatch","match","size","n","twoPowSize","pow","Number","gt","sub","SyntaxError","concat","twoPowSizeSubOne","gte","Fraction","div","d","times","s","_null","ArrayMatrix","deepMap"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBignumber = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nvar createBignumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    \"null\": function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBignumber = createBignumber;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}