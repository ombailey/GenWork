{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMapTransform = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _function = require(\"../../utils/function.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _compileInlineExpression = require(\"./utils/compileInlineExpression.js\");\nvar name = 'map';\nvar dependencies = ['typed'];\nvar createMapTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function mapTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);\n      }\n    }\n    return map(x, callback);\n  }\n  mapTransform.rawArgs = true; // one-based version of map function\n\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\n\nexports.createMapTransform = createMapTransform;\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = (0, _function.maxArgumentCount)(callback);\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return (0, _array.map)(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n  return recurse(array, []);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createMapTransform","_is","require","_function","_array","_factory","_compileInlineExpression","name","dependencies","factory","_ref","typed","mapTransform","args","math","scope","x","callback","compile","evaluate","isSymbolNode","isFunctionAssignmentNode","compileInlineExpression","map","rawArgs","ArrayFunction","_map","MatrixFunction","create","valueOf","isTransformFunction","array","orig","argsCount","maxArgumentCount","recurse","index","Array","isArray","child","i","concat"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/transform/map.transform.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMapTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _compileInlineExpression = require(\"./utils/compileInlineExpression.js\");\n\nvar name = 'map';\nvar dependencies = ['typed'];\nvar createMapTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function mapTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);\n      }\n    }\n\n    return map(x, callback);\n  }\n\n  mapTransform.rawArgs = true; // one-based version of map function\n\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\n\nexports.createMapTransform = createMapTransform;\n\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = (0, _function.maxArgumentCount)(callback);\n\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return (0, _array.map)(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n\n  return recurse(array, []);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}