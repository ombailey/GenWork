{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGamma = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nvar createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    multiplyScalar = _ref.multiplyScalar,\n    pow = _ref.pow,\n    _BigNumber = _ref.BigNumber,\n    _Complex = _ref.Complex;\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  return typed(name, {\n    number: _index.gammaNumber,\n    Complex: function Complex(n) {\n      if (n.im === 0) {\n        return this(n.re);\n      }\n      n = new _Complex(n.re - 1, n.im);\n      var x = new _Complex(_index.gammaP[0], 0);\n      for (var i = 1; i < _index.gammaP.length; ++i) {\n        var real = n.re + i; // x += p[i]/(n+i)\n\n        var den = real * real + n.im * n.im;\n        if (den !== 0) {\n          x.re += _index.gammaP[i] * real / den;\n          x.im += -(_index.gammaP[i] * n.im) / den;\n        } else {\n          x.re = _index.gammaP[i] < 0 ? -Infinity : Infinity;\n        }\n      }\n      var t = new _Complex(n.re + _index.gammaG + 0.5, n.im);\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\n      n.re += 0.5;\n      var result = pow(t, n);\n      if (result.im === 0) {\n        // sqrt(2*PI)*result\n        result.re *= twoPiSqrt;\n      } else if (result.re === 0) {\n        result.im *= twoPiSqrt;\n      } else {\n        result.re *= twoPiSqrt;\n        result.im *= twoPiSqrt;\n      }\n      var r = Math.exp(-t.re); // exp(-t)\n\n      t.re = r * Math.cos(-t.im);\n      t.im = r * Math.sin(-t.im);\n      return multiplyScalar(multiplyScalar(result, t), x);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return (0, _collection.deepMap)(n, this);\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision: precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});\nexports.createGamma = createGamma;","map":{"version":3,"names":["Object","defineProperty","exports","value","createGamma","_collection","require","_factory","_index","name","dependencies","factory","_ref","typed","config","multiplyScalar","pow","_BigNumber","BigNumber","_Complex","Complex","number","gammaNumber","n","im","re","x","gammaP","i","length","real","den","Infinity","t","gammaG","twoPiSqrt","Math","sqrt","PI","result","r","exp","cos","sin","isInteger","isNegative","isZero","bigFactorial","minus","isFinite","NaN","Error","ArrayMatrix","deepMap","precision","log","toNumber","Big","clone","times","p","prod","sum","toPrecision"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/probability/gamma.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGamma = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nvar createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      pow = _ref.pow,\n      _BigNumber = _ref.BigNumber,\n      _Complex = _ref.Complex;\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  return typed(name, {\n    number: _index.gammaNumber,\n    Complex: function Complex(n) {\n      if (n.im === 0) {\n        return this(n.re);\n      }\n\n      n = new _Complex(n.re - 1, n.im);\n      var x = new _Complex(_index.gammaP[0], 0);\n\n      for (var i = 1; i < _index.gammaP.length; ++i) {\n        var real = n.re + i; // x += p[i]/(n+i)\n\n        var den = real * real + n.im * n.im;\n\n        if (den !== 0) {\n          x.re += _index.gammaP[i] * real / den;\n          x.im += -(_index.gammaP[i] * n.im) / den;\n        } else {\n          x.re = _index.gammaP[i] < 0 ? -Infinity : Infinity;\n        }\n      }\n\n      var t = new _Complex(n.re + _index.gammaG + 0.5, n.im);\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\n      n.re += 0.5;\n      var result = pow(t, n);\n\n      if (result.im === 0) {\n        // sqrt(2*PI)*result\n        result.re *= twoPiSqrt;\n      } else if (result.re === 0) {\n        result.im *= twoPiSqrt;\n      } else {\n        result.re *= twoPiSqrt;\n        result.im *= twoPiSqrt;\n      }\n\n      var r = Math.exp(-t.re); // exp(-t)\n\n      t.re = r * Math.cos(-t.im);\n      t.im = r * Math.sin(-t.im);\n      return multiplyScalar(multiplyScalar(result, t), x);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return (0, _collection.deepMap)(n, this);\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n\n    var Big = _BigNumber.clone({\n      precision: precision\n    });\n\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});\nexports.createGamma = createGamma;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}