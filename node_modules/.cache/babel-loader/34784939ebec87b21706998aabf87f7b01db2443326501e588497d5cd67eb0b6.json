{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.histPlot = void 0;\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar utils_1 = require(\"./utils\");\n/**\n* Plot Series or DataFrame as histogram.\n* Uses the Plotly as backend, so supoorts Plotly's configuration parameters,\n* Line plot supports different types of parameters, and the behavior will depend on data specified.\n* The precedence of columns to plot is: (x and y => x => y => columns).\n* @param ndframe Series or DataFrame to plot\n* @param divId HTML div id to plot in.\n* @param plotConfig configuration options for making Plots, supports Plotly.js Config and Layout parameters.\n*/\nvar histPlot = function (ndframe, divId, plotConfig, Plotly) {\n  var config = plotConfig[\"config\"];\n  var layout = plotConfig[\"layout\"];\n  if (ndframe instanceof series_1.default) {\n    var trace = {\n      x: ndframe.values,\n      type: 'histogram'\n    };\n    Plotly.newPlot(divId, [trace], layout, config);\n  } else {\n    if (config[\"x\"] || config[\"y\"]) {\n      //plot single column specified in either of param [x | y] against index\n      if (config[\"x\"]) {\n        (0, utils_1.throwErrorOnWrongColName)(ndframe, config.x);\n        var x = ndframe[config.x].values;\n        var trace = {\n          x: x,\n          type: 'histogram'\n        };\n        var _layout = __assign({\n          xaxis: {\n            title: config.x\n          }\n        }, layout);\n        Plotly.newPlot(divId, [trace], _layout, config);\n      }\n      if (config[\"y\"]) {\n        (0, utils_1.throwErrorOnWrongColName)(ndframe, config.y);\n        var y = ndframe[config.y].values;\n        var trace = {\n          y: y,\n          type: 'histogram'\n        };\n        var _layout = __assign({\n          yaxis: {\n            title: config.y\n          }\n        }, layout);\n        Plotly.newPlot(divId, [trace], _layout, config);\n      }\n    } else {\n      //plot specified columns in config param against index\n      // if columns is not specified in config, then plot all columns\n      var cols = config[\"columns\"] ? (0, utils_1.checkIfColsExist)(ndframe, config['columns']) : ndframe.columns;\n      var traces_1 = [];\n      cols.forEach(function (col) {\n        var y = ndframe.index;\n        var x = ndframe[col].values;\n        var trace = {\n          x: x,\n          y: y,\n          name: col,\n          type: 'histogram'\n        };\n        traces_1.push(trace);\n      });\n      Plotly.newPlot(divId, traces_1, layout, config);\n    }\n  }\n};\nexports.histPlot = histPlot;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","histPlot","series_1","require","utils_1","ndframe","divId","plotConfig","Plotly","config","layout","default","trace","x","values","type","newPlot","throwErrorOnWrongColName","_layout","xaxis","title","y","yaxis","cols","checkIfColsExist","columns","traces_1","forEach","col","index","name","push"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/plotting/plotly/hist.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.histPlot = void 0;\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar utils_1 = require(\"./utils\");\n/**\n* Plot Series or DataFrame as histogram.\n* Uses the Plotly as backend, so supoorts Plotly's configuration parameters,\n* Line plot supports different types of parameters, and the behavior will depend on data specified.\n* The precedence of columns to plot is: (x and y => x => y => columns).\n* @param ndframe Series or DataFrame to plot\n* @param divId HTML div id to plot in.\n* @param plotConfig configuration options for making Plots, supports Plotly.js Config and Layout parameters.\n*/\nvar histPlot = function (ndframe, divId, plotConfig, Plotly) {\n    var config = plotConfig[\"config\"];\n    var layout = plotConfig[\"layout\"];\n    if (ndframe instanceof series_1.default) {\n        var trace = {\n            x: ndframe.values,\n            type: 'histogram',\n        };\n        Plotly.newPlot(divId, [trace], layout, config);\n    }\n    else {\n        if (config[\"x\"] || config[\"y\"]) {\n            //plot single column specified in either of param [x | y] against index\n            if (config[\"x\"]) {\n                (0, utils_1.throwErrorOnWrongColName)(ndframe, config.x);\n                var x = ndframe[config.x].values;\n                var trace = {\n                    x: x,\n                    type: 'histogram',\n                };\n                var _layout = __assign({ xaxis: {\n                        title: config.x,\n                    } }, layout);\n                Plotly.newPlot(divId, [trace], _layout, config);\n            }\n            if (config[\"y\"]) {\n                (0, utils_1.throwErrorOnWrongColName)(ndframe, config.y);\n                var y = ndframe[config.y].values;\n                var trace = {\n                    y: y,\n                    type: 'histogram',\n                };\n                var _layout = __assign({ yaxis: {\n                        title: config.y,\n                    } }, layout);\n                Plotly.newPlot(divId, [trace], _layout, config);\n            }\n        }\n        else {\n            //plot specified columns in config param against index\n            // if columns is not specified in config, then plot all columns\n            var cols = config[\"columns\"] ? (0, utils_1.checkIfColsExist)(ndframe, config['columns']) : ndframe.columns;\n            var traces_1 = [];\n            cols.forEach(function (col) {\n                var y = ndframe.index;\n                var x = ndframe[col].values;\n                var trace = { x: x, y: y, name: col, type: 'histogram' };\n                traces_1.push(trace);\n            });\n            Plotly.newPlot(divId, traces_1, layout, config);\n        }\n    }\n};\nexports.histPlot = histPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}