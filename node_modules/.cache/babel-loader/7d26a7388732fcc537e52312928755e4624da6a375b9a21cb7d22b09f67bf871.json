{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetIsSubset = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetIsSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    size = _ref.size,\n    subset = _ref.subset,\n    compareNatural = _ref.compareNatural,\n    Index = _ref.Index;\n\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n      var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n});\nexports.createSetIsSubset = createSetIsSubset;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSetIsSubset","_array","require","_factory","name","dependencies","factory","_ref","typed","size","subset","compareNatural","Index","ArrayMatrixArrayMatrix","a1","a2","b1","identify","flatten","Array","isArray","toArray","sort","b2","inb2","i","length","j","identifier"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/set/setIsSubset.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetIsSubset = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetIsSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});\nexports.createSetIsSubset = createSetIsSubset;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}