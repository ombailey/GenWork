{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParse = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _factory = require(\"../utils/factory.js\");\nvar _is = require(\"../utils/is.js\");\nvar _collection = require(\"../utils/collection.js\");\nvar _object = require(\"../utils/object.js\");\nvar name = 'parse';\nvar dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];\nvar createParse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    numeric = _ref.numeric,\n    config = _ref.config,\n    AccessorNode = _ref.AccessorNode,\n    ArrayNode = _ref.ArrayNode,\n    AssignmentNode = _ref.AssignmentNode,\n    BlockNode = _ref.BlockNode,\n    ConditionalNode = _ref.ConditionalNode,\n    ConstantNode = _ref.ConstantNode,\n    FunctionAssignmentNode = _ref.FunctionAssignmentNode,\n    FunctionNode = _ref.FunctionNode,\n    IndexNode = _ref.IndexNode,\n    ObjectNode = _ref.ObjectNode,\n    OperatorNode = _ref.OperatorNode,\n    ParenthesisNode = _ref.ParenthesisNode,\n    RangeNode = _ref.RangeNode,\n    RelationalNode = _ref.RelationalNode,\n    SymbolNode = _ref.SymbolNode;\n\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.evaluate().\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n   *     node1.compile().evaluate() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node2 = math.parse('a * b') // 12\n   *     const code2 = node2.compile()\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile().evaluate() // 12\n   *\n   * See also:\n   *\n   *     evaluate, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  var parse = typed(name, {\n    string: function string(expression) {\n      return parseStart(expression, {});\n    },\n    'Array | Matrix': function ArrayMatrix(expressions) {\n      return parseMultiple(expressions, {});\n    },\n    'string, Object': function stringObject(expression, options) {\n      var extraNodes = options.nodes !== undefined ? options.nodes : {};\n      return parseStart(expression, extraNodes);\n    },\n    'Array | Matrix, Object': parseMultiple\n  });\n  function parseMultiple(expressions) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions\n\n    return (0, _collection.deepMap)(expressions, function (elem) {\n      if (typeof elem !== 'string') throw new TypeError('String expected');\n      return parseStart(elem, extraNodes);\n    });\n  } // token types enumeration\n\n  var TOKENTYPE = {\n    NULL: 0,\n    DELIMITER: 1,\n    NUMBER: 2,\n    SYMBOL: 3,\n    UNKNOWN: 4\n  }; // map with all delimiters\n\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\"': true,\n    '\\'': true,\n    ';': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '=': true,\n    ':': true,\n    '?': true,\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true\n  }; // map with all named delimiters\n\n  var NAMED_DELIMITERS = {\n    mod: true,\n    to: true,\n    \"in\": true,\n    and: true,\n    xor: true,\n    or: true,\n    not: true\n  };\n  var CONSTANTS = {\n    \"true\": true,\n    \"false\": false,\n    \"null\": null,\n    undefined: undefined\n  };\n  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];\n  function initialState() {\n    return {\n      extraNodes: {},\n      // current extra nodes, must be careful not to mutate\n      expression: '',\n      // current expression\n      comment: '',\n      // last parsed comment\n      index: 0,\n      // current index in expr\n      token: '',\n      // current token\n      tokenType: TOKENTYPE.NULL,\n      // type of the token\n      nestingLevel: 0,\n      // level of nesting inside parameters, used to ignore newline characters\n      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here\n    };\n  }\n  /**\n   * View upto `length` characters of the expression starting at the current character.\n   *\n   * @param {Object} state\n   * @param {number} [length=1] Number of characters to view\n   * @returns {string}\n   * @private\n   */\n\n  function currentString(state, length) {\n    return state.expression.substr(state.index, length);\n  }\n  /**\n   * View the current character. Returns '' if end of expression is reached.\n   *\n   * @param {Object} state\n   * @returns {string}\n   * @private\n   */\n\n  function currentCharacter(state) {\n    return currentString(state, 1);\n  }\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n\n  function next(state) {\n    state.index++;\n  }\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n  function prevCharacter(state) {\n    return state.expression.charAt(state.index - 1);\n  }\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n  function nextCharacter(state) {\n    return state.expression.charAt(state.index + 1);\n  }\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and tokenType\n   * @private\n   */\n\n  function getToken(state) {\n    state.tokenType = TOKENTYPE.NULL;\n    state.token = '';\n    state.comment = ''; // skip over whitespaces\n    // space, tab, and newline when inside parameters\n\n    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {\n      next(state);\n    } // skip comment\n\n    if (currentCharacter(state) === '#') {\n      while (currentCharacter(state) !== '\\n' && currentCharacter(state) !== '') {\n        state.comment += currentCharacter(state);\n        next(state);\n      }\n    } // check for end of expression\n\n    if (currentCharacter(state) === '') {\n      // token is still empty\n      state.tokenType = TOKENTYPE.DELIMITER;\n      return;\n    } // check for new line character\n\n    if (currentCharacter(state) === '\\n' && !state.nestingLevel) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = currentCharacter(state);\n      next(state);\n      return;\n    }\n    var c1 = currentCharacter(state);\n    var c2 = currentString(state, 2);\n    var c3 = currentString(state, 3);\n    if (c3.length === 3 && DELIMITERS[c3]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c3;\n      next(state);\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 2 characters\n\n    if (c2.length === 2 && DELIMITERS[c2]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c2;\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 1 character\n\n    if (DELIMITERS[c1]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c1;\n      next(state);\n      return;\n    } // check for a number\n\n    if (parse.isDigitDot(c1)) {\n      state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex\n\n      var _c = currentString(state, 2);\n      if (_c === '0b' || _c === '0o' || _c === '0x') {\n        state.token += currentCharacter(state);\n        next(state);\n        state.token += currentCharacter(state);\n        next(state);\n        while (parse.isHexDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n        if (currentCharacter(state) === '.') {\n          // this number has a radix point\n          state.token += '.';\n          next(state); // get the digits after the radix\n\n          while (parse.isHexDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n        } else if (currentCharacter(state) === 'i') {\n          // this number has a word size suffix\n          state.token += 'i';\n          next(state); // get the word size\n\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n        }\n        return;\n      } // get number, can have a single dot\n\n      if (currentCharacter(state) === '.') {\n        state.token += currentCharacter(state);\n        next(state);\n        if (!parse.isDigit(currentCharacter(state))) {\n          // this is no number, it is just a dot (can be dot notation)\n          state.tokenType = TOKENTYPE.DELIMITER;\n          return;\n        }\n      } else {\n        while (parse.isDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n      }\n      while (parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      } // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n\n      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {\n        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {\n          state.token += currentCharacter(state);\n          next(state);\n          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {\n            state.token += currentCharacter(state);\n            next(state);\n          } // Scientific notation MUST be followed by an exponent\n\n          if (!parse.isDigit(currentCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n        } else if (nextCharacter(state) === '.') {\n          next(state);\n          throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n        }\n      }\n      return;\n    } // check for variables, functions, named operators\n\n    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {\n      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n      if ((0, _object.hasOwnProperty)(NAMED_DELIMITERS, state.token)) {\n        state.tokenType = TOKENTYPE.DELIMITER;\n      } else {\n        state.tokenType = TOKENTYPE.SYMBOL;\n      }\n      return;\n    } // something unknown is found, wrong characters -> a syntax error\n\n    state.tokenType = TOKENTYPE.UNKNOWN;\n    while (currentCharacter(state) !== '') {\n      state.token += currentCharacter(state);\n      next(state);\n    }\n    throw createSyntaxError(state, 'Syntax error in part \"' + state.token + '\"');\n  }\n  /**\n   * Get next token and skip newline tokens\n   */\n\n  function getTokenSkipNewline(state) {\n    do {\n      getToken(state);\n    } while (state.token === '\\n'); // eslint-disable-line no-unmodified-loop-condition\n  }\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams(state) is called\n   */\n\n  function openParams(state) {\n    state.nestingLevel++;\n  }\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n\n  function closeParams(state) {\n    state.nestingLevel--;\n  }\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                        Ascii: _\n   * - A dollar sign                        Ascii: $\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n\n  parse.isAlpha = function isAlpha(c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);\n  };\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {\n    return /^[a-zA-Z_$\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * https://unicode-table.com/en/\n   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n\n  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {\n    return /^[\\uD835]$/.test(high) && /^[\\uDC00-\\uDFFF]$/.test(low) && /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n\n  parse.isWhitespace = function isWhitespace(c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c === ' ' || c === '\\t' || c === '\\n' && nestingLevel > 0;\n  };\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n\n  parse.isDecimalMark = function isDecimalMark(c, cNext) {\n    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n  parse.isDigitDot = function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  };\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n  parse.isDigit = function isDigit(c) {\n    return c >= '0' && c <= '9';\n  };\n  /**\n   * checks if the given char c is a hex digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n  parse.isHexDigit = function isHexDigit(c) {\n    return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';\n  };\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n\n  function parseStart(expression, extraNodes) {\n    var state = initialState();\n    (0, _extends2[\"default\"])(state, {\n      expression: expression,\n      extraNodes: extraNodes\n    });\n    getToken(state);\n    var node = parseBlock(state); // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and tokenType DELIMITER\n\n    if (state.token !== '') {\n      if (state.tokenType === TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean !== ?\"\n        throw createError(state, 'Unexpected operator ' + state.token);\n      } else {\n        throw createSyntaxError(state, 'Unexpected part \"' + state.token + '\"');\n      }\n    }\n    return node;\n  }\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n\n  function parseBlock(state) {\n    var node;\n    var blocks = [];\n    var visible;\n    if (state.token !== '' && state.token !== '\\n' && state.token !== ';') {\n      node = parseAssignment(state);\n      node.comment = state.comment;\n    } // TODO: simplify this loop\n\n    while (state.token === '\\n' || state.token === ';') {\n      // eslint-disable-line no-unmodified-loop-condition\n      if (blocks.length === 0 && node) {\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n      getToken(state);\n      if (state.token !== '\\n' && state.token !== ';' && state.token !== '') {\n        node = parseAssignment(state);\n        node.comment = state.comment;\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    } else {\n      if (!node) {\n        node = new ConstantNode(undefined);\n        node.comment = state.comment;\n      }\n      return node;\n    }\n  }\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseAssignment(state) {\n    var name, args, value, valid;\n    var node = parseConditional(state);\n    if (state.token === '=') {\n      if ((0, _is.isSymbolNode)(node)) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(new SymbolNode(name), value);\n      } else if ((0, _is.isAccessorNode)(node)) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(node.object, node.index, value);\n      } else if ((0, _is.isFunctionNode)(node) && (0, _is.isSymbolNode)(node.fn)) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if ((0, _is.isSymbolNode)(arg)) {\n            args[index] = arg.name;\n          } else {\n            valid = false;\n          }\n        });\n        if (valid) {\n          getTokenSkipNewline(state);\n          value = parseAssignment(state);\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');\n    }\n    return node;\n  }\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n\n  function parseConditional(state) {\n    var node = parseLogicalOr(state);\n    while (state.token === '?') {\n      // eslint-disable-line no-unmodified-loop-condition\n      // set a conditional level, the range operator will be ignored as long\n      // as conditionalLevel === state.nestingLevel.\n      var prev = state.conditionalLevel;\n      state.conditionalLevel = state.nestingLevel;\n      getTokenSkipNewline(state);\n      var condition = node;\n      var trueExpr = parseAssignment(state);\n      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');\n      state.conditionalLevel = null;\n      getTokenSkipNewline(state);\n      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level\n\n      state.conditionalLevel = prev;\n    }\n    return node;\n  }\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseLogicalOr(state) {\n    var node = parseLogicalXor(state);\n    while (state.token === 'or') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);\n    }\n    return node;\n  }\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseLogicalXor(state) {\n    var node = parseLogicalAnd(state);\n    while (state.token === 'xor') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);\n    }\n    return node;\n  }\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseLogicalAnd(state) {\n    var node = parseBitwiseOr(state);\n    while (state.token === 'and') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);\n    }\n    return node;\n  }\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseBitwiseOr(state) {\n    var node = parseBitwiseXor(state);\n    while (state.token === '|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);\n    }\n    return node;\n  }\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseBitwiseXor(state) {\n    var node = parseBitwiseAnd(state);\n    while (state.token === '^|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);\n    }\n    return node;\n  }\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseBitwiseAnd(state) {\n    var node = parseRelational(state);\n    while (state.token === '&') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);\n    }\n    return node;\n  }\n  /**\n   * Parse a chained conditional, like 'a > b >= c'\n   * @return {Node} node\n   */\n\n  function parseRelational(state) {\n    var params = [parseShift(state)];\n    var conditionals = [];\n    var operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      var cond = {\n        name: state.token,\n        fn: operators[state.token]\n      };\n      conditionals.push(cond);\n      getTokenSkipNewline(state);\n      params.push(parseShift(state));\n    }\n    if (params.length === 1) {\n      return params[0];\n    } else if (params.length === 2) {\n      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);\n    } else {\n      return new RelationalNode(conditionals.map(function (c) {\n        return c.fn;\n      }), params);\n    }\n  }\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n\n  function parseShift(state) {\n    var node, name, fn, params;\n    node = parseConversion(state);\n    var operators = {\n      '<<': 'leftShift',\n      '>>': 'rightArithShift',\n      '>>>': 'rightLogShift'\n    };\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseConversion(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n    return node;\n  }\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseConversion(state) {\n    var node, name, fn, params;\n    node = parseRange(state);\n    var operators = {\n      to: 'to',\n      \"in\": 'to' // alias of 'to'\n    };\n\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      if (name === 'in' && state.token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      } else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n    return node;\n  }\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n\n  function parseRange(state) {\n    var node;\n    var params = [];\n    if (state.token === ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode(1);\n    } else {\n      // explicit start\n      node = parseAddSubtract(state);\n    }\n    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node); // parse step and end\n\n      while (state.token === ':' && params.length < 3) {\n        // eslint-disable-line no-unmodified-loop-condition\n        getTokenSkipNewline(state);\n        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        } else {\n          // explicit end\n          params.push(parseAddSubtract(state));\n        }\n      }\n      if (params.length === 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      } else {\n        // length === 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n\n  function parseAddSubtract(state) {\n    var node, name, fn, params;\n    node = parseMultiplyDivide(state);\n    var operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseMultiplyDivide(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n    return node;\n  }\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n\n  function parseMultiplyDivide(state) {\n    var node, last, name, fn;\n    node = parseImplicitMultiplication(state);\n    last = node;\n    var operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      mod: 'mod'\n    };\n    while (true) {\n      if ((0, _object.hasOwnProperty)(operators, state.token)) {\n        // explicit operators\n        name = state.token;\n        fn = operators[name];\n        getTokenSkipNewline(state);\n        last = parseImplicitMultiplication(state);\n        node = new OperatorNode(name, fn, [node, last]);\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n  /**\n   * implicit multiplication\n   * @return {Node} node\n   * @private\n   */\n\n  function parseImplicitMultiplication(state) {\n    var node, last;\n    node = parseRule2(state);\n    last = node;\n    while (true) {\n      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && (0, _is.isConstantNode)(node) || state.tokenType === TOKENTYPE.NUMBER && !(0, _is.isConstantNode)(last) && (!(0, _is.isOperatorNode)(last) || last.op === '!') || state.token === '(') {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseRule2(state);\n        node = new OperatorNode('*', 'multiply', [node, last], true\n        /* implicit */);\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n  /**\n   * Infamous \"rule 2\" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370\n   * Explicit division gets higher precedence than implicit multiplication\n   * when the division matches this pattern: [number] / [number] [symbol]\n   * @return {Node} node\n   * @private\n   */\n\n  function parseRule2(state) {\n    var node = parseUnary(state);\n    var last = node;\n    var tokenStates = [];\n    while (true) {\n      // Match the \"number /\" part of the pattern \"number / number symbol\"\n      if (state.token === '/' && (0, _is.isConstantNode)(last)) {\n        // Look ahead to see if the next token is a number\n        tokenStates.push((0, _extends2[\"default\"])({}, state));\n        getTokenSkipNewline(state); // Match the \"number / number\" part of the pattern\n\n        if (state.tokenType === TOKENTYPE.NUMBER) {\n          // Look ahead again\n          tokenStates.push((0, _extends2[\"default\"])({}, state));\n          getTokenSkipNewline(state); // Match the \"symbol\" part of the pattern, or a left parenthesis\n\n          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {\n            // We've matched the pattern \"number / number symbol\".\n            // Rewind once and build the \"number / number\" node; the symbol will be consumed later\n            (0, _extends2[\"default\"])(state, tokenStates.pop());\n            tokenStates.pop();\n            last = parseUnary(state);\n            node = new OperatorNode('/', 'divide', [node, last]);\n          } else {\n            // Not a match, so rewind\n            tokenStates.pop();\n            (0, _extends2[\"default\"])(state, tokenStates.pop());\n            break;\n          }\n        } else {\n          // Not a match, so rewind\n          (0, _extends2[\"default\"])(state, tokenStates.pop());\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n\n  function parseUnary(state) {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      not: 'not'\n    };\n    if ((0, _object.hasOwnProperty)(operators, state.token)) {\n      fn = operators[state.token];\n      name = state.token;\n      getTokenSkipNewline(state);\n      params = [parseUnary(state)];\n      return new OperatorNode(name, fn, params);\n    }\n    return parsePow(state);\n  }\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n\n  function parsePow(state) {\n    var node, name, fn, params;\n    node = parseLeftHandOperators(state);\n    if (state.token === '^' || state.token === '.^') {\n      name = state.token;\n      fn = name === '^' ? 'pow' : 'dotPow';\n      getTokenSkipNewline(state);\n      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'\n\n      node = new OperatorNode(name, fn, params);\n    }\n    return node;\n  }\n  /**\n   * Left hand operators: factorial x!, ctranspose x'\n   * @return {Node} node\n   * @private\n   */\n\n  function parseLeftHandOperators(state) {\n    var node, name, fn, params;\n    node = parseCustomNodes(state);\n    var operators = {\n      '!': 'factorial',\n      '\\'': 'ctranspose'\n    };\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getToken(state);\n      params = [node];\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(state, node);\n    }\n    return node;\n  }\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     }\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params)\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes)\n   *\n   * @return {Node} node\n   * @private\n   */\n\n  function parseCustomNodes(state) {\n    var params = [];\n    if (state.tokenType === TOKENTYPE.SYMBOL && (0, _object.hasOwnProperty)(state.extraNodes, state.token)) {\n      var CustomNode = state.extraNodes[state.token];\n      getToken(state); // parse parameters\n\n      if (state.token === '(') {\n        params = [];\n        openParams(state);\n        getToken(state);\n        if (state.token !== ')') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n        if (state.token !== ')') {\n          throw createSyntaxError(state, 'Parenthesis ) expected');\n        }\n        closeParams(state);\n        getToken(state);\n      } // create a new custom node\n      // noinspection JSValidateTypes\n\n      return new CustomNode(params);\n    }\n    return parseSymbol(state);\n  }\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n\n  function parseSymbol(state) {\n    var node, name;\n    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n      name = state.token;\n      getToken(state);\n      if ((0, _object.hasOwnProperty)(CONSTANTS, name)) {\n        // true, false, null, ...\n        node = new ConstantNode(CONSTANTS[name]);\n      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {\n        // NaN, Infinity\n        node = new ConstantNode(numeric(name, 'number'));\n      } else {\n        node = new SymbolNode(name);\n      } // parse function parameters and matrix index\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseDoubleQuotesString(state);\n  }\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Object} state\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n\n  function parseAccessors(state, node, types) {\n    var params;\n    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      params = [];\n      if (state.token === '(') {\n        if ((0, _is.isSymbolNode)(node) || (0, _is.isAccessorNode)(node)) {\n          // function invocation like fn(2, 3) or obj.fn(2, 3)\n          openParams(state);\n          getToken(state);\n          if (state.token !== ')') {\n            params.push(parseAssignment(state)); // parse a list with parameters\n\n            while (state.token === ',') {\n              // eslint-disable-line no-unmodified-loop-condition\n              getToken(state);\n              params.push(parseAssignment(state));\n            }\n          }\n          if (state.token !== ')') {\n            throw createSyntaxError(state, 'Parenthesis ) expected');\n          }\n          closeParams(state);\n          getToken(state);\n          node = new FunctionNode(node, params);\n        } else {\n          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)\n          // don't parse it here but let it be handled by parseImplicitMultiplication\n          // with correct precedence\n          return node;\n        }\n      } else if (state.token === '[') {\n        // index notation like variable[2, 3]\n        openParams(state);\n        getToken(state);\n        if (state.token !== ']') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n        if (state.token !== ']') {\n          throw createSyntaxError(state, 'Parenthesis ] expected');\n        }\n        closeParams(state);\n        getToken(state);\n        node = new AccessorNode(node, new IndexNode(params));\n      } else {\n        // dot notation like variable.prop\n        getToken(state);\n        if (state.tokenType !== TOKENTYPE.SYMBOL) {\n          throw createSyntaxError(state, 'Property name expected after dot');\n        }\n        params.push(new ConstantNode(state.token));\n        getToken(state);\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n    return node;\n  }\n  /**\n   * Parse a double quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n  function parseDoubleQuotesString(state) {\n    var node, str;\n    if (state.token === '\"') {\n      str = parseDoubleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseSingleQuotesString(state);\n  }\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n\n  function parseDoubleQuotesStringToken(state) {\n    var str = '';\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\"') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\\"'\n        str += currentCharacter(state);\n        next(state);\n      }\n      str += currentCharacter(state);\n      next(state);\n    }\n    getToken(state);\n    if (state.token !== '\"') {\n      throw createSyntaxError(state, 'End of string \" expected');\n    }\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * Parse a single quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n  function parseSingleQuotesString(state) {\n    var node, str;\n    if (state.token === '\\'') {\n      str = parseSingleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseMatrix(state);\n  }\n  /**\n   * Parse a string surrounded by single quotes '...'\n   * @return {string}\n   */\n\n  function parseSingleQuotesStringToken(state) {\n    var str = '';\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\\'') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\''\n        str += currentCharacter(state);\n        next(state);\n      }\n      str += currentCharacter(state);\n      next(state);\n    }\n    getToken(state);\n    if (state.token !== '\\'') {\n      throw createSyntaxError(state, 'End of string \\' expected');\n    }\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n\n  function parseMatrix(state) {\n    var array, params, rows, cols;\n    if (state.token === '[') {\n      // matrix [...]\n      openParams(state);\n      getToken(state);\n      if (state.token !== ']') {\n        // this is a non-empty matrix\n        var row = parseRow(state);\n        if (state.token === ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row]; // the rows of the matrix are separated by dot-comma's\n\n          while (state.token === ';') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params[rows] = parseRow(state);\n            rows++;\n          }\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n          closeParams(state);\n          getToken(state); // check if the number of columns matches in all rows\n\n          cols = params[0].items.length;\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length !== cols) {\n              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');\n            }\n          }\n          array = new ArrayNode(params);\n        } else {\n          // 1 dimensional vector\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n          closeParams(state);\n          getToken(state);\n          array = row;\n        }\n      } else {\n        // this is an empty matrix \"[ ]\"\n        closeParams(state);\n        getToken(state);\n        array = new ArrayNode([]);\n      }\n      return parseAccessors(state, array);\n    }\n    return parseObject(state);\n  }\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n\n  function parseRow(state) {\n    var params = [parseAssignment(state)];\n    var len = 1;\n    while (state.token === ',') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getToken(state); // parse expression\n\n      params[len] = parseAssignment(state);\n      len++;\n    }\n    return new ArrayNode(params);\n  }\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n\n  function parseObject(state) {\n    if (state.token === '{') {\n      openParams(state);\n      var key;\n      var properties = {};\n      do {\n        getToken(state);\n        if (state.token !== '}') {\n          // parse key\n          if (state.token === '\"') {\n            key = parseDoubleQuotesStringToken(state);\n          } else if (state.token === '\\'') {\n            key = parseSingleQuotesStringToken(state);\n          } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n            key = state.token;\n            getToken(state);\n          } else {\n            throw createSyntaxError(state, 'Symbol or string expected as object key');\n          } // parse key/value separator\n\n          if (state.token !== ':') {\n            throw createSyntaxError(state, 'Colon : expected after object key');\n          }\n          getToken(state); // parse key\n\n          properties[key] = parseAssignment(state);\n        }\n      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition\n\n      if (state.token !== '}') {\n        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');\n      }\n      closeParams(state);\n      getToken(state);\n      var node = new ObjectNode(properties); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseNumber(state);\n  }\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n\n  function parseNumber(state) {\n    var numberStr;\n    if (state.tokenType === TOKENTYPE.NUMBER) {\n      // this is a number\n      numberStr = state.token;\n      getToken(state);\n      return new ConstantNode(numeric(numberStr, config.number));\n    }\n    return parseParentheses(state);\n  }\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n\n  function parseParentheses(state) {\n    var node; // check if it is a parenthesized expression\n\n    if (state.token === '(') {\n      // parentheses (...)\n      openParams(state);\n      getToken(state);\n      node = parseAssignment(state); // start again\n\n      if (state.token !== ')') {\n        throw createSyntaxError(state, 'Parenthesis ) expected');\n      }\n      closeParams(state);\n      getToken(state);\n      node = new ParenthesisNode(node);\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseEnd(state);\n  }\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n\n  function parseEnd(state) {\n    if (state.token === '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError(state, 'Unexpected end of expression');\n    } else {\n      throw createSyntaxError(state, 'Value expected');\n    }\n  }\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last state.token starts\n   * @private\n   */\n\n  function col(state) {\n    return state.index - state.token.length + 1;\n  }\n  /**\n   * Create an error\n   * @param {Object} state\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n\n  function createSyntaxError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error[\"char\"] = c;\n    return error;\n  }\n  /**\n   * Create an error\n   * @param {Object} state\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n\n  function createError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error[\"char\"] = c;\n    return error;\n  }\n  return parse;\n});\nexports.createParse = createParse;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createParse","_extends2","_factory","_is","_collection","_object","name","dependencies","factory","_ref","typed","numeric","config","AccessorNode","ArrayNode","AssignmentNode","BlockNode","ConditionalNode","ConstantNode","FunctionAssignmentNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","RangeNode","RelationalNode","SymbolNode","parse","string","expression","parseStart","ArrayMatrix","expressions","parseMultiple","stringObject","options","extraNodes","nodes","undefined","arguments","length","deepMap","elem","TypeError","TOKENTYPE","NULL","DELIMITER","NUMBER","SYMBOL","UNKNOWN","DELIMITERS","NAMED_DELIMITERS","mod","to","and","xor","or","not","CONSTANTS","NUMERIC_CONSTANTS","initialState","comment","index","token","tokenType","nestingLevel","conditionalLevel","currentString","state","substr","currentCharacter","next","prevCharacter","charAt","nextCharacter","getToken","isWhitespace","c1","c2","c3","isDigitDot","_c","isHexDigit","isDigit","isDecimalMark","createSyntaxError","isAlpha","hasOwnProperty","getTokenSkipNewline","openParams","closeParams","c","cPrev","cNext","isValidLatinOrGreek","isValidMathSymbol","test","high","low","node","parseBlock","createError","blocks","visible","parseAssignment","push","args","valid","parseConditional","isSymbolNode","isAccessorNode","object","isFunctionNode","fn","forEach","arg","parseLogicalOr","prev","condition","trueExpr","falseExpr","parseLogicalXor","parseLogicalAnd","parseBitwiseOr","parseBitwiseXor","parseBitwiseAnd","parseRelational","params","parseShift","conditionals","operators","cond","map","parseConversion","parseRange","parseAddSubtract","parseMultiplyDivide","last","parseImplicitMultiplication","parseRule2","isConstantNode","isOperatorNode","op","parseUnary","tokenStates","pop","parsePow","parseLeftHandOperators","parseCustomNodes","parseAccessors","CustomNode","parseSymbol","indexOf","parseDoubleQuotesString","types","dotNotation","str","parseDoubleQuotesStringToken","parseSingleQuotesString","JSON","parseSingleQuotesStringToken","parseMatrix","array","rows","cols","row","parseRow","items","r","parseObject","len","key","properties","parseNumber","numberStr","number","parseParentheses","parseEnd","col","message","error","SyntaxError"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/parse.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParse = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _is = require(\"../utils/is.js\");\n\nvar _collection = require(\"../utils/collection.js\");\n\nvar _object = require(\"../utils/object.js\");\n\nvar name = 'parse';\nvar dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];\nvar createParse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      numeric = _ref.numeric,\n      config = _ref.config,\n      AccessorNode = _ref.AccessorNode,\n      ArrayNode = _ref.ArrayNode,\n      AssignmentNode = _ref.AssignmentNode,\n      BlockNode = _ref.BlockNode,\n      ConditionalNode = _ref.ConditionalNode,\n      ConstantNode = _ref.ConstantNode,\n      FunctionAssignmentNode = _ref.FunctionAssignmentNode,\n      FunctionNode = _ref.FunctionNode,\n      IndexNode = _ref.IndexNode,\n      ObjectNode = _ref.ObjectNode,\n      OperatorNode = _ref.OperatorNode,\n      ParenthesisNode = _ref.ParenthesisNode,\n      RangeNode = _ref.RangeNode,\n      RelationalNode = _ref.RelationalNode,\n      SymbolNode = _ref.SymbolNode;\n\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.evaluate().\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n   *     node1.compile().evaluate() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node2 = math.parse('a * b') // 12\n   *     const code2 = node2.compile()\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile().evaluate() // 12\n   *\n   * See also:\n   *\n   *     evaluate, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  var parse = typed(name, {\n    string: function string(expression) {\n      return parseStart(expression, {});\n    },\n    'Array | Matrix': function ArrayMatrix(expressions) {\n      return parseMultiple(expressions, {});\n    },\n    'string, Object': function stringObject(expression, options) {\n      var extraNodes = options.nodes !== undefined ? options.nodes : {};\n      return parseStart(expression, extraNodes);\n    },\n    'Array | Matrix, Object': parseMultiple\n  });\n\n  function parseMultiple(expressions) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions\n\n    return (0, _collection.deepMap)(expressions, function (elem) {\n      if (typeof elem !== 'string') throw new TypeError('String expected');\n      return parseStart(elem, extraNodes);\n    });\n  } // token types enumeration\n\n\n  var TOKENTYPE = {\n    NULL: 0,\n    DELIMITER: 1,\n    NUMBER: 2,\n    SYMBOL: 3,\n    UNKNOWN: 4\n  }; // map with all delimiters\n\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\"': true,\n    '\\'': true,\n    ';': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '=': true,\n    ':': true,\n    '?': true,\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true\n  }; // map with all named delimiters\n\n  var NAMED_DELIMITERS = {\n    mod: true,\n    to: true,\n    \"in\": true,\n    and: true,\n    xor: true,\n    or: true,\n    not: true\n  };\n  var CONSTANTS = {\n    \"true\": true,\n    \"false\": false,\n    \"null\": null,\n    undefined: undefined\n  };\n  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];\n\n  function initialState() {\n    return {\n      extraNodes: {},\n      // current extra nodes, must be careful not to mutate\n      expression: '',\n      // current expression\n      comment: '',\n      // last parsed comment\n      index: 0,\n      // current index in expr\n      token: '',\n      // current token\n      tokenType: TOKENTYPE.NULL,\n      // type of the token\n      nestingLevel: 0,\n      // level of nesting inside parameters, used to ignore newline characters\n      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here\n\n    };\n  }\n  /**\n   * View upto `length` characters of the expression starting at the current character.\n   *\n   * @param {Object} state\n   * @param {number} [length=1] Number of characters to view\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentString(state, length) {\n    return state.expression.substr(state.index, length);\n  }\n  /**\n   * View the current character. Returns '' if end of expression is reached.\n   *\n   * @param {Object} state\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentCharacter(state) {\n    return currentString(state, 1);\n  }\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n\n\n  function next(state) {\n    state.index++;\n  }\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function prevCharacter(state) {\n    return state.expression.charAt(state.index - 1);\n  }\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function nextCharacter(state) {\n    return state.expression.charAt(state.index + 1);\n  }\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and tokenType\n   * @private\n   */\n\n\n  function getToken(state) {\n    state.tokenType = TOKENTYPE.NULL;\n    state.token = '';\n    state.comment = ''; // skip over whitespaces\n    // space, tab, and newline when inside parameters\n\n    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {\n      next(state);\n    } // skip comment\n\n\n    if (currentCharacter(state) === '#') {\n      while (currentCharacter(state) !== '\\n' && currentCharacter(state) !== '') {\n        state.comment += currentCharacter(state);\n        next(state);\n      }\n    } // check for end of expression\n\n\n    if (currentCharacter(state) === '') {\n      // token is still empty\n      state.tokenType = TOKENTYPE.DELIMITER;\n      return;\n    } // check for new line character\n\n\n    if (currentCharacter(state) === '\\n' && !state.nestingLevel) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = currentCharacter(state);\n      next(state);\n      return;\n    }\n\n    var c1 = currentCharacter(state);\n    var c2 = currentString(state, 2);\n    var c3 = currentString(state, 3);\n\n    if (c3.length === 3 && DELIMITERS[c3]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c3;\n      next(state);\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 2 characters\n\n\n    if (c2.length === 2 && DELIMITERS[c2]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c2;\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 1 character\n\n\n    if (DELIMITERS[c1]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c1;\n      next(state);\n      return;\n    } // check for a number\n\n\n    if (parse.isDigitDot(c1)) {\n      state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex\n\n      var _c = currentString(state, 2);\n\n      if (_c === '0b' || _c === '0o' || _c === '0x') {\n        state.token += currentCharacter(state);\n        next(state);\n        state.token += currentCharacter(state);\n        next(state);\n\n        while (parse.isHexDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n\n        if (currentCharacter(state) === '.') {\n          // this number has a radix point\n          state.token += '.';\n          next(state); // get the digits after the radix\n\n          while (parse.isHexDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n        } else if (currentCharacter(state) === 'i') {\n          // this number has a word size suffix\n          state.token += 'i';\n          next(state); // get the word size\n\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n        }\n\n        return;\n      } // get number, can have a single dot\n\n\n      if (currentCharacter(state) === '.') {\n        state.token += currentCharacter(state);\n        next(state);\n\n        if (!parse.isDigit(currentCharacter(state))) {\n          // this is no number, it is just a dot (can be dot notation)\n          state.tokenType = TOKENTYPE.DELIMITER;\n          return;\n        }\n      } else {\n        while (parse.isDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n\n        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n      }\n\n      while (parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      } // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n\n\n      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {\n        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {\n          state.token += currentCharacter(state);\n          next(state);\n\n          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {\n            state.token += currentCharacter(state);\n            next(state);\n          } // Scientific notation MUST be followed by an exponent\n\n\n          if (!parse.isDigit(currentCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n\n          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n        } else if (nextCharacter(state) === '.') {\n          next(state);\n          throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n        }\n      }\n\n      return;\n    } // check for variables, functions, named operators\n\n\n    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {\n      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n\n      if ((0, _object.hasOwnProperty)(NAMED_DELIMITERS, state.token)) {\n        state.tokenType = TOKENTYPE.DELIMITER;\n      } else {\n        state.tokenType = TOKENTYPE.SYMBOL;\n      }\n\n      return;\n    } // something unknown is found, wrong characters -> a syntax error\n\n\n    state.tokenType = TOKENTYPE.UNKNOWN;\n\n    while (currentCharacter(state) !== '') {\n      state.token += currentCharacter(state);\n      next(state);\n    }\n\n    throw createSyntaxError(state, 'Syntax error in part \"' + state.token + '\"');\n  }\n  /**\n   * Get next token and skip newline tokens\n   */\n\n\n  function getTokenSkipNewline(state) {\n    do {\n      getToken(state);\n    } while (state.token === '\\n'); // eslint-disable-line no-unmodified-loop-condition\n\n  }\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams(state) is called\n   */\n\n\n  function openParams(state) {\n    state.nestingLevel++;\n  }\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n\n\n  function closeParams(state) {\n    state.nestingLevel--;\n  }\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                        Ascii: _\n   * - A dollar sign                        Ascii: $\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n\n\n  parse.isAlpha = function isAlpha(c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);\n  };\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n\n\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {\n    return /^[a-zA-Z_$\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * https://unicode-table.com/en/\n   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n\n\n  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {\n    return /^[\\uD835]$/.test(high) && /^[\\uDC00-\\uDFFF]$/.test(low) && /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n\n\n  parse.isWhitespace = function isWhitespace(c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c === ' ' || c === '\\t' || c === '\\n' && nestingLevel > 0;\n  };\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n\n\n  parse.isDecimalMark = function isDecimalMark(c, cNext) {\n    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigitDot = function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  };\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigit = function isDigit(c) {\n    return c >= '0' && c <= '9';\n  };\n  /**\n   * checks if the given char c is a hex digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isHexDigit = function isHexDigit(c) {\n    return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';\n  };\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseStart(expression, extraNodes) {\n    var state = initialState();\n    (0, _extends2[\"default\"])(state, {\n      expression: expression,\n      extraNodes: extraNodes\n    });\n    getToken(state);\n    var node = parseBlock(state); // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and tokenType DELIMITER\n\n    if (state.token !== '') {\n      if (state.tokenType === TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean !== ?\"\n        throw createError(state, 'Unexpected operator ' + state.token);\n      } else {\n        throw createSyntaxError(state, 'Unexpected part \"' + state.token + '\"');\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBlock(state) {\n    var node;\n    var blocks = [];\n    var visible;\n\n    if (state.token !== '' && state.token !== '\\n' && state.token !== ';') {\n      node = parseAssignment(state);\n      node.comment = state.comment;\n    } // TODO: simplify this loop\n\n\n    while (state.token === '\\n' || state.token === ';') {\n      // eslint-disable-line no-unmodified-loop-condition\n      if (blocks.length === 0 && node) {\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n\n      getToken(state);\n\n      if (state.token !== '\\n' && state.token !== ';' && state.token !== '') {\n        node = parseAssignment(state);\n        node.comment = state.comment;\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    } else {\n      if (!node) {\n        node = new ConstantNode(undefined);\n        node.comment = state.comment;\n      }\n\n      return node;\n    }\n  }\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAssignment(state) {\n    var name, args, value, valid;\n    var node = parseConditional(state);\n\n    if (state.token === '=') {\n      if ((0, _is.isSymbolNode)(node)) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(new SymbolNode(name), value);\n      } else if ((0, _is.isAccessorNode)(node)) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(node.object, node.index, value);\n      } else if ((0, _is.isFunctionNode)(node) && (0, _is.isSymbolNode)(node.fn)) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if ((0, _is.isSymbolNode)(arg)) {\n            args[index] = arg.name;\n          } else {\n            valid = false;\n          }\n        });\n\n        if (valid) {\n          getTokenSkipNewline(state);\n          value = parseAssignment(state);\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n\n      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');\n    }\n\n    return node;\n  }\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConditional(state) {\n    var node = parseLogicalOr(state);\n\n    while (state.token === '?') {\n      // eslint-disable-line no-unmodified-loop-condition\n      // set a conditional level, the range operator will be ignored as long\n      // as conditionalLevel === state.nestingLevel.\n      var prev = state.conditionalLevel;\n      state.conditionalLevel = state.nestingLevel;\n      getTokenSkipNewline(state);\n      var condition = node;\n      var trueExpr = parseAssignment(state);\n      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');\n      state.conditionalLevel = null;\n      getTokenSkipNewline(state);\n      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level\n\n      state.conditionalLevel = prev;\n    }\n\n    return node;\n  }\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalOr(state) {\n    var node = parseLogicalXor(state);\n\n    while (state.token === 'or') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalXor(state) {\n    var node = parseLogicalAnd(state);\n\n    while (state.token === 'xor') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalAnd(state) {\n    var node = parseBitwiseOr(state);\n\n    while (state.token === 'and') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseOr(state) {\n    var node = parseBitwiseXor(state);\n\n    while (state.token === '|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseXor(state) {\n    var node = parseBitwiseAnd(state);\n\n    while (state.token === '^|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseAnd(state) {\n    var node = parseRelational(state);\n\n    while (state.token === '&') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a chained conditional, like 'a > b >= c'\n   * @return {Node} node\n   */\n\n\n  function parseRelational(state) {\n    var params = [parseShift(state)];\n    var conditionals = [];\n    var operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      var cond = {\n        name: state.token,\n        fn: operators[state.token]\n      };\n      conditionals.push(cond);\n      getTokenSkipNewline(state);\n      params.push(parseShift(state));\n    }\n\n    if (params.length === 1) {\n      return params[0];\n    } else if (params.length === 2) {\n      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);\n    } else {\n      return new RelationalNode(conditionals.map(function (c) {\n        return c.fn;\n      }), params);\n    }\n  }\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseShift(state) {\n    var node, name, fn, params;\n    node = parseConversion(state);\n    var operators = {\n      '<<': 'leftShift',\n      '>>': 'rightArithShift',\n      '>>>': 'rightLogShift'\n    };\n\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseConversion(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConversion(state) {\n    var node, name, fn, params;\n    node = parseRange(state);\n    var operators = {\n      to: 'to',\n      \"in\": 'to' // alias of 'to'\n\n    };\n\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n\n      if (name === 'in' && state.token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      } else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n\n    return node;\n  }\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRange(state) {\n    var node;\n    var params = [];\n\n    if (state.token === ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode(1);\n    } else {\n      // explicit start\n      node = parseAddSubtract(state);\n    }\n\n    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node); // parse step and end\n\n      while (state.token === ':' && params.length < 3) {\n        // eslint-disable-line no-unmodified-loop-condition\n        getTokenSkipNewline(state);\n\n        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        } else {\n          // explicit end\n          params.push(parseAddSubtract(state));\n        }\n      }\n\n      if (params.length === 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      } else {\n        // length === 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAddSubtract(state) {\n    var node, name, fn, params;\n    node = parseMultiplyDivide(state);\n    var operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseMultiplyDivide(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMultiplyDivide(state) {\n    var node, last, name, fn;\n    node = parseImplicitMultiplication(state);\n    last = node;\n    var operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      mod: 'mod'\n    };\n\n    while (true) {\n      if ((0, _object.hasOwnProperty)(operators, state.token)) {\n        // explicit operators\n        name = state.token;\n        fn = operators[name];\n        getTokenSkipNewline(state);\n        last = parseImplicitMultiplication(state);\n        node = new OperatorNode(name, fn, [node, last]);\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * implicit multiplication\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseImplicitMultiplication(state) {\n    var node, last;\n    node = parseRule2(state);\n    last = node;\n\n    while (true) {\n      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && (0, _is.isConstantNode)(node) || state.tokenType === TOKENTYPE.NUMBER && !(0, _is.isConstantNode)(last) && (!(0, _is.isOperatorNode)(last) || last.op === '!') || state.token === '(') {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseRule2(state);\n        node = new OperatorNode('*', 'multiply', [node, last], true\n        /* implicit */\n        );\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Infamous \"rule 2\" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370\n   * Explicit division gets higher precedence than implicit multiplication\n   * when the division matches this pattern: [number] / [number] [symbol]\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRule2(state) {\n    var node = parseUnary(state);\n    var last = node;\n    var tokenStates = [];\n\n    while (true) {\n      // Match the \"number /\" part of the pattern \"number / number symbol\"\n      if (state.token === '/' && (0, _is.isConstantNode)(last)) {\n        // Look ahead to see if the next token is a number\n        tokenStates.push((0, _extends2[\"default\"])({}, state));\n        getTokenSkipNewline(state); // Match the \"number / number\" part of the pattern\n\n        if (state.tokenType === TOKENTYPE.NUMBER) {\n          // Look ahead again\n          tokenStates.push((0, _extends2[\"default\"])({}, state));\n          getTokenSkipNewline(state); // Match the \"symbol\" part of the pattern, or a left parenthesis\n\n          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {\n            // We've matched the pattern \"number / number symbol\".\n            // Rewind once and build the \"number / number\" node; the symbol will be consumed later\n            (0, _extends2[\"default\"])(state, tokenStates.pop());\n            tokenStates.pop();\n            last = parseUnary(state);\n            node = new OperatorNode('/', 'divide', [node, last]);\n          } else {\n            // Not a match, so rewind\n            tokenStates.pop();\n            (0, _extends2[\"default\"])(state, tokenStates.pop());\n            break;\n          }\n        } else {\n          // Not a match, so rewind\n          (0, _extends2[\"default\"])(state, tokenStates.pop());\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseUnary(state) {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      not: 'not'\n    };\n\n    if ((0, _object.hasOwnProperty)(operators, state.token)) {\n      fn = operators[state.token];\n      name = state.token;\n      getTokenSkipNewline(state);\n      params = [parseUnary(state)];\n      return new OperatorNode(name, fn, params);\n    }\n\n    return parsePow(state);\n  }\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parsePow(state) {\n    var node, name, fn, params;\n    node = parseLeftHandOperators(state);\n\n    if (state.token === '^' || state.token === '.^') {\n      name = state.token;\n      fn = name === '^' ? 'pow' : 'dotPow';\n      getTokenSkipNewline(state);\n      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'\n\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * Left hand operators: factorial x!, ctranspose x'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLeftHandOperators(state) {\n    var node, name, fn, params;\n    node = parseCustomNodes(state);\n    var operators = {\n      '!': 'factorial',\n      '\\'': 'ctranspose'\n    };\n\n    while ((0, _object.hasOwnProperty)(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getToken(state);\n      params = [node];\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(state, node);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     }\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params)\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes)\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseCustomNodes(state) {\n    var params = [];\n\n    if (state.tokenType === TOKENTYPE.SYMBOL && (0, _object.hasOwnProperty)(state.extraNodes, state.token)) {\n      var CustomNode = state.extraNodes[state.token];\n      getToken(state); // parse parameters\n\n      if (state.token === '(') {\n        params = [];\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ')') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ')') {\n          throw createSyntaxError(state, 'Parenthesis ) expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n      } // create a new custom node\n      // noinspection JSValidateTypes\n\n\n      return new CustomNode(params);\n    }\n\n    return parseSymbol(state);\n  }\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSymbol(state) {\n    var node, name;\n\n    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n      name = state.token;\n      getToken(state);\n\n      if ((0, _object.hasOwnProperty)(CONSTANTS, name)) {\n        // true, false, null, ...\n        node = new ConstantNode(CONSTANTS[name]);\n      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {\n        // NaN, Infinity\n        node = new ConstantNode(numeric(name, 'number'));\n      } else {\n        node = new SymbolNode(name);\n      } // parse function parameters and matrix index\n\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseDoubleQuotesString(state);\n  }\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Object} state\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAccessors(state, node, types) {\n    var params;\n\n    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      params = [];\n\n      if (state.token === '(') {\n        if ((0, _is.isSymbolNode)(node) || (0, _is.isAccessorNode)(node)) {\n          // function invocation like fn(2, 3) or obj.fn(2, 3)\n          openParams(state);\n          getToken(state);\n\n          if (state.token !== ')') {\n            params.push(parseAssignment(state)); // parse a list with parameters\n\n            while (state.token === ',') {\n              // eslint-disable-line no-unmodified-loop-condition\n              getToken(state);\n              params.push(parseAssignment(state));\n            }\n          }\n\n          if (state.token !== ')') {\n            throw createSyntaxError(state, 'Parenthesis ) expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          node = new FunctionNode(node, params);\n        } else {\n          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)\n          // don't parse it here but let it be handled by parseImplicitMultiplication\n          // with correct precedence\n          return node;\n        }\n      } else if (state.token === '[') {\n        // index notation like variable[2, 3]\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ']') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ']') {\n          throw createSyntaxError(state, 'Parenthesis ] expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n        node = new AccessorNode(node, new IndexNode(params));\n      } else {\n        // dot notation like variable.prop\n        getToken(state);\n\n        if (state.tokenType !== TOKENTYPE.SYMBOL) {\n          throw createSyntaxError(state, 'Property name expected after dot');\n        }\n\n        params.push(new ConstantNode(state.token));\n        getToken(state);\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a double quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseDoubleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\"') {\n      str = parseDoubleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseSingleQuotesString(state);\n  }\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n\n\n  function parseDoubleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\"') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\\"'\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\"') {\n      throw createSyntaxError(state, 'End of string \" expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * Parse a single quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSingleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\\'') {\n      str = parseSingleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseMatrix(state);\n  }\n  /**\n   * Parse a string surrounded by single quotes '...'\n   * @return {string}\n   */\n\n\n  function parseSingleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\\'') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\''\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\\'') {\n      throw createSyntaxError(state, 'End of string \\' expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMatrix(state) {\n    var array, params, rows, cols;\n\n    if (state.token === '[') {\n      // matrix [...]\n      openParams(state);\n      getToken(state);\n\n      if (state.token !== ']') {\n        // this is a non-empty matrix\n        var row = parseRow(state);\n\n        if (state.token === ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row]; // the rows of the matrix are separated by dot-comma's\n\n          while (state.token === ';') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params[rows] = parseRow(state);\n            rows++;\n          }\n\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state); // check if the number of columns matches in all rows\n\n          cols = params[0].items.length;\n\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length !== cols) {\n              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');\n            }\n          }\n\n          array = new ArrayNode(params);\n        } else {\n          // 1 dimensional vector\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          array = row;\n        }\n      } else {\n        // this is an empty matrix \"[ ]\"\n        closeParams(state);\n        getToken(state);\n        array = new ArrayNode([]);\n      }\n\n      return parseAccessors(state, array);\n    }\n\n    return parseObject(state);\n  }\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n\n\n  function parseRow(state) {\n    var params = [parseAssignment(state)];\n    var len = 1;\n\n    while (state.token === ',') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getToken(state); // parse expression\n\n      params[len] = parseAssignment(state);\n      len++;\n    }\n\n    return new ArrayNode(params);\n  }\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseObject(state) {\n    if (state.token === '{') {\n      openParams(state);\n      var key;\n      var properties = {};\n\n      do {\n        getToken(state);\n\n        if (state.token !== '}') {\n          // parse key\n          if (state.token === '\"') {\n            key = parseDoubleQuotesStringToken(state);\n          } else if (state.token === '\\'') {\n            key = parseSingleQuotesStringToken(state);\n          } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n            key = state.token;\n            getToken(state);\n          } else {\n            throw createSyntaxError(state, 'Symbol or string expected as object key');\n          } // parse key/value separator\n\n\n          if (state.token !== ':') {\n            throw createSyntaxError(state, 'Colon : expected after object key');\n          }\n\n          getToken(state); // parse key\n\n          properties[key] = parseAssignment(state);\n        }\n      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition\n\n\n      if (state.token !== '}') {\n        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');\n      }\n\n      closeParams(state);\n      getToken(state);\n      var node = new ObjectNode(properties); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseNumber(state);\n  }\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseNumber(state) {\n    var numberStr;\n\n    if (state.tokenType === TOKENTYPE.NUMBER) {\n      // this is a number\n      numberStr = state.token;\n      getToken(state);\n      return new ConstantNode(numeric(numberStr, config.number));\n    }\n\n    return parseParentheses(state);\n  }\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseParentheses(state) {\n    var node; // check if it is a parenthesized expression\n\n    if (state.token === '(') {\n      // parentheses (...)\n      openParams(state);\n      getToken(state);\n      node = parseAssignment(state); // start again\n\n      if (state.token !== ')') {\n        throw createSyntaxError(state, 'Parenthesis ) expected');\n      }\n\n      closeParams(state);\n      getToken(state);\n      node = new ParenthesisNode(node);\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseEnd(state);\n  }\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n\n\n  function parseEnd(state) {\n    if (state.token === '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError(state, 'Unexpected end of expression');\n    } else {\n      throw createSyntaxError(state, 'Value expected');\n    }\n  }\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last state.token starts\n   * @private\n   */\n\n\n  function col(state) {\n    return state.index - state.token.length + 1;\n  }\n  /**\n   * Create an error\n   * @param {Object} state\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n\n\n  function createSyntaxError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error[\"char\"] = c;\n    return error;\n  }\n  /**\n   * Create an error\n   * @param {Object} state\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n\n\n  function createError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error[\"char\"] = c;\n    return error;\n  }\n\n  return parse;\n});\nexports.createParse = createParse;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}