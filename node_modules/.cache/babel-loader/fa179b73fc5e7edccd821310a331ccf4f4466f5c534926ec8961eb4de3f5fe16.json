{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsPrime = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nvar createIsPrime = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n      if (x <= 3) {\n        return x > 1;\n      }\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n        return accumulator;\n      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n      var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(function (x) {\n          return x < n;\n        });\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsPrime = createIsPrime;","map":{"version":3,"names":["Object","defineProperty","exports","value","createIsPrime","_collection","require","_factory","name","dependencies","factory","_ref","typed","number","x","i","BigNumber","n","toNumber","lte","gt","mod","eq","lt","Math","pow","modPow","base","exponent","modulus","accumulator","div","mul","sub","Decimal","constructor","clone","precision","toFixed","length","r","d","bases","filter","max","min","floor","log","_i","push","_i2","a","adn","add","_i3","_x","ArrayMatrix","deepMap"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/utils/isPrime.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsPrime = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nvar createIsPrime = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n\n        return accumulator;\n      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n\n\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n\n      var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(function (x) {\n          return x < n;\n        });\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsPrime = createIsPrime;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}