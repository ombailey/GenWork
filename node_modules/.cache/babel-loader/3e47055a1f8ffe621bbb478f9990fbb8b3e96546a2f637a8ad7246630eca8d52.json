{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm06 = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\nvar _collection = require(\"../../../utils/collection.js\");\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm06 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      (0, _collection.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\n\n      (0, _collection.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm06 = createAlgorithm06;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAlgorithm06","_factory","require","_DimensionError","_collection","name","dependencies","factory","_ref","typed","equalScalar","algorithm06","a","b","callback","avalues","_values","asize","_size","adt","_datatype","bvalues","bsize","bdt","length","DimensionError","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","x","w","u","j","mark","scatter","k","i","v","push","splice","p","r","createSparseMatrix","values","index","ptr","size","datatype"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm06 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm06 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      (0, _collection.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\n\n      (0, _collection.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm06 = createAlgorithm06;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}