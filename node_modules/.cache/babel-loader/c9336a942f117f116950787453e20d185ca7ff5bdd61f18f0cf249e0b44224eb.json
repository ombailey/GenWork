{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFraction = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _collection = require(\"../../../utils/collection.js\");\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nvar createFraction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Fraction = _ref.Fraction;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    \"null\": function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createFraction = createFraction;","map":{"version":3,"names":["Object","defineProperty","exports","value","createFraction","_factory","require","_collection","name","dependencies","factory","_ref","typed","Fraction","number","x","isFinite","isNaN","Error","string","numberNumber","numerator","denominator","_null","BigNumber","toString","ArrayMatrix","deepMap"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFraction = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nvar createFraction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Fraction = _ref.Fraction;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    \"null\": function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createFraction = createFraction;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAE/B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEnD,IAAIC,WAAW,GAAGD,OAAO,CAAC,8BAA8B,CAAC;AAEzD,IAAIE,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC;AACxC,IAAIL,cAAc,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC5F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;;EAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAAC,UAAU,EAAE;IACvBE,MAAM,EAAE,SAASA,MAAM,CAACC,CAAC,EAAE;MACzB,IAAI,CAACC,QAAQ,CAACD,CAAC,CAAC,IAAIE,KAAK,CAACF,CAAC,CAAC,EAAE;QAC5B,MAAM,IAAIG,KAAK,CAACH,CAAC,GAAG,sCAAsC,CAAC;MAC7D;MAEA,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC;IACxB,CAAC;IACDI,MAAM,EAAE,SAASA,MAAM,CAACJ,CAAC,EAAE;MACzB,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC;IACxB,CAAC;IACD,gBAAgB,EAAE,SAASK,YAAY,CAACC,SAAS,EAAEC,WAAW,EAAE;MAC9D,OAAO,IAAIT,QAAQ,CAACQ,SAAS,EAAEC,WAAW,CAAC;IAC7C,CAAC;IACD,MAAM,EAAE,SAASC,KAAK,CAACR,CAAC,EAAE;MACxB,OAAO,IAAIF,QAAQ,CAAC,CAAC,CAAC;IACxB,CAAC;IACDW,SAAS,EAAE,SAASA,SAAS,CAACT,CAAC,EAAE;MAC/B,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAACU,QAAQ,EAAE,CAAC;IACnC,CAAC;IACDZ,QAAQ,EAAE,SAASA,QAAQ,CAACE,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;;IACDf,MAAM,EAAE,SAASA,MAAM,CAACe,CAAC,EAAE;MACzB,OAAO,IAAIF,QAAQ,CAACE,CAAC,CAAC;IACxB,CAAC;IACD,gBAAgB,EAAE,SAASW,WAAW,CAACX,CAAC,EAAE;MACxC,OAAO,CAAC,CAAC,EAAER,WAAW,CAACoB,OAAO,EAAEZ,CAAC,EAAE,IAAI,CAAC;IAC1C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFb,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}