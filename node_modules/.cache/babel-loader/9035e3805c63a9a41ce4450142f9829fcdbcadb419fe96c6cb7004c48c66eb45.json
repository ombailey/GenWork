{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivideScalar = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _is = require(\"../../utils/is.js\");\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nvar createDivideScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    numeric = _ref.numeric;\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(y));\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(x));\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n});\nexports.createDivideScalar = createDivideScalar;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDivideScalar","_factory","require","_is","name","dependencies","factory","_ref","typed","numeric","numberNumber","x","y","ComplexComplex","div","BigNumberBigNumber","FractionFraction","UnitNumberFractionBigNumber","res","clone","one","typeOf","_normalize","numberFractionBigNumberUnit","pow","UnitUnit","divide"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivideScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nvar createDivideScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      numeric = _ref.numeric;\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(y));\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(x));\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n});\nexports.createDivideScalar = createDivideScalar;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AAEnC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,GAAG,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEtC,IAAIE,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACvC,IAAIL,kBAAkB,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChG,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,OAAO,GAAGF,IAAI,CAACE,OAAO;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASM,YAAY,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC5C,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC;IACD,kBAAkB,EAAE,SAASC,cAAc,CAACF,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASG,kBAAkB,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC;IACjB,CAAC;IACD,oBAAoB,EAAE,SAASI,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC;IACjB,CAAC;IACD,qCAAqC,EAAE,SAASK,2BAA2B,CAACN,CAAC,EAAEC,CAAC,EAAE;MAChF,IAAIM,GAAG,GAAGP,CAAC,CAACQ,KAAK,EAAE,CAAC,CAAC;;MAErB,IAAIC,GAAG,GAAGX,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEN,GAAG,CAACkB,MAAM,EAAET,CAAC,CAAC,CAAC;MACxCM,GAAG,CAACnB,KAAK,GAAG,IAAI,CAACmB,GAAG,CAACnB,KAAK,KAAK,IAAI,GAAGmB,GAAG,CAACI,UAAU,CAACF,GAAG,CAAC,GAAGF,GAAG,CAACnB,KAAK,EAAEa,CAAC,CAAC;MACzE,OAAOM,GAAG;IACZ,CAAC;IACD,qCAAqC,EAAE,SAASK,2BAA2B,CAACZ,CAAC,EAAEC,CAAC,EAAE;MAChF,IAAIM,GAAG,GAAGN,CAAC,CAACO,KAAK,EAAE;MACnBD,GAAG,GAAGA,GAAG,CAACM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEnB,IAAIJ,GAAG,GAAGX,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEN,GAAG,CAACkB,MAAM,EAAEV,CAAC,CAAC,CAAC;MACxCO,GAAG,CAACnB,KAAK,GAAG,IAAI,CAACY,CAAC,EAAEC,CAAC,CAACb,KAAK,KAAK,IAAI,GAAGa,CAAC,CAACU,UAAU,CAACF,GAAG,CAAC,GAAGR,CAAC,CAACb,KAAK,CAAC;MACnE,OAAOmB,GAAG;IACZ,CAAC;IACD,YAAY,EAAE,SAASO,QAAQ,CAACd,CAAC,EAAEC,CAAC,EAAE;MACpC,OAAOD,CAAC,CAACe,MAAM,CAACd,CAAC,CAAC;IACpB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFd,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}