{"ast":null,"code":"\"use strict\";\n\n// @ts-nocheck\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.piePlot = void 0;\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar utils_1 = require(\"./utils\");\n/**\n* Plot Series or DataFrame as pie chart.\n* Uses the Plotly as backend, so supoorts Plotly's configuration parameters,\n* Line plot supports different types of parameters, and the behavior will depend on data specified.\n* @param ndframe Series or DataFrame to plot\n* @param divId HTML div id to plot in.\n* @param plotConfig configuration options for making Plots, supports Plotly.js Config and Layout parameters.\n*/\nvar piePlot = function (ndframe, divId, plotConfig, Plotly) {\n  var config = plotConfig[\"config\"];\n  var layout = plotConfig[\"layout\"];\n  if (ndframe instanceof series_1.default) {\n    var trace = {\n      values: ndframe.values,\n      labels: config[\"labels\"] || ndframe.index,\n      type: 'pie',\n      name: config.labels,\n      hoverinfo: 'label+percent+name',\n      automargin: true\n    };\n    Plotly.newPlot(divId, [trace], layout, config);\n  } else {\n    if (config[\"labels\"]) {\n      if (!ndframe.columns.includes(config['labels'])) {\n        throw Error(\"Column Error: \" + config['labels'] + \" not found in columns. Param \\\"labels\\\" name must be one of [ \" + ndframe.columns + \"]\");\n      }\n      if (config[\"values\"]) {\n        if (!ndframe.columns.includes(config['values'])) {\n          throw Error(\"Column Error: \" + config['values'] + \" not found in columns. Param \\\"values\\\" name must be one of [ \" + ndframe.columns + \"]\");\n        }\n        var trace = {\n          values: ndframe[config['values']].values,\n          labels: ndframe[config[\"labels\"]].values,\n          type: 'pie',\n          name: config.labels,\n          hoverinfo: 'label+percent+name',\n          automargin: true\n        };\n        Plotly.newPlot(divId, [trace], layout, config);\n      } else {\n        // if columns is not specified in config, then plot all columns\n        var cols = config[\"columns\"] ? (0, utils_1.checkIfColsExist)(ndframe, config['columns']) : ndframe.columns;\n        if (config['rowPositions']) {\n          if (config['rowPositions'].length != cols.length) {\n            throw Error(\"length of rowPositions array must be equal to number of columns. Got \" + config['rowPositions'].length + \", expected \" + (cols.length - 1));\n          }\n        } else {\n          var tempArr = [];\n          for (var i = 0; i < cols.length - 1; i++) {\n            tempArr.push(0);\n          }\n          config['rowPositions'] = tempArr;\n        }\n        if (config['columnPositions']) {\n          if (config['columnPositions'].length != cols.length) {\n            throw Error(\"length of columnPositions array must be equal to number of columns. Got \" + config['columnPositions'].length + \", expected \" + (cols.length - 1));\n          }\n        } else {\n          var tempArr = [];\n          for (var i = 0; i < cols.length - 1; i++) {\n            tempArr.push(i);\n          }\n          config['columnPositions'] = tempArr;\n        }\n        var traces_1 = [];\n        cols.forEach(function (col, i) {\n          var labels = ndframe[config[\"labels\"]].values;\n          var values = ndframe[col].values;\n          var trace = {\n            labels: labels,\n            values: values,\n            name: col,\n            type: 'pie',\n            domain: {\n              row: config['rowPositions'][i],\n              column: config['columnPositions'][i]\n            },\n            hoverinfo: 'label+percent+name',\n            automargin: true,\n            textposition: 'outside'\n          };\n          traces_1.push(trace);\n        });\n        var _layout = __assign({}, layout);\n        if (!config[\"grid\"]) {\n          //set default grid\n          var size = Number((ndframe.shape[1] / 2).toFixed()) + 1;\n          _layout[\"grid\"] = {\n            rows: size,\n            columns: size\n          };\n        } else {\n          _layout[\"grid\"] = config[\"grid\"];\n        }\n        Plotly.newPlot(divId, traces_1, _layout, config);\n      }\n    } else {\n      throw new Error(\"Param Error: Please provide a column name for \\\"labels\\\" param\");\n    }\n  }\n};\nexports.piePlot = piePlot;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","piePlot","series_1","require","utils_1","ndframe","divId","plotConfig","Plotly","config","layout","default","trace","values","labels","index","type","name","hoverinfo","automargin","newPlot","columns","includes","Error","cols","checkIfColsExist","tempArr","push","traces_1","forEach","col","domain","row","column","textposition","_layout","size","Number","shape","toFixed","rows"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/plotting/plotly/pie.js"],"sourcesContent":["\"use strict\";\n// @ts-nocheck\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.piePlot = void 0;\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar utils_1 = require(\"./utils\");\n/**\n* Plot Series or DataFrame as pie chart.\n* Uses the Plotly as backend, so supoorts Plotly's configuration parameters,\n* Line plot supports different types of parameters, and the behavior will depend on data specified.\n* @param ndframe Series or DataFrame to plot\n* @param divId HTML div id to plot in.\n* @param plotConfig configuration options for making Plots, supports Plotly.js Config and Layout parameters.\n*/\nvar piePlot = function (ndframe, divId, plotConfig, Plotly) {\n    var config = plotConfig[\"config\"];\n    var layout = plotConfig[\"layout\"];\n    if (ndframe instanceof series_1.default) {\n        var trace = {\n            values: ndframe.values,\n            labels: config[\"labels\"] || ndframe.index,\n            type: 'pie',\n            name: config.labels,\n            hoverinfo: 'label+percent+name',\n            automargin: true\n        };\n        Plotly.newPlot(divId, [trace], layout, config);\n    }\n    else {\n        if (config[\"labels\"]) {\n            if (!ndframe.columns.includes(config['labels'])) {\n                throw Error(\"Column Error: \" + config['labels'] + \" not found in columns. Param \\\"labels\\\" name must be one of [ \" + ndframe.columns + \"]\");\n            }\n            if (config[\"values\"]) {\n                if (!ndframe.columns.includes(config['values'])) {\n                    throw Error(\"Column Error: \" + config['values'] + \" not found in columns. Param \\\"values\\\" name must be one of [ \" + ndframe.columns + \"]\");\n                }\n                var trace = {\n                    values: ndframe[config['values']].values,\n                    labels: ndframe[config[\"labels\"]].values,\n                    type: 'pie',\n                    name: config.labels,\n                    hoverinfo: 'label+percent+name',\n                    automargin: true\n                };\n                Plotly.newPlot(divId, [trace], layout, config);\n            }\n            else {\n                // if columns is not specified in config, then plot all columns\n                var cols = config[\"columns\"] ? (0, utils_1.checkIfColsExist)(ndframe, config['columns']) : ndframe.columns;\n                if (config['rowPositions']) {\n                    if (config['rowPositions'].length != cols.length) {\n                        throw Error(\"length of rowPositions array must be equal to number of columns. Got \" + config['rowPositions'].length + \", expected \" + (cols.length - 1));\n                    }\n                }\n                else {\n                    var tempArr = [];\n                    for (var i = 0; i < cols.length - 1; i++) {\n                        tempArr.push(0);\n                    }\n                    config['rowPositions'] = tempArr;\n                }\n                if (config['columnPositions']) {\n                    if (config['columnPositions'].length != cols.length) {\n                        throw Error(\"length of columnPositions array must be equal to number of columns. Got \" + config['columnPositions'].length + \", expected \" + (cols.length - 1));\n                    }\n                }\n                else {\n                    var tempArr = [];\n                    for (var i = 0; i < cols.length - 1; i++) {\n                        tempArr.push(i);\n                    }\n                    config['columnPositions'] = tempArr;\n                }\n                var traces_1 = [];\n                cols.forEach(function (col, i) {\n                    var labels = ndframe[config[\"labels\"]].values;\n                    var values = ndframe[col].values;\n                    var trace = {\n                        labels: labels,\n                        values: values,\n                        name: col,\n                        type: 'pie',\n                        domain: {\n                            row: config['rowPositions'][i],\n                            column: config['columnPositions'][i]\n                        },\n                        hoverinfo: 'label+percent+name',\n                        automargin: true,\n                        textposition: 'outside'\n                    };\n                    traces_1.push(trace);\n                });\n                var _layout = __assign({}, layout);\n                if (!config[\"grid\"]) {\n                    //set default grid\n                    var size = Number((ndframe.shape[1] / 2).toFixed()) + 1;\n                    _layout[\"grid\"] = { rows: size, columns: size };\n                }\n                else {\n                    _layout[\"grid\"] = config[\"grid\"];\n                }\n                Plotly.newPlot(divId, traces_1, _layout, config);\n            }\n        }\n        else {\n            throw new Error(\"Param Error: Please provide a column name for \\\"labels\\\" param\");\n        }\n    }\n};\nexports.piePlot = piePlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}