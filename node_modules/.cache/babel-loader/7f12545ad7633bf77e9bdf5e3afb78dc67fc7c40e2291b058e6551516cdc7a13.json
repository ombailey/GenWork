{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTo = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _algorithm = require(\"../../type/matrix/utils/algorithm13.js\");\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm14.js\");\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nvar createTo = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  var algorithm13 = (0, _algorithm.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm2.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, this, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\nexports.createTo = createTo;","map":{"version":3,"names":["Object","defineProperty","exports","value","createTo","_factory","require","_algorithm","_algorithm2","name","dependencies","factory","_ref","typed","matrix","algorithm13","createAlgorithm13","algorithm14","createAlgorithm14","UnitUnitString","x","unit","to","MatrixMatrix","y","ArrayArray","valueOf","ArrayMatrix","MatrixArray","MatrixAny","anyMatrix","ArrayAny","anyArray"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/unit/to.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTo = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm13.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nvar createTo = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  var algorithm13 = (0, _algorithm.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm2.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, this, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\nexports.createTo = createTo;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}