{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapDataUsingRowHeights = void 0;\nconst wrapCell_1 = require(\"./wrapCell\");\nconst createEmptyStrings = length => {\n  return new Array(length).fill('');\n};\nconst padCellVertically = (lines, rowHeight, columnConfig) => {\n  const {\n    verticalAlignment\n  } = columnConfig;\n  const availableLines = rowHeight - lines.length;\n  if (verticalAlignment === 'top') {\n    return [...lines, ...createEmptyStrings(availableLines)];\n  }\n  if (verticalAlignment === 'bottom') {\n    return [...createEmptyStrings(availableLines), ...lines];\n  }\n  return [...createEmptyStrings(Math.floor(availableLines / 2)), ...lines, ...createEmptyStrings(Math.ceil(availableLines / 2))];\n};\nconst flatten = array => {\n  return [].concat(...array);\n};\nconst mapDataUsingRowHeights = (unmappedRows, rowHeights, config) => {\n  const tableWidth = unmappedRows[0].length;\n  const mappedRows = unmappedRows.map((unmappedRow, unmappedRowIndex) => {\n    const outputRowHeight = rowHeights[unmappedRowIndex];\n    const outputRow = Array.from({\n      length: outputRowHeight\n    }, () => {\n      return new Array(tableWidth).fill('');\n    });\n    unmappedRow.forEach((cell, cellIndex) => {\n      const cellLines = wrapCell_1.wrapCell(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n      const paddedCellLines = padCellVertically(cellLines, outputRowHeight, config.columns[cellIndex]);\n      paddedCellLines.forEach((cellLine, cellLineIndex) => {\n        outputRow[cellLineIndex][cellIndex] = cellLine;\n      });\n    });\n    return outputRow;\n  });\n  return flatten(mappedRows);\n};\nexports.mapDataUsingRowHeights = mapDataUsingRowHeights;","map":{"version":3,"names":["Object","defineProperty","exports","value","mapDataUsingRowHeights","wrapCell_1","require","createEmptyStrings","length","Array","fill","padCellVertically","lines","rowHeight","columnConfig","verticalAlignment","availableLines","Math","floor","ceil","flatten","array","concat","unmappedRows","rowHeights","config","tableWidth","mappedRows","map","unmappedRow","unmappedRowIndex","outputRowHeight","outputRow","from","forEach","cell","cellIndex","cellLines","wrapCell","columns","width","wrapWord","paddedCellLines","cellLine","cellLineIndex"],"sources":["/Users/omarbailey/node_modules/table/dist/mapDataUsingRowHeights.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapDataUsingRowHeights = void 0;\nconst wrapCell_1 = require(\"./wrapCell\");\nconst createEmptyStrings = (length) => {\n    return new Array(length).fill('');\n};\nconst padCellVertically = (lines, rowHeight, columnConfig) => {\n    const { verticalAlignment } = columnConfig;\n    const availableLines = rowHeight - lines.length;\n    if (verticalAlignment === 'top') {\n        return [...lines, ...createEmptyStrings(availableLines)];\n    }\n    if (verticalAlignment === 'bottom') {\n        return [...createEmptyStrings(availableLines), ...lines];\n    }\n    return [\n        ...createEmptyStrings(Math.floor(availableLines / 2)),\n        ...lines,\n        ...createEmptyStrings(Math.ceil(availableLines / 2)),\n    ];\n};\nconst flatten = (array) => {\n    return [].concat(...array);\n};\nconst mapDataUsingRowHeights = (unmappedRows, rowHeights, config) => {\n    const tableWidth = unmappedRows[0].length;\n    const mappedRows = unmappedRows.map((unmappedRow, unmappedRowIndex) => {\n        const outputRowHeight = rowHeights[unmappedRowIndex];\n        const outputRow = Array.from({ length: outputRowHeight }, () => {\n            return new Array(tableWidth).fill('');\n        });\n        unmappedRow.forEach((cell, cellIndex) => {\n            const cellLines = wrapCell_1.wrapCell(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n            const paddedCellLines = padCellVertically(cellLines, outputRowHeight, config.columns[cellIndex]);\n            paddedCellLines.forEach((cellLine, cellLineIndex) => {\n                outputRow[cellLineIndex][cellIndex] = cellLine;\n            });\n        });\n        return outputRow;\n    });\n    return flatten(mappedRows);\n};\nexports.mapDataUsingRowHeights = mapDataUsingRowHeights;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAG,KAAK,CAAC;AACvC,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMC,kBAAkB,GAAIC,MAAM,IAAK;EACnC,OAAO,IAAIC,KAAK,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;AACrC,CAAC;AACD,MAAMC,iBAAiB,GAAG,CAACC,KAAK,EAAEC,SAAS,EAAEC,YAAY,KAAK;EAC1D,MAAM;IAAEC;EAAkB,CAAC,GAAGD,YAAY;EAC1C,MAAME,cAAc,GAAGH,SAAS,GAAGD,KAAK,CAACJ,MAAM;EAC/C,IAAIO,iBAAiB,KAAK,KAAK,EAAE;IAC7B,OAAO,CAAC,GAAGH,KAAK,EAAE,GAAGL,kBAAkB,CAACS,cAAc,CAAC,CAAC;EAC5D;EACA,IAAID,iBAAiB,KAAK,QAAQ,EAAE;IAChC,OAAO,CAAC,GAAGR,kBAAkB,CAACS,cAAc,CAAC,EAAE,GAAGJ,KAAK,CAAC;EAC5D;EACA,OAAO,CACH,GAAGL,kBAAkB,CAACU,IAAI,CAACC,KAAK,CAACF,cAAc,GAAG,CAAC,CAAC,CAAC,EACrD,GAAGJ,KAAK,EACR,GAAGL,kBAAkB,CAACU,IAAI,CAACE,IAAI,CAACH,cAAc,GAAG,CAAC,CAAC,CAAC,CACvD;AACL,CAAC;AACD,MAAMI,OAAO,GAAIC,KAAK,IAAK;EACvB,OAAO,EAAE,CAACC,MAAM,CAAC,GAAGD,KAAK,CAAC;AAC9B,CAAC;AACD,MAAMjB,sBAAsB,GAAG,CAACmB,YAAY,EAAEC,UAAU,EAAEC,MAAM,KAAK;EACjE,MAAMC,UAAU,GAAGH,YAAY,CAAC,CAAC,CAAC,CAACf,MAAM;EACzC,MAAMmB,UAAU,GAAGJ,YAAY,CAACK,GAAG,CAAC,CAACC,WAAW,EAAEC,gBAAgB,KAAK;IACnE,MAAMC,eAAe,GAAGP,UAAU,CAACM,gBAAgB,CAAC;IACpD,MAAME,SAAS,GAAGvB,KAAK,CAACwB,IAAI,CAAC;MAAEzB,MAAM,EAAEuB;IAAgB,CAAC,EAAE,MAAM;MAC5D,OAAO,IAAItB,KAAK,CAACiB,UAAU,CAAC,CAAChB,IAAI,CAAC,EAAE,CAAC;IACzC,CAAC,CAAC;IACFmB,WAAW,CAACK,OAAO,CAAC,CAACC,IAAI,EAAEC,SAAS,KAAK;MACrC,MAAMC,SAAS,GAAGhC,UAAU,CAACiC,QAAQ,CAACH,IAAI,EAAEV,MAAM,CAACc,OAAO,CAACH,SAAS,CAAC,CAACI,KAAK,EAAEf,MAAM,CAACc,OAAO,CAACH,SAAS,CAAC,CAACK,QAAQ,CAAC;MAChH,MAAMC,eAAe,GAAG/B,iBAAiB,CAAC0B,SAAS,EAAEN,eAAe,EAAEN,MAAM,CAACc,OAAO,CAACH,SAAS,CAAC,CAAC;MAChGM,eAAe,CAACR,OAAO,CAAC,CAACS,QAAQ,EAAEC,aAAa,KAAK;QACjDZ,SAAS,CAACY,aAAa,CAAC,CAACR,SAAS,CAAC,GAAGO,QAAQ;MAClD,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAOX,SAAS;EACpB,CAAC,CAAC;EACF,OAAOZ,OAAO,CAACO,UAAU,CAAC;AAC9B,CAAC;AACDzB,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}