{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSolveValidation = createSolveValidation;\nvar _is = require(\"../../../../utils/is.js\");\nvar _array = require(\"../../../../utils/array.js\");\nvar _string = require(\"../../../../utils/string.js\");\nfunction createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(mSize) + ')');\n    }\n    var rows = mSize[0];\n    var columns = mSize[1];\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(mSize) + ')');\n    }\n    var data = [];\n    if ((0, _is.isMatrix)(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        if ((0, _is.isDenseMatrix)(b)) {\n          if (copy) {\n            data = [];\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n          return b;\n        }\n        if ((0, _is.isSparseMatrix)(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n    if ((0, _is.isArray)(b)) {\n      var bsize = (0, _array.arraySize)(b);\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createSolveValidation","_is","require","_array","_string","_ref","DenseMatrix","solveValidation","m","b","copy","mSize","size","length","RangeError","format","rows","columns","data","isMatrix","bSize","bdata","_data","i","datatype","_datatype","isDenseMatrix","_i","isSparseMatrix","_i2","values","_values","index","_index","ptr","_ptr","k1","k","_i3","isArray","bsize","arraySize","_i4","_i5"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSolveValidation = createSolveValidation;\n\nvar _is = require(\"../../../../utils/is.js\");\n\nvar _array = require(\"../../../../utils/array.js\");\n\nvar _string = require(\"../../../../utils/string.js\");\n\nfunction createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(mSize) + ')');\n    }\n\n    var data = [];\n\n    if ((0, _is.isMatrix)(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if ((0, _is.isDenseMatrix)(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if ((0, _is.isSparseMatrix)(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if ((0, _is.isArray)(b)) {\n      var bsize = (0, _array.arraySize)(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}