{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCross = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nvar createCross = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply;\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n\n  function _cross(x, y) {\n    var highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);\n    x = (0, _array.squeeze)(x);\n    y = (0, _array.squeeze)(y);\n    var xSize = (0, _array.arraySize)(x);\n    var ySize = (0, _array.arraySize)(y);\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});\nexports.createCross = createCross;","map":{"version":3,"names":["Object","defineProperty","exports","value","createCross","_array","require","_factory","name","dependencies","factory","_ref","typed","matrix","subtract","multiply","MatrixMatrix","x","y","_cross","toArray","MatrixArray","ArrayMatrix","highestDimension","Math","max","arraySize","length","squeeze","xSize","ySize","RangeError","join","product"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/cross.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCross = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nvar createCross = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply;\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n\n  function _cross(x, y) {\n    var highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);\n    x = (0, _array.squeeze)(x);\n    y = (0, _array.squeeze)(y);\n    var xSize = (0, _array.arraySize)(x);\n    var ySize = (0, _array.arraySize)(y);\n\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});\nexports.createCross = createCross;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}