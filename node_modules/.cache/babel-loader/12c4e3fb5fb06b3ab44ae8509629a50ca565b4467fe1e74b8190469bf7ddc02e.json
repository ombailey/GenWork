{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndex = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _is = require(\"../../../utils/is.js\");\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nvar createIndex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Index = _ref.Index;\n\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if ((0, _is.isBigNumber)(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});\nexports.createIndex = createIndex;","map":{"version":3,"names":["Object","defineProperty","exports","value","createIndex","_factory","require","_is","name","dependencies","factory","_ref","typed","Index","numberStringBigNumberRangeArrayMatrix","args","ranges","map","arg","isBigNumber","toNumber","Array","isArray","isMatrix","elem","res","apply"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/matrix/function/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndex = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nvar createIndex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index;\n\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if ((0, _is.isBigNumber)(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});\nexports.createIndex = createIndex;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAE5B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEnD,IAAIC,GAAG,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAEzC,IAAIE,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,IAAIL,WAAW,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACzF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,KAAK,GAAGF,IAAI,CAACE,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,yDAAyD,EAAE,SAASM,qCAAqC,CAACC,IAAI,EAAE;MAC9G,IAAIC,MAAM,GAAGD,IAAI,CAACE,GAAG,CAAC,UAAUC,GAAG,EAAE;QACnC,IAAI,CAAC,CAAC,EAAEX,GAAG,CAACY,WAAW,EAAED,GAAG,CAAC,EAAE;UAC7B,OAAOA,GAAG,CAACE,QAAQ,EAAE,CAAC,CAAC;QACzB,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,IAAI,CAAC,CAAC,EAAEX,GAAG,CAACgB,QAAQ,EAAEL,GAAG,CAAC,EAAE;UACvD,OAAOA,GAAG,CAACD,GAAG,CAAC,UAAUO,IAAI,EAAE;YAC7B;YACA,OAAO,CAAC,CAAC,EAAEjB,GAAG,CAACY,WAAW,EAAEK,IAAI,CAAC,GAAGA,IAAI,CAACJ,QAAQ,EAAE,GAAGI,IAAI;UAC5D,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,OAAON,GAAG;QACZ;MACF,CAAC,CAAC;MACF,IAAIO,GAAG,GAAG,IAAIZ,KAAK,EAAE;MACrBA,KAAK,CAACa,KAAK,CAACD,GAAG,EAAET,MAAM,CAAC;MACxB,OAAOS,GAAG;IACZ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFvB,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}