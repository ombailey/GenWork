{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComplexClass = void 0;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _complex = _interopRequireDefault(require(\"complex.js\"));\nvar _number = require(\"../../utils/number.js\");\nvar _is = require(\"../../utils/is.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'Complex';\nvar dependencies = [];\nvar createComplexClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\n  /**\n   * Attach type information\n   */\n  _complex[\"default\"].prototype.type = 'Complex';\n  _complex[\"default\"].prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  _complex[\"default\"].prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n  _complex[\"default\"].prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n  _complex[\"default\"].prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = (0, _number.format)(this.re, options);\n    var strIm = (0, _number.format)(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = (0, _is.isNumber)(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n  _complex[\"default\"].fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n          if ((0, _typeof2[\"default\"])(arg) === 'object') {\n            return (0, _complex[\"default\"])(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n          if ((0, _is.isNumber)(r)) {\n            if ((0, _is.isUnit)(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n            if ((0, _is.isNumber)(phi)) {\n              return new _complex[\"default\"]({\n                r: r,\n                phi: phi\n              });\n            }\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n  _complex[\"default\"].prototype.valueOf = _complex[\"default\"].prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  _complex[\"default\"].fromJSON = function (json) {\n    return new _complex[\"default\"](json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n  _complex[\"default\"].compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n    if (a.re < b.re) {\n      return -1;\n    }\n    if (a.im > b.im) {\n      return 1;\n    }\n    if (a.im < b.im) {\n      return -1;\n    }\n    return 0;\n  };\n  return _complex[\"default\"];\n}, {\n  isClass: true\n});\nexports.createComplexClass = createComplexClass;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createComplexClass","_typeof2","_complex","_number","_is","_factory","name","dependencies","factory","prototype","type","isComplex","toJSON","mathjs","re","im","toPolar","r","abs","phi","arg","format","options","str","strRe","strIm","precision","isNumber","epsilon","Math","pow","substring","fromPolar","args","arguments","length","TypeError","isUnit","hasBase","toNumber","SyntaxError","valueOf","toString","fromJSON","json","compare","a","b","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/complex/Complex.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComplexClass = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _complex = _interopRequireDefault(require(\"complex.js\"));\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'Complex';\nvar dependencies = [];\nvar createComplexClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\n  /**\n   * Attach type information\n   */\n  _complex[\"default\"].prototype.type = 'Complex';\n  _complex[\"default\"].prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  _complex[\"default\"].prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n\n  _complex[\"default\"].prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n\n  _complex[\"default\"].prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = (0, _number.format)(this.re, options);\n    var strIm = (0, _number.format)(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = (0, _is.isNumber)(options) ? options : options ? options.precision : null;\n\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n\n  _complex[\"default\"].fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n\n          if ((0, _typeof2[\"default\"])(arg) === 'object') {\n            return (0, _complex[\"default\"])(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n\n          if ((0, _is.isNumber)(r)) {\n            if ((0, _is.isUnit)(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n\n            if ((0, _is.isNumber)(phi)) {\n              return new _complex[\"default\"]({\n                r: r,\n                phi: phi\n              });\n            }\n\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n  _complex[\"default\"].prototype.valueOf = _complex[\"default\"].prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  _complex[\"default\"].fromJSON = function (json) {\n    return new _complex[\"default\"](json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  _complex[\"default\"].compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n\n    if (a.re < b.re) {\n      return -1;\n    }\n\n    if (a.im > b.im) {\n      return 1;\n    }\n\n    if (a.im < b.im) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  return _complex[\"default\"];\n}, {\n  isClass: true\n});\nexports.createComplexClass = createComplexClass;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}