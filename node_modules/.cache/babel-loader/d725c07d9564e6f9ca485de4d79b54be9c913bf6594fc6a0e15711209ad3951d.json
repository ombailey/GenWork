{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConstantNode = void 0;\nvar _string = require(\"../../utils/string.js\");\nvar _is = require(\"../../utils/is.js\");\nvar _latex = require(\"../../utils/latex.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nvar createConstantNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.value = value;\n  }\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ConstantNode.prototype._toString = function (options) {\n    return (0, _string.format)(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n    switch ((0, _is.typeOf)(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n    switch ((0, _is.typeOf)(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + (0, _latex.escapeLatex)(value) + '}';\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n          var index = value.toLowerCase().indexOf('e');\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n      case 'Fraction':\n        return this.value.toLatex();\n      default:\n        return value;\n    }\n  };\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createConstantNode = createConstantNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","createConstantNode","_string","require","_is","_latex","_factory","name","dependencies","factory","_ref","Node","ConstantNode","SyntaxError","prototype","type","isConstantNode","_compile","math","argNames","evalConstantNode","forEach","callback","map","clone","_toString","options","format","toHTML","typeOf","toJSON","mathjs","fromJSON","json","_toTex","escapeLatex","isFinite","valueOf","index","toLowerCase","indexOf","substring","toLatex","isClass","isNode"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/node/ConstantNode.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConstantNode = void 0;\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _latex = require(\"../../utils/latex.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nvar createConstantNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return (0, _string.format)(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch ((0, _is.typeOf)(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch ((0, _is.typeOf)(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + (0, _latex.escapeLatex)(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createConstantNode = createConstantNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}