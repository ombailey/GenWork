{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { browser, cast, env, expandDims, image, reshape, tensor1d, tensor2d, tidy, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport class WebcamIterator extends LazyIterator {\n  constructor(webcamVideoElement, webcamConfig) {\n    super();\n    this.webcamVideoElement = webcamVideoElement;\n    this.webcamConfig = webcamConfig;\n    this.isClosed = true;\n    this.resize = false;\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], 'int32');\n      if (this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        const widthCroppingRatio = this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 / this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n  summary() {\n    return `webcam`;\n  }\n  // Construct a WebcamIterator and start it's video stream.\n  static async create(webcamVideoElement) {\n    let webcamConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!env().get('IS_BROWSER')) {\n      throw new Error('tf.data.webcam is only supported in browser environment.');\n    }\n    if (!webcamVideoElement) {\n      // If webcam video element is not provided, create a hidden video element\n      // with provided width and height.\n      webcamVideoElement = document.createElement('video');\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error('Please provide webcam video element, or resizeWidth and ' + 'resizeHeight to create a hidden video element.');\n      }\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n    // Call async function to initialize the video stream.\n    await webcamIterator.start();\n    return webcamIterator;\n  }\n  // Async function to start video stream.\n  async start() {\n    if (this.webcamConfig.facingMode) {\n      util.assert(this.webcamConfig.facingMode === 'user' || this.webcamConfig.facingMode === 'environment', () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` + `Please provide 'user' or 'environment'`);\n    }\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : 'user',\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n    if (!this.stream) {\n      throw new Error('Could not obtain video from webcam.');\n    }\n    // Older browsers may not have srcObject\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n    }\n    // Start the webcam video stream\n    this.webcamVideoElement.play();\n    this.isClosed = false;\n    return new Promise(resolve => {\n      // Add event listener to make sure the webcam has been fully initialized.\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n  async next() {\n    if (this.isClosed) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n    let img;\n    try {\n      img = browser.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n    if (this.resize) {\n      try {\n        return {\n          value: this.cropAndResizeFrame(img),\n          done: false\n        };\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return {\n        value: img,\n        done: false\n      };\n    }\n  }\n  needToResize() {\n    // If resizeWidth and resizeHeight are provided, and different from the\n    // width and height of original HTMLVideoElement, then resizing and cropping\n    // is required.\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n    return false;\n  }\n  // Cropping and resizing each frame based on config\n  cropAndResizeFrame(img) {\n    return tidy(() => {\n      const expandedImage = expandDims(cast(img, 'float32'), 0);\n      let resizedImage;\n      resizedImage = image.cropAndResize(expandedImage, this.cropBox, this.cropBoxInd, this.cropSize, 'bilinear');\n      // Extract image from batch cropping.\n      const shape = resizedImage.shape;\n      return reshape(resizedImage, shape.slice(1));\n    });\n  }\n  // Capture one frame from the video stream, and extract the value from\n  // iterator.next() result.\n  async capture() {\n    return (await this.next()).value;\n  }\n  // Stop the video stream and pause webcam iterator.\n  stop() {\n    const tracks = this.stream.getTracks();\n    tracks.forEach(track => track.stop());\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n    this.isClosed = true;\n  }\n  // Override toArray() function to prevent collecting.\n  toArray() {\n    throw new Error('Can not convert infinite video stream to array.');\n  }\n}","map":{"version":3,"mappings":"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","names":["browser","cast","env","expandDims","image","reshape","tensor1d","tensor2d","tidy","util","LazyIterator","WebcamIterator","constructor","webcamVideoElement","webcamConfig","needToResize","resize","cropSize","resizeHeight","resizeWidth","cropBoxInd","centerCrop","widthCroppingRatio","width","heightCroppingRatio","height","widthCropStart","heightCropStart","widthCropEnd","heightCropEnd","cropBox","summary","create","get","Error","document","createElement","webcamIterator","start","facingMode","assert","stream","navigator","mediaDevices","getUserMedia","video","deviceId","e","message","srcObject","error","console","log","src","window","URL","createObjectURL","play","isClosed","Promise","resolve","onloadedmetadata","next","value","done","img","fromPixels","JSON","stringify","cropAndResizeFrame","dispose","expandedImage","resizedImage","cropAndResize","shape","slice","capture","stop","tracks","getTracks","forEach","track","toArray"],"sources":["/Users/omarbailey/node_modules/tfjs-data/src/iterators/webcam_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {browser, cast, env, expandDims, image, reshape, tensor1d, Tensor1D, tensor2d, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\nimport {WebcamConfig} from '../types';\nimport {LazyIterator} from './lazy_iterator';\n\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport class WebcamIterator extends LazyIterator<Tensor3D> {\n  private isClosed = true;\n  private stream: MediaStream;\n  private resize = false;\n  private cropSize: [number, number];\n  private cropBox: Tensor2D;\n  private cropBoxInd: Tensor1D;\n\n  private constructor(\n      protected readonly webcamVideoElement: HTMLVideoElement,\n      protected readonly webcamConfig: WebcamConfig) {\n    super();\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize =\n          [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], 'int32');\n      if (this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        const widthCroppingRatio =\n            this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 /\n            this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d(\n            [heightCropStart, widthCropStart, heightCropEnd, widthCropEnd],\n            [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n\n  summary() {\n    return `webcam`;\n  }\n\n  // Construct a WebcamIterator and start it's video stream.\n  static async create(\n      webcamVideoElement?: HTMLVideoElement, webcamConfig: WebcamConfig = {}) {\n    if (!env().get('IS_BROWSER')) {\n      throw new Error(\n          'tf.data.webcam is only supported in browser environment.');\n    }\n\n    if (!webcamVideoElement) {\n      // If webcam video element is not provided, create a hidden video element\n      // with provided width and height.\n      webcamVideoElement = document.createElement('video');\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error(\n            'Please provide webcam video element, or resizeWidth and ' +\n            'resizeHeight to create a hidden video element.');\n      }\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n\n    // Call async function to initialize the video stream.\n    await webcamIterator.start();\n\n    return webcamIterator;\n  }\n\n  // Async function to start video stream.\n  async start(): Promise<void> {\n    if (this.webcamConfig.facingMode) {\n      util.assert(\n          (this.webcamConfig.facingMode === 'user') ||\n              (this.webcamConfig.facingMode === 'environment'),\n          () =>\n              `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` +\n              `Please provide 'user' or 'environment'`);\n    }\n\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ?\n              this.webcamConfig.facingMode :\n              'user',\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain video from webcam.');\n    }\n\n    // Older browsers may not have srcObject\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n    }\n    // Start the webcam video stream\n    this.webcamVideoElement.play();\n\n    this.isClosed = false;\n\n    return new Promise<void>(resolve => {\n      // Add event listener to make sure the webcam has been fully initialized.\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n\n  async next(): Promise<IteratorResult<Tensor3D>> {\n    if (this.isClosed) {\n      return {value: null, done: true};\n    }\n\n    let img;\n    try {\n      img = browser.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(\n          `Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n    if (this.resize) {\n      try {\n        return {value: this.cropAndResizeFrame(img), done: false};\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return {value: img, done: false};\n    }\n  }\n\n  private needToResize() {\n    // If resizeWidth and resizeHeight are provided, and different from the\n    // width and height of original HTMLVideoElement, then resizing and cropping\n    // is required.\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight &&\n        (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth ||\n         this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Cropping and resizing each frame based on config\n  cropAndResizeFrame(img: Tensor3D): Tensor3D {\n    return tidy(() => {\n      const expandedImage: Tensor4D = expandDims(cast(img, 'float32'), (0));\n      let resizedImage;\n      resizedImage = image.cropAndResize(\n          expandedImage, this.cropBox, this.cropBoxInd, this.cropSize,\n          'bilinear');\n      // Extract image from batch cropping.\n      const shape = resizedImage.shape;\n      return reshape(resizedImage, shape.slice(1) as [number, number, number]);\n    });\n  }\n\n  // Capture one frame from the video stream, and extract the value from\n  // iterator.next() result.\n  async capture(): Promise<Tensor3D> {\n    return (await this.next()).value;\n  }\n\n  // Stop the video stream and pause webcam iterator.\n  stop(): void {\n    const tracks = this.stream.getTracks();\n\n    tracks.forEach(track => track.stop());\n\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n    this.isClosed = true;\n  }\n\n  // Override toArray() function to prevent collecting.\n  toArray(): Promise<Tensor3D[]> {\n    throw new Error('Can not convert infinite video stream to array.');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}