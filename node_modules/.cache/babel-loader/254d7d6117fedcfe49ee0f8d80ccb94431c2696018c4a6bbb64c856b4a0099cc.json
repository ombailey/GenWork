{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLusolve = void 0;\nvar _is = require(\"../../../utils/is.js\");\nvar _factory = require(\"../../../utils/factory.js\");\nvar _solveValidation = require(\"./utils/solveValidation.js\");\nvar _csIpvec = require(\"../sparse/csIpvec.js\");\nvar name = 'lusolve';\nvar dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];\nvar createLusolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    lup = _ref.lup,\n    slu = _ref.slu,\n    usolve = _ref.usolve,\n    lsolve = _ref.lsolve,\n    DenseMatrix = _ref.DenseMatrix;\n  var solveValidation = (0, _solveValidation.createSolveValidation)({\n    DenseMatrix: DenseMatrix\n  });\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n   *\n   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    const f = math.lup(m)\n   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = math.lusolve(a, b)  // [[2], [5]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n\n  return typed(name, {\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      a = matrix(a);\n      var d = lup(a);\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n      return x.valueOf();\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {\n      var d = slu(a, order, threshold);\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n  function _toMatrix(a) {\n    if ((0, _is.isMatrix)(a)) {\n      return a;\n    }\n    if ((0, _is.isArray)(a)) {\n      return matrix(a);\n    }\n    throw new TypeError('Invalid Matrix LU decomposition');\n  }\n  function _lusolve(l, u, p, q, b) {\n    // verify decomposition\n    l = _toMatrix(l);\n    u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)\n\n    if (p) {\n      b = solveValidation(l, b, true);\n      b._data = (0, _csIpvec.csIpvec)(p, b._data);\n    } // use forward substitution to resolve L * y = b\n\n    var y = lsolve(l, b); // use backward substitution to resolve U * x = y\n\n    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)\n\n    if (q) {\n      x._data = (0, _csIpvec.csIpvec)(q, x._data);\n    }\n    return x;\n  }\n});\nexports.createLusolve = createLusolve;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLusolve","_is","require","_factory","_solveValidation","_csIpvec","name","dependencies","factory","_ref","typed","matrix","lup","slu","usolve","lsolve","DenseMatrix","solveValidation","createSolveValidation","ArrayArrayMatrix","a","b","d","x","_lusolve","L","U","p","valueOf","DenseMatrixArrayMatrix","SparseMatrixArrayMatrix","SparseMatrixArrayMatrixNumberNumber","order","threshold","q","ObjectArrayMatrix","_toMatrix","isMatrix","isArray","TypeError","l","u","_data","csIpvec","y"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/algebra/solver/lusolve.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLusolve = void 0;\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _solveValidation = require(\"./utils/solveValidation.js\");\n\nvar _csIpvec = require(\"../sparse/csIpvec.js\");\n\nvar name = 'lusolve';\nvar dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];\nvar createLusolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      lup = _ref.lup,\n      slu = _ref.slu,\n      usolve = _ref.usolve,\n      lsolve = _ref.lsolve,\n      DenseMatrix = _ref.DenseMatrix;\n  var solveValidation = (0, _solveValidation.createSolveValidation)({\n    DenseMatrix: DenseMatrix\n  });\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n   *\n   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    const f = math.lup(m)\n   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = math.lusolve(a, b)  // [[2], [5]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n\n  return typed(name, {\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      a = matrix(a);\n      var d = lup(a);\n\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n\n      return x.valueOf();\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {\n      var d = slu(a, order, threshold);\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n\n  function _toMatrix(a) {\n    if ((0, _is.isMatrix)(a)) {\n      return a;\n    }\n\n    if ((0, _is.isArray)(a)) {\n      return matrix(a);\n    }\n\n    throw new TypeError('Invalid Matrix LU decomposition');\n  }\n\n  function _lusolve(l, u, p, q, b) {\n    // verify decomposition\n    l = _toMatrix(l);\n    u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)\n\n    if (p) {\n      b = solveValidation(l, b, true);\n      b._data = (0, _csIpvec.csIpvec)(p, b._data);\n    } // use forward substitution to resolve L * y = b\n\n\n    var y = lsolve(l, b); // use backward substitution to resolve U * x = y\n\n    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)\n\n    if (q) {\n      x._data = (0, _csIpvec.csIpvec)(q, x._data);\n    }\n\n    return x;\n  }\n});\nexports.createLusolve = createLusolve;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}