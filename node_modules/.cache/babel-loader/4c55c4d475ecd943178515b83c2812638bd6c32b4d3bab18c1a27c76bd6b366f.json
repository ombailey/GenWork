{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccessorNode = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _access = require(\"./utils/access.js\");\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nvar createAccessorNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!(0, _is.isNode)(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n    if (!(0, _is.isIndexNode)(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n    var evalIndex = this.index._compile(math, argNames);\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        // get a property from an object evaluated using the scope.\n        return (0, _customs.getSafeProperty)(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !((0, _is.isAccessorNode)(node) || (0, _is.isArrayNode)(node) || (0, _is.isConstantNode)(node) || (0, _is.isFunctionNode)(node) || (0, _is.isObjectNode)(node) || (0, _is.isParenthesisNode)(node) || (0, _is.isSymbolNode)(node));\n  }\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAccessorNode = createAccessorNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAccessorNode","_is","require","_customs","_factory","_access","name","dependencies","factory","_ref","subset","Node","access","accessFactory","AccessorNode","object","index","SyntaxError","isNode","TypeError","isIndexNode","get","isObjectProperty","getObjectProperty","bind","set","Error","prototype","type","isAccessorNode","_compile","math","argNames","evalObject","evalIndex","prop","evalAccessorNode","scope","args","context","getSafeProperty","forEach","callback","map","_ifNode","clone","_toString","options","toString","needParenthesis","toHTML","_toTex","toTex","toJSON","mathjs","fromJSON","json","node","isArrayNode","isConstantNode","isFunctionNode","isObjectNode","isParenthesisNode","isSymbolNode","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/node/AccessorNode.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccessorNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _access = require(\"./utils/access.js\");\n\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nvar createAccessorNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!(0, _is.isNode)(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!(0, _is.isIndexNode)(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        // get a property from an object evaluated using the scope.\n        return (0, _customs.getSafeProperty)(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !((0, _is.isAccessorNode)(node) || (0, _is.isArrayNode)(node) || (0, _is.isConstantNode)(node) || (0, _is.isFunctionNode)(node) || (0, _is.isObjectNode)(node) || (0, _is.isParenthesisNode)(node) || (0, _is.isSymbolNode)(node));\n  }\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAccessorNode = createAccessorNode;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AAEnC,IAAIC,GAAG,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEtC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIG,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE1C,IAAII,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;AACrC,IAAIP,kBAAkB,GAAG,eAAe,CAAC,CAAC,EAAEI,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChG,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACpBC,IAAI,GAAGF,IAAI,CAACE,IAAI;EACpB,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACQ,aAAa,EAAE;IACtCH,MAAM,EAAEA;EACV,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASI,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAE;IACnC,IAAI,EAAE,IAAI,YAAYF,YAAY,CAAC,EAAE;MACnC,MAAM,IAAIG,WAAW,CAAC,kDAAkD,CAAC;IAC3E;IAEA,IAAI,CAAC,CAAC,CAAC,EAAEhB,GAAG,CAACiB,MAAM,EAAEH,MAAM,CAAC,EAAE;MAC5B,MAAM,IAAII,SAAS,CAAC,sCAAsC,CAAC;IAC7D;IAEA,IAAI,CAAC,CAAC,CAAC,EAAElB,GAAG,CAACmB,WAAW,EAAEJ,KAAK,CAAC,EAAE;MAChC,MAAM,IAAIG,SAAS,CAAC,0CAA0C,CAAC;IACjE;IAEA,IAAI,CAACJ,MAAM,GAAGA,MAAM,IAAI,IAAI;IAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAC,CAAC;;IAEpBpB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAClCwB,GAAG,EAAE,YAAY;QACf,IAAI,IAAI,CAACL,KAAK,EAAE;UACd,OAAO,IAAI,CAACA,KAAK,CAACM,gBAAgB,EAAE,GAAG,IAAI,CAACN,KAAK,CAACO,iBAAiB,EAAE,GAAG,EAAE;QAC5E,CAAC,MAAM;UACL,OAAO,IAAI,CAACR,MAAM,CAACT,IAAI,IAAI,EAAE;QAC/B;MACF,CAAC,CAACkB,IAAI,CAAC,IAAI,CAAC;MACZC,GAAG,EAAE,SAASA,GAAG,GAAG;QAClB,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;MAChE;IACF,CAAC,CAAC;EACJ;EAEAZ,YAAY,CAACa,SAAS,GAAG,IAAIhB,IAAI,EAAE;EACnCG,YAAY,CAACa,SAAS,CAACC,IAAI,GAAG,cAAc;EAC5Cd,YAAY,CAACa,SAAS,CAACE,cAAc,GAAG,IAAI;EAC5C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEf,YAAY,CAACa,SAAS,CAACG,QAAQ,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAE;IAC1D,IAAIC,UAAU,GAAG,IAAI,CAAClB,MAAM,CAACe,QAAQ,CAACC,IAAI,EAAEC,QAAQ,CAAC;IAErD,IAAIE,SAAS,GAAG,IAAI,CAAClB,KAAK,CAACc,QAAQ,CAACC,IAAI,EAAEC,QAAQ,CAAC;IAEnD,IAAI,IAAI,CAAChB,KAAK,CAACM,gBAAgB,EAAE,EAAE;MACjC,IAAIa,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACO,iBAAiB,EAAE;MACzC,OAAO,SAASa,gBAAgB,CAACC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAE;QACrD;QACA,OAAO,CAAC,CAAC,EAAEpC,QAAQ,CAACqC,eAAe,EAAEP,UAAU,CAACI,KAAK,EAAEC,IAAI,EAAEC,OAAO,CAAC,EAAEJ,IAAI,CAAC;MAC9E,CAAC;IACH,CAAC,MAAM;MACL,OAAO,SAASC,gBAAgB,CAACC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAE;QACrD,IAAIxB,MAAM,GAAGkB,UAAU,CAACI,KAAK,EAAEC,IAAI,EAAEC,OAAO,CAAC;QAC7C,IAAIvB,KAAK,GAAGkB,SAAS,CAACG,KAAK,EAAEC,IAAI,EAAEvB,MAAM,CAAC,CAAC,CAAC;;QAE5C,OAAOH,MAAM,CAACG,MAAM,EAAEC,KAAK,CAAC;MAC9B,CAAC;IACH;EACF,CAAC;EACD;AACF;AACA;AACA;;EAGEF,YAAY,CAACa,SAAS,CAACc,OAAO,GAAG,UAAUC,QAAQ,EAAE;IACnDA,QAAQ,CAAC,IAAI,CAAC3B,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC;IACrC2B,QAAQ,CAAC,IAAI,CAAC1B,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC;EACrC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;;EAGEF,YAAY,CAACa,SAAS,CAACgB,GAAG,GAAG,UAAUD,QAAQ,EAAE;IAC/C,OAAO,IAAI5B,YAAY,CAAC,IAAI,CAAC8B,OAAO,CAACF,QAAQ,CAAC,IAAI,CAAC3B,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC6B,OAAO,CAACF,QAAQ,CAAC,IAAI,CAAC1B,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;EACjI,CAAC;EACD;AACF;AACA;AACA;;EAGEF,YAAY,CAACa,SAAS,CAACkB,KAAK,GAAG,YAAY;IACzC,OAAO,IAAI/B,YAAY,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,KAAK,CAAC;EAClD,CAAC;EACD;AACF;AACA;AACA;AACA;;EAGEF,YAAY,CAACa,SAAS,CAACmB,SAAS,GAAG,UAAUC,OAAO,EAAE;IACpD,IAAIhC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiC,QAAQ,CAACD,OAAO,CAAC;IAE1C,IAAIE,eAAe,CAAC,IAAI,CAAClC,MAAM,CAAC,EAAE;MAChCA,MAAM,GAAG,GAAG,GAAGA,MAAM,GAAG,GAAG;IAC7B;IAEA,OAAOA,MAAM,GAAG,IAAI,CAACC,KAAK,CAACgC,QAAQ,CAACD,OAAO,CAAC;EAC9C,CAAC;EACD;AACF;AACA;AACA;AACA;;EAGEjC,YAAY,CAACa,SAAS,CAACuB,MAAM,GAAG,UAAUH,OAAO,EAAE;IACjD,IAAIhC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACmC,MAAM,CAACH,OAAO,CAAC;IAExC,IAAIE,eAAe,CAAC,IAAI,CAAClC,MAAM,CAAC,EAAE;MAChCA,MAAM,GAAG,gEAAgE,GAAGA,MAAM,GAAG,gEAAgE;IACvJ;IAEA,OAAOA,MAAM,GAAG,IAAI,CAACC,KAAK,CAACkC,MAAM,CAACH,OAAO,CAAC;EAC5C,CAAC;EACD;AACF;AACA;AACA;AACA;;EAGEjC,YAAY,CAACa,SAAS,CAACwB,MAAM,GAAG,UAAUJ,OAAO,EAAE;IACjD,IAAIhC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACqC,KAAK,CAACL,OAAO,CAAC;IAEvC,IAAIE,eAAe,CAAC,IAAI,CAAClC,MAAM,CAAC,EAAE;MAChCA,MAAM,GAAG,iCAAiC;IAC5C;IAEA,OAAOA,MAAM,GAAG,IAAI,CAACC,KAAK,CAACoC,KAAK,CAACL,OAAO,CAAC;EAC3C,CAAC;EACD;AACF;AACA;AACA;;EAGEjC,YAAY,CAACa,SAAS,CAAC0B,MAAM,GAAG,YAAY;IAC1C,OAAO;MACLC,MAAM,EAAE,cAAc;MACtBvC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,KAAK,EAAE,IAAI,CAACA;IACd,CAAC;EACH,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEF,YAAY,CAACyC,QAAQ,GAAG,UAAUC,IAAI,EAAE;IACtC,OAAO,IAAI1C,YAAY,CAAC0C,IAAI,CAACzC,MAAM,EAAEyC,IAAI,CAACxC,KAAK,CAAC;EAClD,CAAC;EACD;AACF;AACA;AACA;;EAGE,SAASiC,eAAe,CAACQ,IAAI,EAAE;IAC7B;IACA,OAAO,EAAE,CAAC,CAAC,EAAExD,GAAG,CAAC4B,cAAc,EAAE4B,IAAI,CAAC,IAAI,CAAC,CAAC,EAAExD,GAAG,CAACyD,WAAW,EAAED,IAAI,CAAC,IAAI,CAAC,CAAC,EAAExD,GAAG,CAAC0D,cAAc,EAAEF,IAAI,CAAC,IAAI,CAAC,CAAC,EAAExD,GAAG,CAAC2D,cAAc,EAAEH,IAAI,CAAC,IAAI,CAAC,CAAC,EAAExD,GAAG,CAAC4D,YAAY,EAAEJ,IAAI,CAAC,IAAI,CAAC,CAAC,EAAExD,GAAG,CAAC6D,iBAAiB,EAAEL,IAAI,CAAC,IAAI,CAAC,CAAC,EAAExD,GAAG,CAAC8D,YAAY,EAAEN,IAAI,CAAC,CAAC;EAC3O;EAEA,OAAO3C,YAAY;AACrB,CAAC,EAAE;EACDkD,OAAO,EAAE,IAAI;EACb9C,MAAM,EAAE;AACV,CAAC,CAAC;AACFpB,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}