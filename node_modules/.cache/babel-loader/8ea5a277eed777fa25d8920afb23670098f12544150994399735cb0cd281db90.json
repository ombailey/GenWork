{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.complexEquals = complexEquals;\nvar _number = require(\"./number.js\");\n\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\nfunction complexEquals(x, y, epsilon) {\n  return (0, _number.nearlyEqual)(x.re, y.re, epsilon) && (0, _number.nearlyEqual)(x.im, y.im, epsilon);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","complexEquals","_number","require","x","y","epsilon","nearlyEqual","re","im"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/utils/complex.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.complexEquals = complexEquals;\n\nvar _number = require(\"./number.js\");\n\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\nfunction complexEquals(x, y, epsilon) {\n  return (0, _number.nearlyEqual)(x.re, y.re, epsilon) && (0, _number.nearlyEqual)(x.im, y.im, epsilon);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAGA,aAAa;AAErC,IAAIC,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,aAAa,CAACG,CAAC,EAAEC,CAAC,EAAEC,OAAO,EAAE;EACpC,OAAO,CAAC,CAAC,EAAEJ,OAAO,CAACK,WAAW,EAAEH,CAAC,CAACI,EAAE,EAAEH,CAAC,CAACG,EAAE,EAAEF,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEJ,OAAO,CAACK,WAAW,EAAEH,CAAC,CAACK,EAAE,EAAEJ,CAAC,CAACI,EAAE,EAAEH,OAAO,CAAC;AACvG"},"metadata":{},"sourceType":"script","externalDependencies":[]}