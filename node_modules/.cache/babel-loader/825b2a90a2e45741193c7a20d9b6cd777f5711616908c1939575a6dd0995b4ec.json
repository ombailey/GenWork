{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMod = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _algorithm = require(\"../../type/matrix/utils/algorithm02.js\");\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm03.js\");\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm05.js\");\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm11.js\");\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm12.js\");\nvar _algorithm6 = require(\"../../type/matrix/utils/algorithm13.js\");\nvar _algorithm7 = require(\"../../type/matrix/utils/algorithm14.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nvar createMod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = (0, _algorithm.createAlgorithm02)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = (0, _algorithm2.createAlgorithm03)({\n    typed: typed\n  });\n  var algorithm05 = (0, _algorithm3.createAlgorithm05)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = (0, _algorithm4.createAlgorithm11)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = (0, _algorithm5.createAlgorithm12)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = (0, _algorithm6.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm7.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  return typed(name, {\n    'number, number': _index.modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\nexports.createMod = createMod;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMod","_factory","require","_algorithm","_algorithm2","_algorithm3","_algorithm4","_algorithm5","_algorithm6","_algorithm7","_index","name","dependencies","factory","_ref","typed","matrix","equalScalar","DenseMatrix","algorithm02","createAlgorithm02","algorithm03","createAlgorithm03","algorithm05","createAlgorithm05","algorithm11","createAlgorithm11","algorithm12","createAlgorithm12","algorithm13","createAlgorithm13","algorithm14","createAlgorithm14","modNumber","BigNumberBigNumber","x","y","isNeg","Error","isZero","mod","FractionFraction","compare","add","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/mod.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMod = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm02.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm03.js\");\n\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm05.js\");\n\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm11.js\");\n\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm12.js\");\n\nvar _algorithm6 = require(\"../../type/matrix/utils/algorithm13.js\");\n\nvar _algorithm7 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nvar createMod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = (0, _algorithm.createAlgorithm02)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = (0, _algorithm2.createAlgorithm03)({\n    typed: typed\n  });\n  var algorithm05 = (0, _algorithm3.createAlgorithm05)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = (0, _algorithm4.createAlgorithm11)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = (0, _algorithm5.createAlgorithm12)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = (0, _algorithm6.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm7.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  return typed(name, {\n    'number, number': _index.modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n\n\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\nexports.createMod = createMod;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}