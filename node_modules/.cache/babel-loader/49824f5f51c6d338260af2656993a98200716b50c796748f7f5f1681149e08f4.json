{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssignmentNode = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _access = require(\"./utils/access.js\");\nvar _assign = require(\"./utils/assign.js\");\nvar _operators = require(\"../operators.js\");\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    matrix = _ref.matrix,\n    Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  var assign = (0, _assign.assignFactory)({\n    subset: subset,\n    matrix: matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n    if (this.index && !(0, _is.isIndexNode)(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n    if (!(0, _is.isNode)(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n    var evalValue = this.value._compile(math, argNames);\n    var name = this.object.name;\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!(0, _is.isSymbolNode)(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n      return function evalAssignmentNode(scope, args, context) {\n        var value = evalValue(scope, args, context);\n        scope.set(name, value);\n        return value;\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        (0, _customs.setSafeProperty)(object, prop, value);\n        return value;\n      };\n    } else if ((0, _is.isSymbolNode)(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        scope.set(name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n    var value = this._ifNode(callback(this.value, 'value', this));\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n    return object + index + ':=' + value;\n  };\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAssignmentNode = createAssignmentNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAssignmentNode","_is","require","_customs","_factory","_access","_assign","_operators","name","dependencies","factory","_ref","subset","matrix","Node","access","accessFactory","assign","assignFactory","AssignmentNode","object","index","SyntaxError","isSymbolNode","isAccessorNode","TypeError","Error","isIndexNode","isNode","get","isObjectProperty","getObjectProperty","bind","set","prototype","type","isAssignmentNode","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","prop","setSafeProperty","childObject","evalParentObject","parentProp","parent","getSafeProperty","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","needParenthesis","node","parenthesis","precedence","getPrecedence","exprPrecedence","_toString","options","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssignmentNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _access = require(\"./utils/access.js\");\n\nvar _assign = require(\"./utils/assign.js\");\n\nvar _operators = require(\"../operators.js\");\n\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix,\n      Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  var assign = (0, _assign.assignFactory)({\n    subset: subset,\n    matrix: matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !(0, _is.isIndexNode)(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!(0, _is.isNode)(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!(0, _is.isSymbolNode)(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        var value = evalValue(scope, args, context);\n        scope.set(name, value);\n        return value;\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        (0, _customs.setSafeProperty)(object, prop, value);\n        return value;\n      };\n    } else if ((0, _is.isSymbolNode)(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        scope.set(name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAssignmentNode = createAssignmentNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}