{"ast":null,"code":"\"use strict\";\n\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tensorflowlib_1 = __importDefault(require(\"../../shared/tensorflowlib\"));\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar frame_1 = __importDefault(require(\"../../core/frame\"));\nvar utils_1 = __importDefault(require(\"../../shared/utils\"));\nvar utils = new utils_1.default();\n/**\n * Standardize features by removing the mean and scaling to unit variance.\n * The standard score of a sample x is calculated as: `z = (x - u) / s`,\n * where `u` is the mean of the training samples, and `s` is the standard deviation of the training samples.\n */\nvar StandardScaler = /** @class */function () {\n  function StandardScaler() {\n    this.$std = tensorflowlib_1.default.tensor1d([]);\n    this.$mean = tensorflowlib_1.default.tensor1d([]);\n  }\n  StandardScaler.prototype.$getTensor = function (data) {\n    var $tensorArray;\n    if (data instanceof Array) {\n      if (utils.is1DArray(data)) {\n        $tensorArray = tensorflowlib_1.default.tensor1d(data);\n      } else {\n        $tensorArray = tensorflowlib_1.default.tensor2d(data);\n      }\n    } else if (data instanceof frame_1.default || data instanceof series_1.default) {\n      $tensorArray = data.tensor;\n    } else if (data instanceof tensorflowlib_1.default.Tensor) {\n      $tensorArray = data;\n    } else {\n      throw new Error(\"ParamError: data must be one of Array, DataFrame or Series\");\n    }\n    return $tensorArray;\n  };\n  /**\n   * Fit a StandardScaler to the data.\n   * @param data Array, Tensor, DataFrame or Series object\n   * @returns StandardScaler\n   * @example\n   * const scaler = new StandardScaler()\n   * scaler.fit([1, 2, 3, 4, 5])\n   */\n  StandardScaler.prototype.fit = function (data) {\n    var tensorArray = this.$getTensor(data);\n    this.$std = tensorflowlib_1.default.moments(tensorArray, 0).variance.sqrt();\n    this.$mean = tensorArray.mean(0);\n    return this;\n  };\n  /**\n   * Transform the data using the fitted scaler\n   * @param data Array, Tensor, DataFrame or Series object\n   * @returns Array, Tensor, DataFrame or Series object\n   * @example\n   * const scaler = new StandardScaler()\n   * scaler.fit([1, 2, 3, 4, 5])\n   * scaler.transform([1, 2, 3, 4, 5])\n   * // [0.0, 0.0, 0.0, 0.0, 0.0]\n   * */\n  StandardScaler.prototype.transform = function (data) {\n    var tensorArray = this.$getTensor(data);\n    var outputData = tensorArray.sub(this.$mean).div(this.$std);\n    if (Array.isArray(data)) {\n      return outputData.arraySync();\n    } else if (data instanceof series_1.default) {\n      return new series_1.default(outputData, {\n        index: data.index\n      });\n    } else if (data instanceof frame_1.default) {\n      return new frame_1.default(outputData, {\n        index: data.index,\n        columns: data.columns,\n        config: __assign({}, data.config)\n      });\n    } else {\n      return outputData;\n    }\n  };\n  /**\n   * Fit and transform the data using the fitted scaler\n   * @param data Array, Tensor, DataFrame or Series object\n   * @returns Array, Tensor, DataFrame or Series object\n   * @example\n   * const scaler = new StandardScaler()\n   * scaler.fit([1, 2, 3, 4, 5])\n   * scaler.fitTransform([1, 2, 3, 4, 5])\n   * // [0.0, 0.0, 0.0, 0.0, 0.0]\n   * */\n  StandardScaler.prototype.fitTransform = function (data) {\n    this.fit(data);\n    return this.transform(data);\n  };\n  /**\n   * Inverse transform the data using the fitted scaler\n   * @param data Array, Tensor, DataFrame or Series object\n   * @returns Array, Tensor, DataFrame or Series object\n   * @example\n   * const scaler = new StandardScaler()\n   * scaler.fit([1, 2, 3, 4, 5])\n   * scaler.transform([1, 2, 3, 4, 5])\n   * // [0.0, 0.0, 0.0, 0.0, 0.0]\n   * scaler.inverseTransform([0.0, 0.0, 0.0, 0.0, 0.0])\n   * // [1, 2, 3, 4, 5]\n   * */\n  StandardScaler.prototype.inverseTransform = function (data) {\n    var tensorArray = this.$getTensor(data);\n    var outputData = tensorArray.mul(this.$std).add(this.$mean);\n    if (Array.isArray(data)) {\n      return outputData.arraySync();\n    } else if (data instanceof series_1.default) {\n      return new series_1.default(outputData, {\n        index: data.index\n      });\n    } else if (data instanceof frame_1.default) {\n      return new frame_1.default(outputData, {\n        index: data.index,\n        columns: data.columns,\n        config: __assign({}, data.config)\n      });\n    } else {\n      return outputData;\n    }\n  };\n  return StandardScaler;\n}();\nexports.default = StandardScaler;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","tensorflowlib_1","require","series_1","frame_1","utils_1","utils","default","StandardScaler","$std","tensor1d","$mean","$getTensor","data","$tensorArray","Array","is1DArray","tensor2d","tensor","Tensor","Error","fit","tensorArray","moments","variance","sqrt","mean","transform","outputData","sub","div","isArray","arraySync","index","columns","config","fitTransform","inverseTransform","mul","add"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/transformers/scalers/standard.scaler.js"],"sourcesContent":["\"use strict\";\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tensorflowlib_1 = __importDefault(require(\"../../shared/tensorflowlib\"));\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar frame_1 = __importDefault(require(\"../../core/frame\"));\nvar utils_1 = __importDefault(require(\"../../shared/utils\"));\nvar utils = new utils_1.default();\n/**\n * Standardize features by removing the mean and scaling to unit variance.\n * The standard score of a sample x is calculated as: `z = (x - u) / s`,\n * where `u` is the mean of the training samples, and `s` is the standard deviation of the training samples.\n */\nvar StandardScaler = /** @class */ (function () {\n    function StandardScaler() {\n        this.$std = tensorflowlib_1.default.tensor1d([]);\n        this.$mean = tensorflowlib_1.default.tensor1d([]);\n    }\n    StandardScaler.prototype.$getTensor = function (data) {\n        var $tensorArray;\n        if (data instanceof Array) {\n            if (utils.is1DArray(data)) {\n                $tensorArray = tensorflowlib_1.default.tensor1d(data);\n            }\n            else {\n                $tensorArray = tensorflowlib_1.default.tensor2d(data);\n            }\n        }\n        else if (data instanceof frame_1.default || data instanceof series_1.default) {\n            $tensorArray = data.tensor;\n        }\n        else if (data instanceof tensorflowlib_1.default.Tensor) {\n            $tensorArray = data;\n        }\n        else {\n            throw new Error(\"ParamError: data must be one of Array, DataFrame or Series\");\n        }\n        return $tensorArray;\n    };\n    /**\n     * Fit a StandardScaler to the data.\n     * @param data Array, Tensor, DataFrame or Series object\n     * @returns StandardScaler\n     * @example\n     * const scaler = new StandardScaler()\n     * scaler.fit([1, 2, 3, 4, 5])\n     */\n    StandardScaler.prototype.fit = function (data) {\n        var tensorArray = this.$getTensor(data);\n        this.$std = tensorflowlib_1.default.moments(tensorArray, 0).variance.sqrt();\n        this.$mean = tensorArray.mean(0);\n        return this;\n    };\n    /**\n     * Transform the data using the fitted scaler\n     * @param data Array, Tensor, DataFrame or Series object\n     * @returns Array, Tensor, DataFrame or Series object\n     * @example\n     * const scaler = new StandardScaler()\n     * scaler.fit([1, 2, 3, 4, 5])\n     * scaler.transform([1, 2, 3, 4, 5])\n     * // [0.0, 0.0, 0.0, 0.0, 0.0]\n     * */\n    StandardScaler.prototype.transform = function (data) {\n        var tensorArray = this.$getTensor(data);\n        var outputData = tensorArray.sub(this.$mean).div(this.$std);\n        if (Array.isArray(data)) {\n            return outputData.arraySync();\n        }\n        else if (data instanceof series_1.default) {\n            return new series_1.default(outputData, {\n                index: data.index,\n            });\n        }\n        else if (data instanceof frame_1.default) {\n            return new frame_1.default(outputData, {\n                index: data.index,\n                columns: data.columns,\n                config: __assign({}, data.config),\n            });\n        }\n        else {\n            return outputData;\n        }\n    };\n    /**\n     * Fit and transform the data using the fitted scaler\n     * @param data Array, Tensor, DataFrame or Series object\n     * @returns Array, Tensor, DataFrame or Series object\n     * @example\n     * const scaler = new StandardScaler()\n     * scaler.fit([1, 2, 3, 4, 5])\n     * scaler.fitTransform([1, 2, 3, 4, 5])\n     * // [0.0, 0.0, 0.0, 0.0, 0.0]\n     * */\n    StandardScaler.prototype.fitTransform = function (data) {\n        this.fit(data);\n        return this.transform(data);\n    };\n    /**\n     * Inverse transform the data using the fitted scaler\n     * @param data Array, Tensor, DataFrame or Series object\n     * @returns Array, Tensor, DataFrame or Series object\n     * @example\n     * const scaler = new StandardScaler()\n     * scaler.fit([1, 2, 3, 4, 5])\n     * scaler.transform([1, 2, 3, 4, 5])\n     * // [0.0, 0.0, 0.0, 0.0, 0.0]\n     * scaler.inverseTransform([0.0, 0.0, 0.0, 0.0, 0.0])\n     * // [1, 2, 3, 4, 5]\n     * */\n    StandardScaler.prototype.inverseTransform = function (data) {\n        var tensorArray = this.$getTensor(data);\n        var outputData = tensorArray.mul(this.$std).add(this.$mean);\n        if (Array.isArray(data)) {\n            return outputData.arraySync();\n        }\n        else if (data instanceof series_1.default) {\n            return new series_1.default(outputData, {\n                index: data.index,\n            });\n        }\n        else if (data instanceof frame_1.default) {\n            return new frame_1.default(outputData, {\n                index: data.index,\n                columns: data.columns,\n                config: __assign({}, data.config),\n            });\n        }\n        else {\n            return outputData;\n        }\n    };\n    return StandardScaler;\n}());\nexports.default = StandardScaler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}