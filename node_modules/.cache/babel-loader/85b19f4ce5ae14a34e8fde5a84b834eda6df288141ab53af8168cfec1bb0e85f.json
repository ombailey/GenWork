{"ast":null,"code":"var _jsxFileName = \"/Users/omarbailey/Documents/Coding/React/workout-generator/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport workouts from \"./workouts.json\";\nimport sets from \"./workoutsets.json\";\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDumbbell } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"GenWork\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Generator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nfunction Generator() {\n  _s();\n  const [workoutList, changeWorkoutList] = useState();\n  const randomize = () => {\n    // Get body parts to workout and num of exercises for each body part\n    let bodyParts = document.querySelector(\".body-parts\").value;\n    let num = document.querySelector(\".num-exercises\").value;\n    let count = 0;\n    let exercises = [];\n    let workout = \"\";\n\n    // If there are multiple values split it by the word and\n    if (bodyParts.includes(\"and\")) bodyParts = bodyParts.split(\"and\");\n\n    // Remove any whitespace surrounding each word\n    bodyParts = bodyParts.map(part => part.toLowerCase().trim());\n\n    // Generate random workout\n    for (let part of bodyParts) {\n      while (count < num) {\n        var exercise = workouts[part][Math.floor(Math.random() * workouts[part].length)];\n        var inside = true;\n        while (inside) {\n          if (exercises.includes(exercise)) {\n            exercise = workouts[part][Math.floor(Math.random() * workouts[part].length)];\n          } else {\n            exercises.push(exercise);\n            inside = false;\n          }\n        }\n        count++;\n      }\n      let workoutSet = sets.sets[Math.floor(Math.random() * sets.sets.length)];\n      workout += exercises.join(\"\\n\") + \"\\n\\n\" + `${workoutSet}` + \"\\n\\n\";\n      count = 0;\n      exercises = [];\n      workoutSet = \"\";\n    }\n    changeWorkoutList(workout);\n\n    // Reset input values back to empty\n    document.querySelector(\".body-parts\").value = \"\";\n    document.querySelector(\".num-exercises\").value = \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"generator-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"What Body Part(s) do you want to workout?\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Choose between abs,chest,back,biceps,triceps,shoulders or legs\",\n        size: 55,\n        className: \"body-parts\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"How many exercises for each body part?\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"1\",\n        size: 1,\n        min: 1,\n        max: 8,\n        className: \"num-exercises\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randomize,\n      children: [\"Generate \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faDumbbell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: workoutList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Generator, \"x1uwwGV/ix7XHk7JL3h/RBPyreM=\");\n_c2 = Generator;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Generator\");","map":{"version":3,"names":["workouts","sets","useState","FontAwesomeIcon","faDumbbell","App","Generator","workoutList","changeWorkoutList","randomize","bodyParts","document","querySelector","value","num","count","exercises","workout","includes","split","map","part","toLowerCase","trim","exercise","Math","floor","random","length","inside","push","workoutSet","join"],"sources":["/Users/omarbailey/Documents/Coding/React/workout-generator/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport workouts from \"./workouts.json\";\nimport sets from \"./workoutsets.json\";\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDumbbell } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"title\">GenWork</h1>\n      <Generator />\n    </div>\n  );\n}\n\nfunction Generator() {\n  const [workoutList, changeWorkoutList] = useState();\n\n  const randomize = () => {\n    // Get body parts to workout and num of exercises for each body part\n    let bodyParts = document.querySelector(\".body-parts\").value;\n    let num = document.querySelector(\".num-exercises\").value;\n    let count = 0;\n    let exercises = [];\n    let workout = \"\";\n\n    // If there are multiple values split it by the word and\n    if (bodyParts.includes(\"and\")) bodyParts = bodyParts.split(\"and\");\n\n    // Remove any whitespace surrounding each word\n    bodyParts = bodyParts.map((part) => part.toLowerCase().trim());\n\n    // Generate random workout\n    for (let part of bodyParts) {\n      while (count < num) {\n        var exercise =\n          workouts[part][Math.floor(Math.random() * workouts[part].length)];\n        var inside = true;\n        while (inside) {\n          if (exercises.includes(exercise)) {\n            exercise =\n              workouts[part][Math.floor(Math.random() * workouts[part].length)];\n          } else {\n            exercises.push(exercise);\n            inside = false;\n          }\n        }\n        count++;\n      }\n      let workoutSet = sets.sets[Math.floor(Math.random() * sets.sets.length)];\n      workout += exercises.join(\"\\n\") + \"\\n\\n\" + `${workoutSet}` + \"\\n\\n\";\n      count = 0;\n      exercises = [];\n      workoutSet = \"\";\n    }\n    changeWorkoutList(workout);\n\n    // Reset input values back to empty\n    document.querySelector(\".body-parts\").value = \"\";\n    document.querySelector(\".num-exercises\").value = \"\";\n  };\n\n  return (\n    <div id=\"generator-div\">\n      <label>\n        What Body Part(s) do you want to workout?\n        <input\n          type=\"text\"\n          placeholder=\"Choose between abs,chest,back,biceps,triceps,shoulders or legs\"\n          size={55}\n          className=\"body-parts\"\n          required\n        ></input>\n      </label>\n      <label>\n        How many exercises for each body part?\n        <input\n          type=\"number\"\n          placeholder=\"1\"\n          size={1}\n          min={1}\n          max={8}\n          className=\"num-exercises\"\n          required\n        ></input>\n      </label>\n      <button onClick={randomize}>\n        Generate <FontAwesomeIcon icon={faDumbbell} />\n      </button>\n      <pre>{workoutList}</pre>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,UAAU,QAAQ,mCAAmC;AAAC;AAE/D,SAASC,GAAG,GAAG;EACb,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,OAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa,eAClC,QAAC,SAAS;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACT;AAEV;AAAC,KAPQA,GAAG;AASZ,SAASC,SAAS,GAAG;EAAA;EACnB,MAAM,CAACC,WAAW,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,EAAE;EAEnD,MAAMO,SAAS,GAAG,MAAM;IACtB;IACA,IAAIC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAACC,KAAK;IAC3D,IAAIC,GAAG,GAAGH,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK;IACxD,IAAIE,KAAK,GAAG,CAAC;IACb,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,OAAO,GAAG,EAAE;;IAEhB;IACA,IAAIP,SAAS,CAACQ,QAAQ,CAAC,KAAK,CAAC,EAAER,SAAS,GAAGA,SAAS,CAACS,KAAK,CAAC,KAAK,CAAC;;IAEjE;IACAT,SAAS,GAAGA,SAAS,CAACU,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,EAAE,CAAC;;IAE9D;IACA,KAAK,IAAIF,IAAI,IAAIX,SAAS,EAAE;MAC1B,OAAOK,KAAK,GAAGD,GAAG,EAAE;QAClB,IAAIU,QAAQ,GACVxB,QAAQ,CAACqB,IAAI,CAAC,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG3B,QAAQ,CAACqB,IAAI,CAAC,CAACO,MAAM,CAAC,CAAC;QACnE,IAAIC,MAAM,GAAG,IAAI;QACjB,OAAOA,MAAM,EAAE;UACb,IAAIb,SAAS,CAACE,QAAQ,CAACM,QAAQ,CAAC,EAAE;YAChCA,QAAQ,GACNxB,QAAQ,CAACqB,IAAI,CAAC,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG3B,QAAQ,CAACqB,IAAI,CAAC,CAACO,MAAM,CAAC,CAAC;UACrE,CAAC,MAAM;YACLZ,SAAS,CAACc,IAAI,CAACN,QAAQ,CAAC;YACxBK,MAAM,GAAG,KAAK;UAChB;QACF;QACAd,KAAK,EAAE;MACT;MACA,IAAIgB,UAAU,GAAG9B,IAAI,CAACA,IAAI,CAACwB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG1B,IAAI,CAACA,IAAI,CAAC2B,MAAM,CAAC,CAAC;MACxEX,OAAO,IAAID,SAAS,CAACgB,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAI,GAAED,UAAW,EAAC,GAAG,MAAM;MACnEhB,KAAK,GAAG,CAAC;MACTC,SAAS,GAAG,EAAE;MACde,UAAU,GAAG,EAAE;IACjB;IACAvB,iBAAiB,CAACS,OAAO,CAAC;;IAE1B;IACAN,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAACC,KAAK,GAAG,EAAE;IAChDF,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK,GAAG,EAAE;EACrD,CAAC;EAED,oBACE;IAAK,EAAE,EAAC,eAAe;IAAA,wBACrB;MAAA,qEAEE;QACE,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,gEAAgE;QAC5E,IAAI,EAAE,EAAG;QACT,SAAS,EAAC,YAAY;QACtB,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QACD;IAAA;MAAA;MAAA;MAAA;IAAA,QACH,eACR;MAAA,kEAEE;QACE,IAAI,EAAC,QAAQ;QACb,WAAW,EAAC,GAAG;QACf,IAAI,EAAE,CAAE;QACR,GAAG,EAAE,CAAE;QACP,GAAG,EAAE,CAAE;QACP,SAAS,EAAC,eAAe;QACzB,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QACD;IAAA;MAAA;MAAA;MAAA;IAAA,QACH,eACR;MAAQ,OAAO,EAAEJ,SAAU;MAAA,qCAChB,QAAC,eAAe;QAAC,IAAI,EAAEL;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACvC,eACT;MAAA,UAAMG;IAAW;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACpB;AAEV;AAAC,GA7EQD,SAAS;AAAA,MAATA,SAAS;AA+ElB,eAAeD,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}