{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bitAndBigNumber = bitAndBigNumber;\nexports.bitNotBigNumber = bitNotBigNumber;\nexports.bitOrBigNumber = bitOrBigNumber;\nexports.bitwise = bitwise;\nexports.bitXor = bitXor;\nexports.leftShiftBigNumber = leftShiftBigNumber;\nexports.rightArithShiftBigNumber = rightArithShiftBigNumber;\n\n/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nfunction bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n      return new BigNumber(0);\n    }\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n      return y;\n    }\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n      return x;\n    }\n  }\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\nfunction bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\nfunction bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  var negOne = new BigNumber(-1);\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n    return x.isFinite() ? y : x;\n  }\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\nfunction bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n  var minBits, maxBits, minSign;\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  BigNumber.config({\n    precision: prevPrec\n  });\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n    r += s;\n  }\n  var j = r.length;\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n  var arr = [0];\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\nfunction bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero()) {\n    return y;\n  }\n  if (y.isZero()) {\n    return x;\n  }\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n  var negOne = new BigNumber(-1);\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\nfunction leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\nfunction rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n  return x.div(new BigNumber(2).pow(y)).floor();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","bitAndBigNumber","bitNotBigNumber","bitOrBigNumber","bitwise","bitXor","leftShiftBigNumber","rightArithShiftBigNumber","x","y","isFinite","isInteger","Error","BigNumber","constructor","isNaN","NaN","isZero","eq","isNegative","a","b","prevPrec","precision","config","result","plus","s","negOne","func","xBits","yBits","xSign","ySign","decCoefficientToBinaryString","i","length","_i","minBits","maxBits","minSign","shortLen","longLen","expFuncVal","outVal","twoPower","two","times","d","r","z","j","charAt","xe","e","str","slice","strL","arr","_i2","arrL","parseInt","_j","undefined","reverse","Infinity","lt","Math","pow","toNumber","div","floor"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bitAndBigNumber = bitAndBigNumber;\nexports.bitNotBigNumber = bitNotBigNumber;\nexports.bitOrBigNumber = bitOrBigNumber;\nexports.bitwise = bitwise;\nexports.bitXor = bitXor;\nexports.leftShiftBigNumber = leftShiftBigNumber;\nexports.rightArithShiftBigNumber = rightArithShiftBigNumber;\n\n/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nfunction bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\n\nfunction bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\n\nfunction bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\n\nfunction bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nfunction bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\n\nfunction leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\n\nfunction rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}