{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsInteger = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nvar createIsInteger = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _number.isInteger,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsInteger = createIsInteger;","map":{"version":3,"names":["Object","defineProperty","exports","value","createIsInteger","_collection","require","_number","_factory","name","dependencies","factory","_ref","typed","number","isInteger","BigNumber","x","isInt","Fraction","d","isFinite","n","ArrayMatrix","deepMap"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/utils/isInteger.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsInteger = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nvar createIsInteger = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _number.isInteger,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsInteger = createIsInteger;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAEhC,IAAIC,WAAW,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9C,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIG,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIN,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEI,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEP,OAAO,CAACQ,SAAS;IACzB;IACAC,SAAS,EAAE,SAASA,SAAS,CAACC,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACC,KAAK,EAAE;IAClB,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQ,CAACF,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACG,CAAC,KAAK,CAAC,IAAIC,QAAQ,CAACJ,CAAC,CAACK,CAAC,CAAC;IACnC,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACN,CAAC,EAAE;MACxC,OAAO,CAAC,CAAC,EAAEZ,WAAW,CAACmB,OAAO,EAAEP,CAAC,EAAE,IAAI,CAAC;IAC1C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFf,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}