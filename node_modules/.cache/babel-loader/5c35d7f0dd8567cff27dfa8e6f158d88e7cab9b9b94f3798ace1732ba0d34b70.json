{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPickRandom = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _is = require(\"../../utils/is.js\");\nvar _seededRNG = require(\"./util/seededRNG.js\");\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nvar createPickRandom = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *     math.pickRandom(array, { weights, number, elementWise })\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })\n   *         // returns one of the items in the array\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles, {});\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {\n      return _pickRandom(possibles, options);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, {\n        number: number\n      });\n    },\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {\n      return _pickRandom(possibles, {\n        weights: weights\n      });\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, {\n        number: number,\n        weights: weights\n      });\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, {\n        number: number,\n        weights: weights\n      });\n    }\n  });\n  /**\n   * @param {Array | Matrix} possibles\n   * @param {{\n   *   number?: number,\n   *   weights?: Array | Matrix,\n   *   elementWise: boolean\n   * }} options\n   * @returns {number | Array}\n   * @private\n   */\n\n  function _pickRandom(possibles, _ref2) {\n    var number = _ref2.number,\n      weights = _ref2.weights,\n      _ref2$elementWise = _ref2.elementWise,\n      elementWise = _ref2$elementWise === void 0 ? true : _ref2$elementWise;\n    var single = typeof number === 'undefined';\n    if (single) {\n      number = 1;\n    }\n    var createMatrix = (0, _is.isMatrix)(possibles) ? possibles.create : (0, _is.isMatrix)(weights) ? weights.create : null;\n    possibles = possibles.valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    if (elementWise === true) {\n      possibles = (0, _array.flatten)(possibles);\n      weights = (0, _array.flatten)(weights);\n    }\n    var totalWeights = 0;\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!(0, _is.isNumber)(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n        totalWeights += weights[i];\n      }\n    }\n    var length = possibles.length;\n    var result = [];\n    var pick;\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n      result.push(pick);\n    }\n    return single ? result[0] : createMatrix ? createMatrix(result) : result;\n  }\n});\nexports.createPickRandom = createPickRandom;","map":{"version":3,"names":["Object","defineProperty","exports","value","createPickRandom","_array","require","_factory","_is","_seededRNG","name","dependencies","factory","_ref","typed","config","on","rng","createRng","randomSeed","curr","prev","ArrayMatrix","possibles","_pickRandom","ArrayMatrixObject","options","ArrayMatrixNumber","number","ArrayMatrixArrayMatrix","weights","ArrayMatrixArrayMatrixNumber","ArrayMatrixNumberArrayMatrix","_ref2","_ref2$elementWise","elementWise","single","createMatrix","isMatrix","create","valueOf","flatten","totalWeights","length","Error","i","len","isNumber","result","pick","Math","floor","randKey","_i","_len","push"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/probability/pickRandom.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPickRandom = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _seededRNG = require(\"./util/seededRNG.js\");\n\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nvar createPickRandom = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *     math.pickRandom(array, { weights, number, elementWise })\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })\n   *         // returns one of the items in the array\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles, {});\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {\n      return _pickRandom(possibles, options);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, {\n        number: number\n      });\n    },\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {\n      return _pickRandom(possibles, {\n        weights: weights\n      });\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, {\n        number: number,\n        weights: weights\n      });\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, {\n        number: number,\n        weights: weights\n      });\n    }\n  });\n  /**\n   * @param {Array | Matrix} possibles\n   * @param {{\n   *   number?: number,\n   *   weights?: Array | Matrix,\n   *   elementWise: boolean\n   * }} options\n   * @returns {number | Array}\n   * @private\n   */\n\n  function _pickRandom(possibles, _ref2) {\n    var number = _ref2.number,\n        weights = _ref2.weights,\n        _ref2$elementWise = _ref2.elementWise,\n        elementWise = _ref2$elementWise === void 0 ? true : _ref2$elementWise;\n    var single = typeof number === 'undefined';\n\n    if (single) {\n      number = 1;\n    }\n\n    var createMatrix = (0, _is.isMatrix)(possibles) ? possibles.create : (0, _is.isMatrix)(weights) ? weights.create : null;\n    possibles = possibles.valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    if (elementWise === true) {\n      possibles = (0, _array.flatten)(possibles);\n      weights = (0, _array.flatten)(weights);\n    }\n\n    var totalWeights = 0;\n\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!(0, _is.isNumber)(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n\n        totalWeights += weights[i];\n      }\n    }\n\n    var length = possibles.length;\n    var result = [];\n    var pick;\n\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n\n      result.push(pick);\n    }\n\n    return single ? result[0] : createMatrix ? createMatrix(result) : result;\n  }\n});\nexports.createPickRandom = createPickRandom;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}