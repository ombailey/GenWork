{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.distributeUnevenly = exports.countSpaceSequence = exports.groupBySizes = exports.makeBorderConfig = exports.splitAnsi = exports.normalizeString = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst string_width_1 = __importDefault(require(\"string-width\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst getBorderCharacters_1 = require(\"./getBorderCharacters\");\n/**\n * Converts Windows-style newline to Unix-style\n *\n * @internal\n */\nconst normalizeString = input => {\n  return input.replace(/\\r\\n/g, '\\n');\n};\nexports.normalizeString = normalizeString;\n/**\n * Splits ansi string by newlines\n *\n * @internal\n */\nconst splitAnsi = input => {\n  const lengths = strip_ansi_1.default(input).split('\\n').map(string_width_1.default);\n  const result = [];\n  let startIndex = 0;\n  lengths.forEach(length => {\n    result.push(length === 0 ? '' : slice_ansi_1.default(input, startIndex, startIndex + length));\n    // Plus 1 for the newline character itself\n    startIndex += length + 1;\n  });\n  return result;\n};\nexports.splitAnsi = splitAnsi;\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @internal\n */\nconst makeBorderConfig = border => {\n  return {\n    ...getBorderCharacters_1.getBorderCharacters('honeywell'),\n    ...border\n  };\n};\nexports.makeBorderConfig = makeBorderConfig;\n/**\n * Groups the array into sub-arrays by sizes.\n *\n * @internal\n * @example\n * groupBySizes(['a', 'b', 'c', 'd', 'e'], [2, 1, 2]) = [ ['a', 'b'], ['c'], ['d', 'e'] ]\n */\nconst groupBySizes = (array, sizes) => {\n  let startIndex = 0;\n  return sizes.map(size => {\n    const group = array.slice(startIndex, startIndex + size);\n    startIndex += size;\n    return group;\n  });\n};\nexports.groupBySizes = groupBySizes;\n/**\n * Counts the number of continuous spaces in a string\n *\n * @internal\n * @example\n * countGroupSpaces('a  bc  de f') = 3\n */\nconst countSpaceSequence = input => {\n  var _a, _b;\n  return (_b = (_a = input.match(/\\s+/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n};\nexports.countSpaceSequence = countSpaceSequence;\n/**\n * Creates the non-increasing number array given sum and length\n * whose the difference between maximum and minimum is not greater than 1\n *\n * @internal\n * @example\n * distributeUnevenly(6, 3) = [2, 2, 2]\n * distributeUnevenly(8, 3) = [3, 3, 2]\n */\nconst distributeUnevenly = (sum, length) => {\n  const result = Array.from({\n    length\n  }).fill(Math.floor(sum / length));\n  return result.map((element, index) => {\n    return element + (index < sum % length ? 1 : 0);\n  });\n};\nexports.distributeUnevenly = distributeUnevenly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","distributeUnevenly","countSpaceSequence","groupBySizes","makeBorderConfig","splitAnsi","normalizeString","slice_ansi_1","require","string_width_1","strip_ansi_1","getBorderCharacters_1","input","replace","lengths","default","split","map","result","startIndex","forEach","length","push","border","getBorderCharacters","array","sizes","size","group","slice","_a","_b","match","sum","Array","from","fill","Math","floor","element","index"],"sources":["/Users/omarbailey/node_modules/table/dist/utils.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.distributeUnevenly = exports.countSpaceSequence = exports.groupBySizes = exports.makeBorderConfig = exports.splitAnsi = exports.normalizeString = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst string_width_1 = __importDefault(require(\"string-width\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst getBorderCharacters_1 = require(\"./getBorderCharacters\");\n/**\n * Converts Windows-style newline to Unix-style\n *\n * @internal\n */\nconst normalizeString = (input) => {\n    return input.replace(/\\r\\n/g, '\\n');\n};\nexports.normalizeString = normalizeString;\n/**\n * Splits ansi string by newlines\n *\n * @internal\n */\nconst splitAnsi = (input) => {\n    const lengths = strip_ansi_1.default(input).split('\\n').map(string_width_1.default);\n    const result = [];\n    let startIndex = 0;\n    lengths.forEach((length) => {\n        result.push(length === 0 ? '' : slice_ansi_1.default(input, startIndex, startIndex + length));\n        // Plus 1 for the newline character itself\n        startIndex += length + 1;\n    });\n    return result;\n};\nexports.splitAnsi = splitAnsi;\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @internal\n */\nconst makeBorderConfig = (border) => {\n    return {\n        ...getBorderCharacters_1.getBorderCharacters('honeywell'),\n        ...border,\n    };\n};\nexports.makeBorderConfig = makeBorderConfig;\n/**\n * Groups the array into sub-arrays by sizes.\n *\n * @internal\n * @example\n * groupBySizes(['a', 'b', 'c', 'd', 'e'], [2, 1, 2]) = [ ['a', 'b'], ['c'], ['d', 'e'] ]\n */\nconst groupBySizes = (array, sizes) => {\n    let startIndex = 0;\n    return sizes.map((size) => {\n        const group = array.slice(startIndex, startIndex + size);\n        startIndex += size;\n        return group;\n    });\n};\nexports.groupBySizes = groupBySizes;\n/**\n * Counts the number of continuous spaces in a string\n *\n * @internal\n * @example\n * countGroupSpaces('a  bc  de f') = 3\n */\nconst countSpaceSequence = (input) => {\n    var _a, _b;\n    return (_b = (_a = input.match(/\\s+/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n};\nexports.countSpaceSequence = countSpaceSequence;\n/**\n * Creates the non-increasing number array given sum and length\n * whose the difference between maximum and minimum is not greater than 1\n *\n * @internal\n * @example\n * distributeUnevenly(6, 3) = [2, 2, 2]\n * distributeUnevenly(8, 3) = [3, 3, 2]\n */\nconst distributeUnevenly = (sum, length) => {\n    const result = Array.from({ length }).fill(Math.floor(sum / length));\n    return result.map((element, index) => {\n        return element + (index < sum % length ? 1 : 0);\n    });\n};\nexports.distributeUnevenly = distributeUnevenly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}