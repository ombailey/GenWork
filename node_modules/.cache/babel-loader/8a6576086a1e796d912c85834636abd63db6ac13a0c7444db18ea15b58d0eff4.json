{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinationsWithRep = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _product = require(\"../../utils/product.js\");\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nvar createCombinationsWithRep = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n      if (k < n - 1) {\n        var _prodrange = (0, _product.product)(n, n + k - 1);\n        return _prodrange / (0, _product.product)(1, k);\n      }\n      var prodrange = (0, _product.product)(k + 1, n + k - 1);\n      return prodrange / (0, _product.product)(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n      result = one;\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinationsWithRep = createCombinationsWithRep;\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createCombinationsWithRep","_factory","require","_number","_product","name","dependencies","factory","_ref","typed","numberNumber","n","k","isInteger","TypeError","_prodrange","product","prodrange","BigNumberBigNumber","BigNumber","constructor","result","i","one","nMinusOne","minus","isPositiveInteger","lt","lte","plus","times","dividedBy","gte"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinationsWithRep = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _product = require(\"../../utils/product.js\");\n\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nvar createCombinationsWithRep = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n\n      if (k < n - 1) {\n        var _prodrange = (0, _product.product)(n, n + k - 1);\n\n        return _prodrange / (0, _product.product)(1, k);\n      }\n\n      var prodrange = (0, _product.product)(k + 1, n + k - 1);\n      return prodrange / (0, _product.product)(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    }\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinationsWithRep = createCombinationsWithRep;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}