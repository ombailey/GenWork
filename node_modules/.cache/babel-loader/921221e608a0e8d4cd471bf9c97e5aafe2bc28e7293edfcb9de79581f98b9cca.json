{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createVariance = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _is = require(\"../../utils/is.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nvar createVariance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply,\n    divide = _ref.divide,\n    apply = _ref.apply,\n    isNaN = _ref.isNaN;\n\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    } // calculate the mean and number of elements\n\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num); // calculate the variance\n\n    sum = undefined;\n    (0, _collection.deepForEach)(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n    if (isNaN(sum)) {\n      return sum;\n    }\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n      case 'biased':\n        return divide(sum, num + 1);\n      case 'unbiased':\n        {\n          var zero = (0, _is.isBigNumber)(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n      return apply(array, dim, function (x) {\n        return _var(x, normalization);\n      });\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance');\n    }\n  }\n});\nexports.createVariance = createVariance;","map":{"version":3,"names":["Object","defineProperty","exports","value","createVariance","_collection","require","_is","_factory","_improveErrorMessage","DEFAULT_NORMALIZATION","name","dependencies","factory","_ref","typed","add","subtract","multiply","divide","apply","isNaN","ArrayMatrix","array","_var","ArrayMatrixNumberBigNumber","dim","_varDim","_","args","normalization","sum","num","length","SyntaxError","deepForEach","undefined","err","improveErrorMessage","Error","mean","diff","zero","isBigNumber","mul","x"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/statistics/variance.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createVariance = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nvar createVariance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      apply = _ref.apply,\n      isNaN = _ref.isNaN;\n\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    } // calculate the mean and number of elements\n\n\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num); // calculate the variance\n\n    sum = undefined;\n    (0, _collection.deepForEach)(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n\n    if (isNaN(sum)) {\n      return sum;\n    }\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        {\n          var zero = (0, _is.isBigNumber)(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n\n      return apply(array, dim, function (x) {\n        return _var(x, normalization);\n      });\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance');\n    }\n  }\n});\nexports.createVariance = createVariance;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}