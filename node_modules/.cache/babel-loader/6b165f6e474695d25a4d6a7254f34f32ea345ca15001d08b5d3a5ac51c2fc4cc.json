{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSparse = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nvar createSparse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});\nexports.createSparse = createSparse;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSparse","_factory","require","name","dependencies","factory","_ref","typed","SparseMatrix","_","string","datatype","ArrayMatrix","data","ArrayMatrixString"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/matrix/function/sparse.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSparse = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nvar createSparse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});\nexports.createSparse = createSparse;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAE7B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEnD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC;AAC5C,IAAIJ,YAAY,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC1F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,YAAY,GAAGF,IAAI,CAACE,YAAY;;EAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAASM,CAAC,GAAG;MACf,OAAO,IAAID,YAAY,CAAC,EAAE,CAAC;IAC7B,CAAC;IACDE,MAAM,EAAE,SAASA,MAAM,CAACC,QAAQ,EAAE;MAChC,OAAO,IAAIH,YAAY,CAAC,EAAE,EAAEG,QAAQ,CAAC;IACvC,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACC,IAAI,EAAE;MAC3C,OAAO,IAAIL,YAAY,CAACK,IAAI,CAAC;IAC/B,CAAC;IACD,wBAAwB,EAAE,SAASC,iBAAiB,CAACD,IAAI,EAAEF,QAAQ,EAAE;MACnE,OAAO,IAAIH,YAAY,CAACK,IAAI,EAAEF,QAAQ,CAAC;IACzC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFb,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}