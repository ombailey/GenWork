{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApply = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _is = require(\"../../utils/is.js\");\nvar _IndexError = require(\"../../error/IndexError.js\");\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\nvar createApply = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    isInteger = _ref.isInteger;\n\n  /**\n   * Apply a function that maps an array to a scalar\n   * along a given axis of a matrix or array.\n   * Returns a new matrix or array with one less dimension than the input.\n   *\n   * Syntax:\n   *\n   *     math.apply(A, dim, callback)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [3, 4]]\n   *    const sum = math.sum\n   *\n   *    math.apply(A, 0, sum)             // returns [4, 6]\n   *    math.apply(A, 1, sum)             // returns [3, 7]\n   *\n   * See also:\n   *\n   *    map, filter, forEach\n   *\n   * @param {Array | Matrix} array   The input Matrix\n   * @param {number} dim             The dimension along which the callback is applied\n   * @param {Function} callback      The callback function that is applied. This Function\n   *                                 should take an array or 1-d matrix as an input and\n   *                                 return a number.\n   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.\n   */\n  return typed(name, {\n    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {\n      if (!isInteger(dim)) {\n        throw new TypeError('Integer number expected for dimension');\n      }\n      var size = Array.isArray(mat) ? (0, _array.arraySize)(mat) : mat.size();\n      if (dim < 0 || dim >= size.length) {\n        throw new _IndexError.IndexError(dim, size.length);\n      }\n      if ((0, _is.isMatrix)(mat)) {\n        return mat.create(_apply(mat.valueOf(), dim, callback));\n      } else {\n        return _apply(mat, dim, callback);\n      }\n    }\n  });\n});\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\nexports.createApply = createApply;\nfunction _apply(mat, dim, callback) {\n  var i, ret, tran;\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      return callback(mat);\n    } else {\n      tran = _switch(mat);\n      ret = [];\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _apply(tran[i], dim - 1, callback);\n      }\n      return ret;\n    }\n  } else {\n    ret = [];\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _apply(mat[i], dim - 1, callback);\n    }\n    return ret;\n  }\n}\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\n\nfunction _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n    ret.push(tmp);\n  }\n  return ret;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createApply","_factory","require","_array","_is","_IndexError","name","dependencies","factory","_ref","typed","isInteger","ArrayMatrixNumberBigNumberFunction","mat","dim","callback","TypeError","size","Array","isArray","arraySize","length","IndexError","isMatrix","create","_apply","valueOf","i","ret","tran","_switch","I","J","j","tmp","push"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/apply.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApply = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _IndexError = require(\"../../error/IndexError.js\");\n\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\nvar createApply = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n\n  /**\n   * Apply a function that maps an array to a scalar\n   * along a given axis of a matrix or array.\n   * Returns a new matrix or array with one less dimension than the input.\n   *\n   * Syntax:\n   *\n   *     math.apply(A, dim, callback)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [3, 4]]\n   *    const sum = math.sum\n   *\n   *    math.apply(A, 0, sum)             // returns [4, 6]\n   *    math.apply(A, 1, sum)             // returns [3, 7]\n   *\n   * See also:\n   *\n   *    map, filter, forEach\n   *\n   * @param {Array | Matrix} array   The input Matrix\n   * @param {number} dim             The dimension along which the callback is applied\n   * @param {Function} callback      The callback function that is applied. This Function\n   *                                 should take an array or 1-d matrix as an input and\n   *                                 return a number.\n   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.\n   */\n  return typed(name, {\n    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {\n      if (!isInteger(dim)) {\n        throw new TypeError('Integer number expected for dimension');\n      }\n\n      var size = Array.isArray(mat) ? (0, _array.arraySize)(mat) : mat.size();\n\n      if (dim < 0 || dim >= size.length) {\n        throw new _IndexError.IndexError(dim, size.length);\n      }\n\n      if ((0, _is.isMatrix)(mat)) {\n        return mat.create(_apply(mat.valueOf(), dim, callback));\n      } else {\n        return _apply(mat, dim, callback);\n      }\n    }\n  });\n});\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\nexports.createApply = createApply;\n\nfunction _apply(mat, dim, callback) {\n  var i, ret, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      return callback(mat);\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _apply(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _apply(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n}\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n\n    ret.push(tmp);\n  }\n\n  return ret;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}