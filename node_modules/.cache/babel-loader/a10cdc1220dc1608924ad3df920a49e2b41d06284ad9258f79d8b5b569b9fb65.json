{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAddScalar = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': _index.addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n});\nexports.createAddScalar = createAddScalar;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAddScalar","_factory","require","_index","name","dependencies","factory","_ref","typed","addNumber","ComplexComplex","x","y","add","BigNumberBigNumber","plus","FractionFraction","UnitUnit","undefined","Error","equalBase","res","clone","fixPrefix"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAddScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': _index.addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n});\nexports.createAddScalar = createAddScalar;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAEhC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,MAAM,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAEnD,IAAIE,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIL,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,MAAM,CAACM,SAAS;IAClC,kBAAkB,EAAE,SAASC,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASE,kBAAkB,CAACH,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACI,IAAI,CAACH,CAAC,CAAC;IAClB,CAAC;IACD,oBAAoB,EAAE,SAASI,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,YAAY,EAAE,SAASK,QAAQ,CAACN,CAAC,EAAEC,CAAC,EAAE;MACpC,IAAID,CAAC,CAACZ,KAAK,KAAK,IAAI,IAAIY,CAAC,CAACZ,KAAK,KAAKmB,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;MAClH,IAAIP,CAAC,CAACb,KAAK,KAAK,IAAI,IAAIa,CAAC,CAACb,KAAK,KAAKmB,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;MAClH,IAAI,CAACR,CAAC,CAACS,SAAS,CAACR,CAAC,CAAC,EAAE,MAAM,IAAIO,KAAK,CAAC,oBAAoB,CAAC;MAC1D,IAAIE,GAAG,GAAGV,CAAC,CAACW,KAAK,EAAE;MACnBD,GAAG,CAACtB,KAAK,GAAG,IAAI,CAACsB,GAAG,CAACtB,KAAK,EAAEa,CAAC,CAACb,KAAK,CAAC;MACpCsB,GAAG,CAACE,SAAS,GAAG,KAAK;MACrB,OAAOF,GAAG;IACZ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFvB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}