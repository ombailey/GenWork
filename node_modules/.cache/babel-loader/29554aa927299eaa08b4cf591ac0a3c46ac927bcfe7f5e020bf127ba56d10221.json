{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProd = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nvar createProd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    multiplyScalar = _ref.multiplyScalar,\n    numeric = _ref.numeric;\n\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\n    },\n\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n\n  function _prod(array) {\n    var prod;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n    return prod;\n  }\n});\nexports.createProd = createProd;","map":{"version":3,"names":["Object","defineProperty","exports","value","createProd","_collection","require","_factory","_improveErrorMessage","name","dependencies","factory","_ref","typed","config","multiplyScalar","numeric","_prod","ArrayMatrixNumberBigNumber","array","dim","Error","_","args","prod","deepForEach","undefined","err","improveErrorMessage","number"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/statistics/prod.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProd = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nvar createProd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      numeric = _ref.numeric;\n\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n\n  function _prod(array) {\n    var prod;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n});\nexports.createProd = createProd;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAE3B,IAAIC,WAAW,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAEpE,IAAIG,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,CAAC;AACnE,IAAIN,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,cAAc,GAAGH,IAAI,CAACG,cAAc;IACpCC,OAAO,GAAGJ,IAAI,CAACI,OAAO;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,KAAK;IACvB;IACA,oCAAoC,EAAE,SAASC,0BAA0B,CAACC,KAAK,EAAEC,GAAG,EAAE;MACpF;MACA,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;IACxD,CAAC;;IACD;IACA,KAAK,EAAE,SAASC,CAAC,CAACC,IAAI,EAAE;MACtB,OAAON,KAAK,CAACM,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASN,KAAK,CAACE,KAAK,EAAE;IACpB,IAAIK,IAAI;IACR,CAAC,CAAC,EAAEnB,WAAW,CAACoB,WAAW,EAAEN,KAAK,EAAE,UAAUhB,KAAK,EAAE;MACnD,IAAI;QACFqB,IAAI,GAAGA,IAAI,KAAKE,SAAS,GAAGvB,KAAK,GAAGY,cAAc,CAACS,IAAI,EAAErB,KAAK,CAAC;MACjE,CAAC,CAAC,OAAOwB,GAAG,EAAE;QACZ,MAAM,CAAC,CAAC,EAAEnB,oBAAoB,CAACoB,mBAAmB,EAAED,GAAG,EAAE,MAAM,EAAExB,KAAK,CAAC;MACzE;IACF,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI,OAAOqB,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAGR,OAAO,CAACQ,IAAI,EAAEV,MAAM,CAACe,MAAM,CAAC;IACrC;IAEA,IAAIL,IAAI,KAAKE,SAAS,EAAE;MACtB,MAAM,IAAIL,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,OAAOG,IAAI;EACb;AACF,CAAC,CAAC;AACFtB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}