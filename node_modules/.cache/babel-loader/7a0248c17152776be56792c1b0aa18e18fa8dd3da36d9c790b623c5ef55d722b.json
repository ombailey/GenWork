{"ast":null,"code":"\"use strict\";\n\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tensorflowlib_1 = __importDefault(require(\"../../shared/tensorflowlib\"));\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar utils_1 = __importDefault(require(\"../../shared/utils\"));\nvar utils = new utils_1.default();\n/**\n * Encode target labels with value between 0 and n_classes-1.\n */\nvar LabelEncoder = /** @class */function () {\n  function LabelEncoder() {\n    this.$labels = {};\n  }\n  LabelEncoder.prototype.$getData = function (data) {\n    var $data;\n    if (data instanceof Array) {\n      if (utils.is1DArray(data)) {\n        $data = data;\n      } else {\n        throw new Error(\"ValueError: data must be a 1D array.\");\n      }\n    } else if (data instanceof series_1.default) {\n      $data = data.values;\n    } else if (data instanceof tensorflowlib_1.default.Tensor) {\n      $data = data.arraySync();\n    } else {\n      throw new Error(\"ParamError: data must be one of Array, 1d Tensor or Series.\");\n    }\n    return $data;\n  };\n  /**\n   * Maps values to unique integer labels between 0 and n_classes-1.\n   * @param data 1d array of labels, Tensor, or  Series to fit.\n   * @example\n   * ```\n   * const encoder = new LabelEncoder()\n   * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n   * ```\n  */\n  LabelEncoder.prototype.fit = function (data) {\n    var $data = this.$getData(data);\n    var dataSet = Array.from(new Set($data));\n    var tempObj = {};\n    dataSet.forEach(function (value, index) {\n      tempObj[value] = index;\n    });\n    this.$labels = tempObj;\n    return this;\n  };\n  /**\n   * Encode labels with value between 0 and n_classes-1.\n   * @param data 1d array of labels, Tensor, or  Series to be encoded.\n   * @example\n   * ```\n   * const encoder = new LabelEncoder()\n   * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n   * console.log(encoder.transform([\"a\", \"b\", \"c\", \"d\"]))\n   * // [0, 1, 2, 3]\n   * ```\n  */\n  LabelEncoder.prototype.transform = function (data) {\n    var _this = this;\n    var $data = this.$getData(data);\n    var encodedData = $data.map(function (value) {\n      var label = _this.$labels[value] !== undefined ? _this.$labels[value] : -1;\n      return label;\n    });\n    if (data instanceof Array) {\n      return encodedData;\n    } else if (data instanceof series_1.default) {\n      return new series_1.default(encodedData);\n    } else {\n      return tensorflowlib_1.default.tensor1d(encodedData);\n    }\n  };\n  /**\n   * Fit and transform data in one step.\n   * @param data 1d array of labels, Tensor, or  Series to be encoded.\n   * @example\n   * ```\n   * const encoder = new LabelEncoder()\n   * encoder.fitTransform([\"a\", \"b\", \"c\", \"d\"])\n   * // [0, 1, 2, 3]\n   * ```\n   */\n  LabelEncoder.prototype.fitTransform = function (data) {\n    this.fit(data);\n    return this.transform(data);\n  };\n  /**\n   * Inverse transform values back to original values.\n   * @param data 1d array of labels, Tensor, or  Series to be decoded.\n   * @example\n   * ```\n   * const encoder = new LabelEncoder()\n   * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n   * console.log(encoder.inverseTransform([0, 1, 2, 3]))\n   * // [\"a\", \"b\", \"c\", \"d\"]\n   * ```\n  */\n  LabelEncoder.prototype.inverseTransform = function (data) {\n    var _this = this;\n    var $data = this.$getData(data);\n    var tempData = $data.map(function (value) {\n      return Object.keys(_this.$labels).find(function (key) {\n        return _this.$labels[key] === value;\n      });\n    });\n    var decodedData = tempData.map(function (value) {\n      if (isNaN(parseInt(value))) {\n        return value;\n      } else {\n        return Number(value);\n      }\n    });\n    if (data instanceof Array) {\n      return decodedData;\n    } else if (data instanceof series_1.default) {\n      return new series_1.default(decodedData);\n    } else {\n      return tensorflowlib_1.default.tensor1d(decodedData);\n    }\n  };\n  Object.defineProperty(LabelEncoder.prototype, \"nClasses\", {\n    /**\n     * Get the number of classes.\n     * @returns number of classes.\n     * @example\n     * ```\n     * const encoder = new LabelEncoder()\n     * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n     * console.log(encoder.nClasses)\n     * // 4\n     * ```\n     */\n    get: function () {\n      return Object.keys(this.$labels).length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LabelEncoder.prototype, \"classes\", {\n    /**\n     * Get the mapping of classes to integers.\n     * @returns mapping of classes to integers.\n     * @example\n     * ```\n     * const encoder = new LabelEncoder()\n     * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n     * console.log(encoder.classes)\n     * // {a: 0, b: 1, c: 2, d: 3}\n     * ```\n    */\n    get: function () {\n      return this.$labels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return LabelEncoder;\n}();\nexports.default = LabelEncoder;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","tensorflowlib_1","require","series_1","utils_1","utils","default","LabelEncoder","$labels","prototype","$getData","data","$data","Array","is1DArray","Error","values","Tensor","arraySync","fit","dataSet","from","Set","tempObj","forEach","index","transform","_this","encodedData","map","label","undefined","tensor1d","fitTransform","inverseTransform","tempData","keys","find","key","decodedData","isNaN","parseInt","Number","get","length","enumerable","configurable"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/transformers/encoders/label.encoder.js"],"sourcesContent":["\"use strict\";\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tensorflowlib_1 = __importDefault(require(\"../../shared/tensorflowlib\"));\nvar series_1 = __importDefault(require(\"../../core/series\"));\nvar utils_1 = __importDefault(require(\"../../shared/utils\"));\nvar utils = new utils_1.default();\n/**\n * Encode target labels with value between 0 and n_classes-1.\n */\nvar LabelEncoder = /** @class */ (function () {\n    function LabelEncoder() {\n        this.$labels = {};\n    }\n    LabelEncoder.prototype.$getData = function (data) {\n        var $data;\n        if (data instanceof Array) {\n            if (utils.is1DArray(data)) {\n                $data = data;\n            }\n            else {\n                throw new Error(\"ValueError: data must be a 1D array.\");\n            }\n        }\n        else if (data instanceof series_1.default) {\n            $data = data.values;\n        }\n        else if (data instanceof tensorflowlib_1.default.Tensor) {\n            $data = data.arraySync();\n        }\n        else {\n            throw new Error(\"ParamError: data must be one of Array, 1d Tensor or Series.\");\n        }\n        return $data;\n    };\n    /**\n     * Maps values to unique integer labels between 0 and n_classes-1.\n     * @param data 1d array of labels, Tensor, or  Series to fit.\n     * @example\n     * ```\n     * const encoder = new LabelEncoder()\n     * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n     * ```\n    */\n    LabelEncoder.prototype.fit = function (data) {\n        var $data = this.$getData(data);\n        var dataSet = Array.from(new Set($data));\n        var tempObj = {};\n        dataSet.forEach(function (value, index) {\n            tempObj[value] = index;\n        });\n        this.$labels = tempObj;\n        return this;\n    };\n    /**\n     * Encode labels with value between 0 and n_classes-1.\n     * @param data 1d array of labels, Tensor, or  Series to be encoded.\n     * @example\n     * ```\n     * const encoder = new LabelEncoder()\n     * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n     * console.log(encoder.transform([\"a\", \"b\", \"c\", \"d\"]))\n     * // [0, 1, 2, 3]\n     * ```\n    */\n    LabelEncoder.prototype.transform = function (data) {\n        var _this = this;\n        var $data = this.$getData(data);\n        var encodedData = $data.map(function (value) {\n            var label = _this.$labels[value] !== undefined ? _this.$labels[value] : -1;\n            return label;\n        });\n        if (data instanceof Array) {\n            return encodedData;\n        }\n        else if (data instanceof series_1.default) {\n            return new series_1.default(encodedData);\n        }\n        else {\n            return tensorflowlib_1.default.tensor1d(encodedData);\n        }\n    };\n    /**\n     * Fit and transform data in one step.\n     * @param data 1d array of labels, Tensor, or  Series to be encoded.\n     * @example\n     * ```\n     * const encoder = new LabelEncoder()\n     * encoder.fitTransform([\"a\", \"b\", \"c\", \"d\"])\n     * // [0, 1, 2, 3]\n     * ```\n     */\n    LabelEncoder.prototype.fitTransform = function (data) {\n        this.fit(data);\n        return this.transform(data);\n    };\n    /**\n     * Inverse transform values back to original values.\n     * @param data 1d array of labels, Tensor, or  Series to be decoded.\n     * @example\n     * ```\n     * const encoder = new LabelEncoder()\n     * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n     * console.log(encoder.inverseTransform([0, 1, 2, 3]))\n     * // [\"a\", \"b\", \"c\", \"d\"]\n     * ```\n    */\n    LabelEncoder.prototype.inverseTransform = function (data) {\n        var _this = this;\n        var $data = this.$getData(data);\n        var tempData = $data.map(function (value) {\n            return Object.keys(_this.$labels).find(function (key) { return _this.$labels[key] === value; });\n        });\n        var decodedData = tempData.map(function (value) {\n            if (isNaN(parseInt(value))) {\n                return value;\n            }\n            else {\n                return Number(value);\n            }\n        });\n        if (data instanceof Array) {\n            return decodedData;\n        }\n        else if (data instanceof series_1.default) {\n            return new series_1.default(decodedData);\n        }\n        else {\n            return tensorflowlib_1.default.tensor1d(decodedData);\n        }\n    };\n    Object.defineProperty(LabelEncoder.prototype, \"nClasses\", {\n        /**\n         * Get the number of classes.\n         * @returns number of classes.\n         * @example\n         * ```\n         * const encoder = new LabelEncoder()\n         * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n         * console.log(encoder.nClasses)\n         * // 4\n         * ```\n         */\n        get: function () {\n            return Object.keys(this.$labels).length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LabelEncoder.prototype, \"classes\", {\n        /**\n         * Get the mapping of classes to integers.\n         * @returns mapping of classes to integers.\n         * @example\n         * ```\n         * const encoder = new LabelEncoder()\n         * encoder.fit([\"a\", \"b\", \"c\", \"d\"])\n         * console.log(encoder.classes)\n         * // {a: 0, b: 1, c: 2, d: 3}\n         * ```\n        */\n        get: function () {\n            return this.$labels;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return LabelEncoder;\n}());\nexports.default = LabelEncoder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}