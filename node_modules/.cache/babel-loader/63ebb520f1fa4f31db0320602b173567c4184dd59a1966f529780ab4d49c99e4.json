{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSign = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nvar createSign = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    _BigNumber = _ref.BigNumber,\n    complex = _ref.complex,\n    _Fraction = _ref.Fraction;\n\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: _index.signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex((0, _index.signNumber)(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    }\n  });\n});\nexports.createSign = createSign;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSign","_factory","require","_collection","_index","name","dependencies","factory","_ref","typed","_BigNumber","BigNumber","complex","_Fraction","Fraction","number","signNumber","Complex","x","im","re","sign","cmp","s","ArrayMatrix","deepMap","Unit"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/sign.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSign = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nvar createSign = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber,\n      complex = _ref.complex,\n      _Fraction = _ref.Fraction;\n\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: _index.signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex((0, _index.signNumber)(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    }\n  });\n});\nexports.createSign = createSign;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAE3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIE,MAAM,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAEnD,IAAIG,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC;AAChE,IAAIN,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,UAAU,GAAGF,IAAI,CAACG,SAAS;IAC3BC,OAAO,GAAGJ,IAAI,CAACI,OAAO;IACtBC,SAAS,GAAGL,IAAI,CAACM,QAAQ;;EAE7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAE;IACjBU,MAAM,EAAEX,MAAM,CAACY,UAAU;IACzBC,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,EAAE,KAAK,CAAC,GAAGP,OAAO,CAAC,CAAC,CAAC,EAAER,MAAM,CAACY,UAAU,EAAEE,CAAC,CAACE,EAAE,CAAC,CAAC,GAAGF,CAAC,CAACG,IAAI,EAAE;IACtE,CAAC;IACDV,SAAS,EAAE,SAASA,SAAS,CAACO,CAAC,EAAE;MAC/B,OAAO,IAAIR,UAAU,CAACQ,CAAC,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC;IACDR,QAAQ,EAAE,SAASA,QAAQ,CAACI,CAAC,EAAE;MAC7B,OAAO,IAAIL,SAAS,CAACK,CAAC,CAACK,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACN,CAAC,EAAE;MACxC;MACA,OAAO,CAAC,CAAC,EAAEf,WAAW,CAACsB,OAAO,EAAEP,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IAChD,CAAC;IACDQ,IAAI,EAAE,SAASA,IAAI,CAACR,CAAC,EAAE;MACrB,OAAO,IAAI,CAACA,CAAC,CAACnB,KAAK,CAAC;IACtB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}