{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRangeNode = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _operators = require(\"../operators.js\");\nvar name = 'RangeNode';\nvar dependencies = ['Node'];\nvar createRangeNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate inputs\n\n    if (!(0, _is.isNode)(start)) throw new TypeError('Node expected');\n    if (!(0, _is.isNode)(end)) throw new TypeError('Node expected');\n    if (step && !(0, _is.isNode)(step)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n    this.start = start; // included lower-bound\n\n    this.end = end; // included upper-bound\n\n    this.step = step || null; // optional step\n  }\n\n  RangeNode.prototype = new Node();\n  RangeNode.prototype.type = 'RangeNode';\n  RangeNode.prototype.isRangeNode = true;\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return (0, _is.isSymbolNode)(node) && node.name === 'end';\n    });\n    return endSymbols.length > 0;\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  RangeNode.prototype._compile = function (math, argNames) {\n    var range = math.range;\n    var evalStart = this.start._compile(math, argNames);\n    var evalEnd = this.end._compile(math, argNames);\n    if (this.step) {\n      var evalStep = this.step._compile(math, argNames);\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));\n      };\n    } else {\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var parens = {};\n    var startPrecedence = (0, _operators.getPrecedence)(node.start, parenthesis);\n    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';\n    if (node.step) {\n      var stepPrecedence = (0, _operators.getPrecedence)(node.step, parenthesis);\n      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';\n    }\n    var endPrecedence = (0, _operators.getPrecedence)(node.end, parenthesis);\n    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';\n    return parens;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toString(options);\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n    str = start;\n    if (this.step) {\n      var step = this.step.toString(options);\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n      str += ':' + step;\n    }\n    var end = this.end.toString(options);\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n    str += ':' + end;\n    return str;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  RangeNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RangeNode',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate an RangeNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RangeNode\", \"start\": ..., \"end\": ..., \"step\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RangeNode}\n   */\n\n  RangeNode.fromJSON = function (json) {\n    return new RangeNode(json.start, json.end, json.step);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toHTML(options);\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    str = start;\n    if (this.step) {\n      var step = this.step.toHTML(options);\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n    var end = this.end.toHTML(options);\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n    return str;\n  };\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n    var str = this.start.toTex(options);\n    if (parens.start) {\n      str = \"\\\\left(\".concat(str, \"\\\\right)\");\n    }\n    if (this.step) {\n      var step = this.step.toTex(options);\n      if (parens.step) {\n        step = \"\\\\left(\".concat(step, \"\\\\right)\");\n      }\n      str += ':' + step;\n    }\n    var end = this.end.toTex(options);\n    if (parens.end) {\n      end = \"\\\\left(\".concat(end, \"\\\\right)\");\n    }\n    str += ':' + end;\n    return str;\n  };\n  return RangeNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createRangeNode = createRangeNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","createRangeNode","_is","require","_factory","_operators","name","dependencies","factory","_ref","Node","RangeNode","start","end","step","SyntaxError","isNode","TypeError","arguments","length","Error","prototype","type","isRangeNode","needsEnd","endSymbols","filter","node","isSymbolNode","_compile","math","argNames","range","evalStart","evalEnd","evalStep","evalRangeNode","scope","args","context","forEach","callback","map","_ifNode","clone","calculateNecessaryParentheses","parenthesis","precedence","getPrecedence","parens","startPrecedence","stepPrecedence","endPrecedence","_toString","options","str","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/node/RangeNode.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRangeNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _operators = require(\"../operators.js\");\n\nvar name = 'RangeNode';\nvar dependencies = ['Node'];\nvar createRangeNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate inputs\n\n\n    if (!(0, _is.isNode)(start)) throw new TypeError('Node expected');\n    if (!(0, _is.isNode)(end)) throw new TypeError('Node expected');\n    if (step && !(0, _is.isNode)(step)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n    this.start = start; // included lower-bound\n\n    this.end = end; // included upper-bound\n\n    this.step = step || null; // optional step\n  }\n\n  RangeNode.prototype = new Node();\n  RangeNode.prototype.type = 'RangeNode';\n  RangeNode.prototype.isRangeNode = true;\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return (0, _is.isSymbolNode)(node) && node.name === 'end';\n    });\n    return endSymbols.length > 0;\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  RangeNode.prototype._compile = function (math, argNames) {\n    var range = math.range;\n\n    var evalStart = this.start._compile(math, argNames);\n\n    var evalEnd = this.end._compile(math, argNames);\n\n    if (this.step) {\n      var evalStep = this.step._compile(math, argNames);\n\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));\n      };\n    } else {\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n\n\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n\n\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var parens = {};\n    var startPrecedence = (0, _operators.getPrecedence)(node.start, parenthesis);\n    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';\n\n    if (node.step) {\n      var stepPrecedence = (0, _operators.getPrecedence)(node.step, parenthesis);\n      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';\n    }\n\n    var endPrecedence = (0, _operators.getPrecedence)(node.end, parenthesis);\n    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';\n    return parens;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toString(options);\n\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toString(options);\n\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toString(options);\n\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n\n    str += ':' + end;\n    return str;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RangeNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RangeNode',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate an RangeNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RangeNode\", \"start\": ..., \"end\": ..., \"step\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RangeNode}\n   */\n\n\n  RangeNode.fromJSON = function (json) {\n    return new RangeNode(json.start, json.end, json.step);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toHTML(options);\n\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toHTML(options);\n\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n\n    var end = this.end.toHTML(options);\n\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n    return str;\n  };\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n    var str = this.start.toTex(options);\n\n    if (parens.start) {\n      str = \"\\\\left(\".concat(str, \"\\\\right)\");\n    }\n\n    if (this.step) {\n      var step = this.step.toTex(options);\n\n      if (parens.step) {\n        step = \"\\\\left(\".concat(step, \"\\\\right)\");\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toTex(options);\n\n    if (parens.end) {\n      end = \"\\\\left(\".concat(end, \"\\\\right)\");\n    }\n\n    str += ':' + end;\n    return str;\n  };\n\n  return RangeNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createRangeNode = createRangeNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}