{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSplitUnit = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar name = 'splitUnit';\nvar dependencies = ['typed'];\nvar createSplitUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  return typed(name, {\n    'Unit, Array': function UnitArray(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n});\nexports.createSplitUnit = createSplitUnit;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSplitUnit","_factory","require","name","dependencies","factory","_ref","typed","UnitArray","unit","parts","splitUnit"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/unit/function/splitUnit.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSplitUnit = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'splitUnit';\nvar dependencies = ['typed'];\nvar createSplitUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  return typed(name, {\n    'Unit, Array': function UnitArray(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n});\nexports.createSplitUnit = createSplitUnit;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAEhC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEnD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIJ,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,aAAa,EAAE,SAASK,SAAS,CAACC,IAAI,EAAEC,KAAK,EAAE;MAC7C,OAAOD,IAAI,CAACE,SAAS,CAACD,KAAK,CAAC;IAC9B;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFZ,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}