{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSimplifyCore = void 0;\nvar _is = require(\"../../../utils/is.js\");\nvar _factory = require(\"../../../utils/factory.js\");\nvar name = 'simplifyCore';\nvar dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];\nvar createSimplifyCore = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var equal = _ref.equal,\n    isZero = _ref.isZero,\n    add = _ref.add,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply,\n    divide = _ref.divide,\n    pow = _ref.pow,\n    ConstantNode = _ref.ConstantNode,\n    OperatorNode = _ref.OperatorNode,\n    FunctionNode = _ref.FunctionNode,\n    ParenthesisNode = _ref.ParenthesisNode;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  /**\n   * simplifyCore() performs single pass simplification suitable for\n   * applications requiring ultimate performance. In contrast, simplify()\n   * extends simplifyCore() with additional passes to provide deeper\n   * simplification.\n   *\n   * Syntax:\n   *\n   *     simplify.simplifyCore(expr)\n   *\n   * Examples:\n   *\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify.simpifyCore(f)                          // Node {2 * x}\n   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}\n   *\n   * See also:\n   *\n   *     derivative\n   *\n   * @param {Node} node\n   *     The expression to be simplified\n   */\n\n  function simplifyCore(node) {\n    if ((0, _is.isOperatorNode)(node) && node.isUnary()) {\n      var a0 = simplifyCore(node.args[0]);\n      if (node.op === '+') {\n        // unary plus\n        return a0;\n      }\n      if (node.op === '-') {\n        // unary minus\n        if ((0, _is.isOperatorNode)(a0)) {\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          } else if (a0.isBinary() && a0.fn === 'subtract') {\n            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n          }\n        }\n        return new OperatorNode(node.op, node.fn, [a0]);\n      }\n    } else if ((0, _is.isOperatorNode)(node) && node.isBinary()) {\n      var _a = simplifyCore(node.args[0]);\n      var a1 = simplifyCore(node.args[1]);\n      if (node.op === '+') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return a1;\n          } else if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(add(_a.value, a1.value));\n          }\n        }\n        if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {\n          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);\n        }\n        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);\n      } else if (node.op === '-') {\n        if ((0, _is.isConstantNode)(_a) && a1) {\n          if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(subtract(_a.value, a1.value));\n          } else if (isZero(_a.value)) {\n            return new OperatorNode('-', 'unaryMinus', [a1]);\n          }\n        } // if (node.fn === \"subtract\" && node.args.length === 2) {\n\n        if (node.fn === 'subtract') {\n          if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {\n            return _a;\n          }\n          if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {\n            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));\n          }\n          return new OperatorNode(node.op, node.fn, [_a, a1]);\n        }\n      } else if (node.op === '*') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          } else if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(multiply(_a.value, a1.value));\n          }\n        }\n        if ((0, _is.isConstantNode)(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === node.op) {\n            var a00 = _a.args[0];\n            if ((0, _is.isConstantNode)(a00)) {\n              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));\n              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left\n            }\n          }\n\n          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      } else if (node.op === '/') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if ((0, _is.isConstantNode)(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {\n            return new ConstantNode(divide(_a.value, a1.value));\n          }\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      } else if (node.op === '^') {\n        if ((0, _is.isConstantNode)(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          } else {\n            if ((0, _is.isConstantNode)(_a)) {\n              // fold constant\n              return new ConstantNode(pow(_a.value, a1.value));\n            } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === '^') {\n              var a01 = _a.args[1];\n              if ((0, _is.isConstantNode)(a01)) {\n                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);\n              }\n            }\n          }\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n    } else if ((0, _is.isParenthesisNode)(node)) {\n      var c = simplifyCore(node.content);\n      if ((0, _is.isParenthesisNode)(c) || (0, _is.isSymbolNode)(c) || (0, _is.isConstantNode)(c)) {\n        return c;\n      }\n      return new ParenthesisNode(c);\n    } else if ((0, _is.isFunctionNode)(node)) {\n      var args = node.args.map(simplifyCore).map(function (arg) {\n        return (0, _is.isParenthesisNode)(arg) ? arg.content : arg;\n      });\n      return new FunctionNode(simplifyCore(node.fn), args);\n    } else {// cannot simplify\n    }\n    return node;\n  }\n  return simplifyCore;\n});\nexports.createSimplifyCore = createSimplifyCore;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSimplifyCore","_is","require","_factory","name","dependencies","factory","_ref","equal","isZero","add","subtract","multiply","divide","pow","ConstantNode","OperatorNode","FunctionNode","ParenthesisNode","node0","node1","simplifyCore","node","isOperatorNode","isUnary","a0","args","op","isBinary","fn","_a","a1","isConstantNode","a00","a00a1","implicit","a01","isParenthesisNode","c","content","isSymbolNode","isFunctionNode","map","arg"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyCore.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSimplifyCore = void 0;\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'simplifyCore';\nvar dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];\nvar createSimplifyCore = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var equal = _ref.equal,\n      isZero = _ref.isZero,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      ConstantNode = _ref.ConstantNode,\n      OperatorNode = _ref.OperatorNode,\n      FunctionNode = _ref.FunctionNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  /**\n   * simplifyCore() performs single pass simplification suitable for\n   * applications requiring ultimate performance. In contrast, simplify()\n   * extends simplifyCore() with additional passes to provide deeper\n   * simplification.\n   *\n   * Syntax:\n   *\n   *     simplify.simplifyCore(expr)\n   *\n   * Examples:\n   *\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify.simpifyCore(f)                          // Node {2 * x}\n   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}\n   *\n   * See also:\n   *\n   *     derivative\n   *\n   * @param {Node} node\n   *     The expression to be simplified\n   */\n\n  function simplifyCore(node) {\n    if ((0, _is.isOperatorNode)(node) && node.isUnary()) {\n      var a0 = simplifyCore(node.args[0]);\n\n      if (node.op === '+') {\n        // unary plus\n        return a0;\n      }\n\n      if (node.op === '-') {\n        // unary minus\n        if ((0, _is.isOperatorNode)(a0)) {\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          } else if (a0.isBinary() && a0.fn === 'subtract') {\n            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [a0]);\n      }\n    } else if ((0, _is.isOperatorNode)(node) && node.isBinary()) {\n      var _a = simplifyCore(node.args[0]);\n\n      var a1 = simplifyCore(node.args[1]);\n\n      if (node.op === '+') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return a1;\n          } else if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(add(_a.value, a1.value));\n          }\n        }\n\n        if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {\n          return _a;\n        }\n\n        if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {\n          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);\n        }\n\n        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);\n      } else if (node.op === '-') {\n        if ((0, _is.isConstantNode)(_a) && a1) {\n          if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(subtract(_a.value, a1.value));\n          } else if (isZero(_a.value)) {\n            return new OperatorNode('-', 'unaryMinus', [a1]);\n          }\n        } // if (node.fn === \"subtract\" && node.args.length === 2) {\n\n\n        if (node.fn === 'subtract') {\n          if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {\n            return _a;\n          }\n\n          if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {\n            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));\n          }\n\n          return new OperatorNode(node.op, node.fn, [_a, a1]);\n        }\n      } else if (node.op === '*') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          } else if ((0, _is.isConstantNode)(a1)) {\n            return new ConstantNode(multiply(_a.value, a1.value));\n          }\n        }\n\n        if ((0, _is.isConstantNode)(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === node.op) {\n            var a00 = _a.args[0];\n\n            if ((0, _is.isConstantNode)(a00)) {\n              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));\n              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left\n            }\n          }\n\n          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      } else if (node.op === '/') {\n        if ((0, _is.isConstantNode)(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if ((0, _is.isConstantNode)(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {\n            return new ConstantNode(divide(_a.value, a1.value));\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      } else if (node.op === '^') {\n        if ((0, _is.isConstantNode)(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          } else {\n            if ((0, _is.isConstantNode)(_a)) {\n              // fold constant\n              return new ConstantNode(pow(_a.value, a1.value));\n            } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === '^') {\n              var a01 = _a.args[1];\n\n              if ((0, _is.isConstantNode)(a01)) {\n                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);\n              }\n            }\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n    } else if ((0, _is.isParenthesisNode)(node)) {\n      var c = simplifyCore(node.content);\n\n      if ((0, _is.isParenthesisNode)(c) || (0, _is.isSymbolNode)(c) || (0, _is.isConstantNode)(c)) {\n        return c;\n      }\n\n      return new ParenthesisNode(c);\n    } else if ((0, _is.isFunctionNode)(node)) {\n      var args = node.args.map(simplifyCore).map(function (arg) {\n        return (0, _is.isParenthesisNode)(arg) ? arg.content : arg;\n      });\n      return new FunctionNode(simplifyCore(node.fn), args);\n    } else {// cannot simplify\n    }\n\n    return node;\n  }\n\n  return simplifyCore;\n});\nexports.createSimplifyCore = createSimplifyCore;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}