{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEvaluate = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _map = require(\"../../utils/map.js\");\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nvar createEvaluate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    parse = _ref.parse;\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = (0, _map.createEmptyMap)();\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = (0, _map.createEmptyMap)();\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});\nexports.createEvaluate = createEvaluate;","map":{"version":3,"names":["Object","defineProperty","exports","value","createEvaluate","_collection","require","_factory","_map","name","dependencies","factory","_ref","typed","parse","string","expr","scope","createEmptyMap","compile","evaluate","stringMapObject","ArrayMatrix","deepMap","entry","ArrayMatrixMapObject"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/function/evaluate.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEvaluate = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _map = require(\"../../utils/map.js\");\n\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nvar createEvaluate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = (0, _map.createEmptyMap)();\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = (0, _map.createEmptyMap)();\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});\nexports.createEvaluate = createEvaluate;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAE/B,IAAIC,WAAW,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAExC,IAAIG,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,IAAIN,cAAc,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC5F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,KAAK,GAAGF,IAAI,CAACE,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjBM,MAAM,EAAE,SAASA,MAAM,CAACC,IAAI,EAAE;MAC5B,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAET,IAAI,CAACU,cAAc,GAAG;MACtC,OAAOJ,KAAK,CAACE,IAAI,CAAC,CAACG,OAAO,EAAE,CAACC,QAAQ,CAACH,KAAK,CAAC;IAC9C,CAAC;IACD,sBAAsB,EAAE,SAASI,eAAe,CAACL,IAAI,EAAEC,KAAK,EAAE;MAC5D,OAAOH,KAAK,CAACE,IAAI,CAAC,CAACG,OAAO,EAAE,CAACC,QAAQ,CAACH,KAAK,CAAC;IAC9C,CAAC;IACD,gBAAgB,EAAE,SAASK,WAAW,CAACN,IAAI,EAAE;MAC3C,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAET,IAAI,CAACU,cAAc,GAAG;MACtC,OAAO,CAAC,CAAC,EAAEb,WAAW,CAACkB,OAAO,EAAEP,IAAI,EAAE,UAAUQ,KAAK,EAAE;QACrD,OAAOV,KAAK,CAACU,KAAK,CAAC,CAACL,OAAO,EAAE,CAACC,QAAQ,CAACH,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ,CAAC;IACD,8BAA8B,EAAE,SAASQ,oBAAoB,CAACT,IAAI,EAAEC,KAAK,EAAE;MACzE,OAAO,CAAC,CAAC,EAAEZ,WAAW,CAACkB,OAAO,EAAEP,IAAI,EAAE,UAAUQ,KAAK,EAAE;QACrD,OAAOV,KAAK,CAACU,KAAK,CAAC,CAACL,OAAO,EAAE,CAACC,QAAQ,CAACH,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFf,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}