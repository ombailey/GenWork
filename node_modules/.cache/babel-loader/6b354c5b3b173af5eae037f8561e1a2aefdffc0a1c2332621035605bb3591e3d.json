{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConcat = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _IndexError = require(\"../../error/IndexError.js\");\nvar _DimensionError = require(\"../../error/DimensionError.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nvar createConcat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    isInteger = _ref.isInteger;\n\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\n\n        if ((0, _is.isMatrix)(arg)) {\n          asMatrix = true;\n        }\n        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          } // last argument contains the dimension on which to concatenate\n\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new _IndexError.IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = (0, _object.clone)(arg).valueOf();\n          var size = (0, _array.arraySize)(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\n\n          if (i > 0 && dim !== prevDim) {\n            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\n\nexports.createConcat = createConcat;\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new _DimensionError.DimensionError(a.length, b.length);\n    }\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createConcat","_is","require","_object","_array","_IndexError","_DimensionError","_factory","name","dependencies","factory","_ref","typed","matrix","isInteger","ArrayMatrixNumberBigNumber","args","i","len","length","dim","prevDim","asMatrix","matrices","arg","isMatrix","isNumber","isBigNumber","Error","valueOf","TypeError","IndexError","m","clone","size","arraySize","DimensionError","SyntaxError","res","shift","_concat","string","join","a","b","concatDim","c","concat"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/concat.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConcat = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _IndexError = require(\"../../error/IndexError.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nvar createConcat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\n\n        if ((0, _is.isMatrix)(arg)) {\n          asMatrix = true;\n        }\n\n        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          } // last argument contains the dimension on which to concatenate\n\n\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new _IndexError.IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = (0, _object.clone)(arg).valueOf();\n          var size = (0, _array.arraySize)(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\n\n          if (i > 0 && dim !== prevDim) {\n            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\n\nexports.createConcat = createConcat;\n\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new _DimensionError.DimensionError(a.length, b.length);\n    }\n\n    var c = [];\n\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}