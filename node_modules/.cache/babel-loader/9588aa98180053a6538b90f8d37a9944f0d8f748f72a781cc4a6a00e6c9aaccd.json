{"ast":null,"code":"var _jsxFileName = \"/Users/omarbailey/Documents/Coding/React/workout-generator/src/App.js\";\nimport \"./App.css\";\nimport workouts from \"./workouts.json\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Workout Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Generator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nfunction Generator() {\n  let omar = \"\";\n  const randomize = () => {\n    // Get body parts to workout and num of exercises for each body part\n    let bodyParts = document.querySelector(\".body-parts\").value;\n    let num = document.querySelector(\".num-exercises\").value;\n\n    // If there are multiple values split it by the word and\n    if (bodyParts.includes(\"and\")) bodyParts = bodyParts.split(\"and\");\n\n    // Remove any whitespace surrounding each word\n    bodyParts = bodyParts.map(part => part.toLowerCase().trim());\n    for (let part of bodyParts) {\n      console.log(workouts[part][Math.floor(Math.random() * workouts[part].length)]);\n    }\n    document.querySelector(\".body-parts\").value = \"\";\n    document.querySelector(\".num-exercises\").value = \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"generator-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"What Body Part(s) do you want to workout?\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Choose between abs,chest,back,biceps,triceps,shoulders or legs\",\n        size: 55,\n        className: \"body-parts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"How many exercises for each body part?\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"0\",\n        size: 1,\n        maxLength: 1,\n        className: \"num-exercises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randomize,\n      children: \"Randomize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Generator;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Generator\");","map":{"version":3,"names":["workouts","useEffect","useState","App","Generator","omar","randomize","bodyParts","document","querySelector","value","num","includes","split","map","part","toLowerCase","trim","console","log","Math","floor","random","length"],"sources":["/Users/omarbailey/Documents/Coding/React/workout-generator/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport workouts from \"./workouts.json\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <h1> Workout Generator</h1>\n      <Generator />\n    </div>\n  );\n}\n\nfunction Generator() {\n  let omar = \"\";\n\n  const randomize = () => {\n    // Get body parts to workout and num of exercises for each body part\n    let bodyParts = document.querySelector(\".body-parts\").value;\n    let num = document.querySelector(\".num-exercises\").value;\n\n    // If there are multiple values split it by the word and\n    if (bodyParts.includes(\"and\")) bodyParts = bodyParts.split(\"and\");\n\n    // Remove any whitespace surrounding each word\n    bodyParts = bodyParts.map((part) => part.toLowerCase().trim());\n\n    for (let part of bodyParts) {\n      console.log(\n        workouts[part][Math.floor(Math.random() * workouts[part].length)]\n      );\n    }\n\n    document.querySelector(\".body-parts\").value = \"\";\n    document.querySelector(\".num-exercises\").value = \"\";\n  };\n\n  return (\n    <div id=\"generator-div\">\n      <label>\n        What Body Part(s) do you want to workout?\n        <input\n          type=\"text\"\n          placeholder=\"Choose between abs,chest,back,biceps,triceps,shoulders or legs\"\n          size={55}\n          className=\"body-parts\"\n        ></input>\n      </label>\n      <label>\n        How many exercises for each body part?\n        <input\n          type=\"text\"\n          placeholder=\"0\"\n          size={1}\n          maxLength={1}\n          className=\"num-exercises\"\n        ></input>\n      </label>\n      <button onClick={randomize}>Randomize</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,SAASC,GAAG,GAAG;EACb,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA2B,eAC3B,QAAC,SAAS;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACT;AAEV;AAAC,KAPQA,GAAG;AASZ,SAASC,SAAS,GAAG;EACnB,IAAIC,IAAI,GAAG,EAAE;EAEb,MAAMC,SAAS,GAAG,MAAM;IACtB;IACA,IAAIC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAACC,KAAK;IAC3D,IAAIC,GAAG,GAAGH,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK;;IAExD;IACA,IAAIH,SAAS,CAACK,QAAQ,CAAC,KAAK,CAAC,EAAEL,SAAS,GAAGA,SAAS,CAACM,KAAK,CAAC,KAAK,CAAC;;IAEjE;IACAN,SAAS,GAAGA,SAAS,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,EAAE,CAAC;IAE9D,KAAK,IAAIF,IAAI,IAAIR,SAAS,EAAE;MAC1BW,OAAO,CAACC,GAAG,CACTnB,QAAQ,CAACe,IAAI,CAAC,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGtB,QAAQ,CAACe,IAAI,CAAC,CAACQ,MAAM,CAAC,CAAC,CAClE;IACH;IAEAf,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAACC,KAAK,GAAG,EAAE;IAChDF,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK,GAAG,EAAE;EACrD,CAAC;EAED,oBACE;IAAK,EAAE,EAAC,eAAe;IAAA,wBACrB;MAAA,qEAEE;QACE,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,gEAAgE;QAC5E,IAAI,EAAE,EAAG;QACT,SAAS,EAAC;MAAY;QAAA;QAAA;QAAA;MAAA,QACf;IAAA;MAAA;MAAA;MAAA;IAAA,QACH,eACR;MAAA,kEAEE;QACE,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,GAAG;QACf,IAAI,EAAE,CAAE;QACR,SAAS,EAAE,CAAE;QACb,SAAS,EAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAClB;IAAA;MAAA;MAAA;MAAA;IAAA,QACH,eACR;MAAQ,OAAO,EAAEJ,SAAU;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1C;AAEV;AAAC,MAhDQF,SAAS;AAkDlB,eAAeD,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}