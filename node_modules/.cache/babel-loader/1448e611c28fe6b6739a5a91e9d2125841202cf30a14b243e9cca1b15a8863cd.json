{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetDistinct = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetDistinct = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    size = _ref.size,\n    subset = _ref.subset,\n    compareNatural = _ref.compareNatural,\n    Index = _ref.Index,\n    DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      } // return an array, if the input was an array\n\n      if (Array.isArray(a)) {\n        return result;\n      } // return a matrix otherwise\n\n      return new DenseMatrix(result);\n    }\n  });\n});\nexports.createSetDistinct = createSetDistinct;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSetDistinct","_array","require","_factory","name","dependencies","factory","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrix","a","result","b","flatten","Array","isArray","toArray","sort","push","i","length"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/set/setDistinct.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetDistinct = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetDistinct = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      } // return an array, if the input was an array\n\n\n      if (Array.isArray(a)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});\nexports.createSetDistinct = createSetDistinct;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAElC,IAAIC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,aAAa,CAAC;AACxF,IAAIL,iBAAiB,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC/F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,IAAI,GAAGF,IAAI,CAACE,IAAI;IAChBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,cAAc,GAAGJ,IAAI,CAACI,cAAc;IACpCC,KAAK,GAAGL,IAAI,CAACK,KAAK;IAClBC,WAAW,GAAGN,IAAI,CAACM,WAAW;;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASU,WAAW,CAACC,CAAC,EAAE;MACxC,IAAIC,MAAM;MAEV,IAAIN,MAAM,CAACD,IAAI,CAACM,CAAC,CAAC,EAAE,IAAIH,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACvC;QACAI,MAAM,GAAG,EAAE;MACb,CAAC,MAAM;QACL,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEhB,MAAM,CAACiB,OAAO,EAAEC,KAAK,CAACC,OAAO,CAACL,CAAC,CAAC,GAAGA,CAAC,GAAGA,CAAC,CAACM,OAAO,EAAE,CAAC,CAACC,IAAI,CAACX,cAAc,CAAC;QACpFK,MAAM,GAAG,EAAE;QACXA,MAAM,CAACO,IAAI,CAACN,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;UACjC,IAAIb,cAAc,CAACM,CAAC,CAACO,CAAC,CAAC,EAAEP,CAAC,CAACO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YACxCR,MAAM,CAACO,IAAI,CAACN,CAAC,CAACO,CAAC,CAAC,CAAC;UACnB;QACF;MACF,CAAC,CAAC;;MAGF,IAAIL,KAAK,CAACC,OAAO,CAACL,CAAC,CAAC,EAAE;QACpB,OAAOC,MAAM;MACf,CAAC,CAAC;;MAGF,OAAO,IAAIH,WAAW,CAACG,MAAM,CAAC;IAChC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFlB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}