{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog1p = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _number = require(\"../../utils/number.js\");\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nvar createLog1p = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    divideScalar = _ref.divideScalar,\n    log = _ref.log,\n    Complex = _ref.Complex;\n\n  /**\n   * Calculate the logarithm of a `value+1`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log1p(x)\n   *    math.log1p(x, base)\n   *\n   * Examples:\n   *\n   *    math.log1p(2.5)                 // returns 1.252762968495368\n   *    math.exp(math.log1p(1.4))       // returns 2.4\n   *\n   *    math.pow(10, 4)                 // returns 10000\n   *    math.log1p(9999, 10)            // returns 4\n   *    math.log1p(9999) / math.log(10) // returns 4\n   *\n   * See also:\n   *\n   *    exp, log, log2, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm of `x+1`.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x+1` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x+1`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return (0, _number.log1p)(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(this(x), log(base));\n    }\n  });\n  /**\n   * Calculate the natural logarithm of a complex number + 1\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n});\nexports.createLog1p = createLog1p;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLog1p","_factory","require","_collection","_number","name","dependencies","factory","_ref","typed","config","divideScalar","log","Complex","number","x","predictable","log1p","_log1pComplex","BigNumber","y","plus","isNegative","ln","toNumber","ArrayMatrix","deepMap","anyAny","base","xRe1p","re","Math","sqrt","im","atan2"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/log1p.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog1p = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nvar createLog1p = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      log = _ref.log,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the logarithm of a `value+1`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log1p(x)\n   *    math.log1p(x, base)\n   *\n   * Examples:\n   *\n   *    math.log1p(2.5)                 // returns 1.252762968495368\n   *    math.exp(math.log1p(1.4))       // returns 2.4\n   *\n   *    math.pow(10, 4)                 // returns 10000\n   *    math.log1p(9999, 10)            // returns 4\n   *    math.log1p(9999) / math.log(10) // returns 4\n   *\n   * See also:\n   *\n   *    exp, log, log2, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm of `x+1`.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x+1` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x+1`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return (0, _number.log1p)(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(this(x), log(base));\n    }\n  });\n  /**\n   * Calculate the natural logarithm of a complex number + 1\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n});\nexports.createLog1p = createLog1p;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}