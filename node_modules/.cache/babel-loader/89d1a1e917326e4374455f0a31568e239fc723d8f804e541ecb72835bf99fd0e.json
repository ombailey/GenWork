{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetCartesian = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetCartesian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    size = _ref.size,\n    subset = _ref.subset,\n    compareNatural = _ref.compareNatural,\n    Index = _ref.Index,\n    DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = (0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = (0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      } // return a matrix otherwise\n\n      return new DenseMatrix(result);\n    }\n  });\n});\nexports.createSetCartesian = createSetCartesian;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSetCartesian","_array","require","_factory","name","dependencies","factory","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrixArrayMatrix","a1","a2","result","b1","flatten","Array","isArray","toArray","sort","b2","i","length","j","push"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/set/setCartesian.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetCartesian = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetCartesian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = (0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = (0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});\nexports.createSetCartesian = createSetCartesian;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AAEnC,IAAIC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,aAAa,CAAC;AACxF,IAAIL,kBAAkB,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChG,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,IAAI,GAAGF,IAAI,CAACE,IAAI;IAChBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,cAAc,GAAGJ,IAAI,CAACI,cAAc;IACpCC,KAAK,GAAGL,IAAI,CAACK,KAAK;IAClBC,WAAW,GAAGN,IAAI,CAACM,WAAW;;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAE;IACjB,gCAAgC,EAAE,SAASU,sBAAsB,CAACC,EAAE,EAAEC,EAAE,EAAE;MACxE,IAAIC,MAAM,GAAG,EAAE;MAEf,IAAIP,MAAM,CAACD,IAAI,CAACM,EAAE,CAAC,EAAE,IAAIH,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIF,MAAM,CAACD,IAAI,CAACO,EAAE,CAAC,EAAE,IAAIJ,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAChF;QACA,IAAIM,EAAE,GAAG,CAAC,CAAC,EAAEjB,MAAM,CAACkB,OAAO,EAAEC,KAAK,CAACC,OAAO,CAACN,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACO,OAAO,EAAE,CAAC,CAACC,IAAI,CAACZ,cAAc,CAAC;QACxF,IAAIa,EAAE,GAAG,CAAC,CAAC,EAAEvB,MAAM,CAACkB,OAAO,EAAEC,KAAK,CAACC,OAAO,CAACL,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACM,OAAO,EAAE,CAAC,CAACC,IAAI,CAACZ,cAAc,CAAC;QACxFM,MAAM,GAAG,EAAE;QAEX,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,EAAE,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;UAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,EAAE,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;YAClCV,MAAM,CAACW,IAAI,CAAC,CAACV,EAAE,CAACO,CAAC,CAAC,EAAED,EAAE,CAACG,CAAC,CAAC,CAAC,CAAC;UAC7B;QACF;MACF,CAAC,CAAC;;MAGF,IAAIP,KAAK,CAACC,OAAO,CAACN,EAAE,CAAC,IAAIK,KAAK,CAACC,OAAO,CAACL,EAAE,CAAC,EAAE;QAC1C,OAAOC,MAAM;MACf,CAAC,CAAC;;MAGF,OAAO,IAAIJ,WAAW,CAACI,MAAM,CAAC;IAChC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFnB,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}