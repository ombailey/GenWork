{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinations = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _combinations = require(\"../../plain/number/combinations.js\");\nvar name = 'combinations';\nvar dependencies = ['typed'];\nvar createCombinations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': _combinations.combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n      result = one;\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    } // TODO: implement support for collection in combinations\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinations = createCombinations;\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createCombinations","_factory","require","_combinations","name","dependencies","factory","_ref","typed","combinationsNumber","BigNumberBigNumber","n","k","BigNumber","constructor","result","i","nMinusk","minus","one","isPositiveInteger","TypeError","gt","lt","lte","plus","times","dividedBy","isInteger","gte"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/probability/combinations.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinations = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _combinations = require(\"../../plain/number/combinations.js\");\n\nvar name = 'combinations';\nvar dependencies = ['typed'];\nvar createCombinations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': _combinations.combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    } // TODO: implement support for collection in combinations\n\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinations = createCombinations;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AAEnC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,aAAa,GAAGD,OAAO,CAAC,oCAAoC,CAAC;AAEjE,IAAIE,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIL,kBAAkB,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChG,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,aAAa,CAACM,kBAAkB;IAClD,sBAAsB,EAAE,SAASC,kBAAkB,CAACC,CAAC,EAAEC,CAAC,EAAE;MACxD,IAAIC,SAAS,GAAGF,CAAC,CAACG,WAAW;MAC7B,IAAIC,MAAM,EAAEC,CAAC;MACb,IAAIC,OAAO,GAAGN,CAAC,CAACO,KAAK,CAACN,CAAC,CAAC;MACxB,IAAIO,GAAG,GAAG,IAAIN,SAAS,CAAC,CAAC,CAAC;MAE1B,IAAI,CAACO,iBAAiB,CAACT,CAAC,CAAC,IAAI,CAACS,iBAAiB,CAACR,CAAC,CAAC,EAAE;QAClD,MAAM,IAAIS,SAAS,CAAC,0DAA0D,CAAC;MACjF;MAEA,IAAIT,CAAC,CAACU,EAAE,CAACX,CAAC,CAAC,EAAE;QACX,MAAM,IAAIU,SAAS,CAAC,gDAAgD,CAAC;MACvE;MAEAN,MAAM,GAAGI,GAAG;MAEZ,IAAIP,CAAC,CAACW,EAAE,CAACN,OAAO,CAAC,EAAE;QACjB,KAAKD,CAAC,GAAGG,GAAG,EAAEH,CAAC,CAACQ,GAAG,CAACP,OAAO,CAAC,EAAED,CAAC,GAAGA,CAAC,CAACS,IAAI,CAACN,GAAG,CAAC,EAAE;UAC7CJ,MAAM,GAAGA,MAAM,CAACW,KAAK,CAACd,CAAC,CAACa,IAAI,CAACT,CAAC,CAAC,CAAC,CAACW,SAAS,CAACX,CAAC,CAAC;QAC/C;MACF,CAAC,MAAM;QACL,KAAKA,CAAC,GAAGG,GAAG,EAAEH,CAAC,CAACQ,GAAG,CAACZ,CAAC,CAAC,EAAEI,CAAC,GAAGA,CAAC,CAACS,IAAI,CAACN,GAAG,CAAC,EAAE;UACvCJ,MAAM,GAAGA,MAAM,CAACW,KAAK,CAACT,OAAO,CAACQ,IAAI,CAACT,CAAC,CAAC,CAAC,CAACW,SAAS,CAACX,CAAC,CAAC;QACrD;MACF;MAEA,OAAOD,MAAM;IACf,CAAC,CAAC;EAEJ,CAAC,CAAC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;;AAEAjB,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAE/C,SAASoB,iBAAiB,CAACT,CAAC,EAAE;EAC5B,OAAOA,CAAC,CAACiB,SAAS,EAAE,IAAIjB,CAAC,CAACkB,GAAG,CAAC,CAAC,CAAC;AAClC"},"metadata":{},"sourceType":"script","externalDependencies":[]}