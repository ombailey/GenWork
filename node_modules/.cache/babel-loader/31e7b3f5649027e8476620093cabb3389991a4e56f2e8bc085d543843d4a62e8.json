{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubtract = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _DimensionError = require(\"../../error/DimensionError.js\");\nvar _algorithm = require(\"../../type/matrix/utils/algorithm01.js\");\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm03.js\");\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm05.js\");\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm10.js\");\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm13.js\");\nvar _algorithm6 = require(\"../../type/matrix/utils/algorithm14.js\");\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nvar createSubtract = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    addScalar = _ref.addScalar,\n    unaryMinus = _ref.unaryMinus,\n    DenseMatrix = _ref.DenseMatrix;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var algorithm01 = (0, _algorithm.createAlgorithm01)({\n    typed: typed\n  });\n  var algorithm03 = (0, _algorithm2.createAlgorithm03)({\n    typed: typed\n  });\n  var algorithm05 = (0, _algorithm3.createAlgorithm05)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = (0, _algorithm4.createAlgorithm10)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = (0, _algorithm5.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm6.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nexports.createSubtract = createSubtract;\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n  if (xsize.length !== ysize.length) {\n    throw new _DimensionError.DimensionError(xsize.length, ysize.length);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createSubtract","_factory","require","_DimensionError","_algorithm","_algorithm2","_algorithm3","_algorithm4","_algorithm5","_algorithm6","name","dependencies","factory","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","algorithm01","createAlgorithm01","algorithm03","createAlgorithm03","algorithm05","createAlgorithm05","algorithm10","createAlgorithm10","algorithm13","createAlgorithm13","algorithm14","createAlgorithm14","numberNumber","x","y","ComplexComplex","sub","BigNumberBigNumber","minus","FractionFraction","UnitUnit","Error","equalBase","res","clone","fixPrefix","SparseMatrixSparseMatrix","checkEqualDimensions","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","xsize","size","ysize","length","DimensionError"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/subtract.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubtract = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm01.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm03.js\");\n\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm05.js\");\n\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm10.js\");\n\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm13.js\");\n\nvar _algorithm6 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nvar createSubtract = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      DenseMatrix = _ref.DenseMatrix;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var algorithm01 = (0, _algorithm.createAlgorithm01)({\n    typed: typed\n  });\n  var algorithm03 = (0, _algorithm2.createAlgorithm03)({\n    typed: typed\n  });\n  var algorithm05 = (0, _algorithm3.createAlgorithm05)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = (0, _algorithm4.createAlgorithm10)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = (0, _algorithm5.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm6.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nexports.createSubtract = createSubtract;\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new _DimensionError.DimensionError(xsize.length, ysize.length);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}