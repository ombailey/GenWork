{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRow = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createRow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Index = _ref.Index,\n    matrix = _ref.matrix,\n    range = _ref.range;\n\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix((0, _object.clone)(value)), row).valueOf();\n    }\n  });\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    (0, _array.validateIndex)(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});\nexports.createRow = createRow;","map":{"version":3,"names":["Object","defineProperty","exports","value","createRow","_factory","require","_object","_array","name","dependencies","factory","_ref","typed","Index","matrix","range","_row","ArrayNumber","row","clone","valueOf","size","length","Error","validateIndex","columnRange","index","subset"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/row.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRow = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createRow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix((0, _object.clone)(value)), row).valueOf();\n    }\n  });\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    (0, _array.validateIndex)(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});\nexports.createRow = createRow;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAE1B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9C,IAAIE,MAAM,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIG,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;AACxD,IAAIN,SAAS,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACvF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAClBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,KAAK,GAAGJ,IAAI,CAACI,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAEQ,IAAI;IACtB,eAAe,EAAE,SAASC,WAAW,CAACf,KAAK,EAAEgB,GAAG,EAAE;MAChD,OAAOF,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC,EAAER,OAAO,CAACa,KAAK,EAAEjB,KAAK,CAAC,CAAC,EAAEgB,GAAG,CAAC,CAACE,OAAO,EAAE;IAC/D;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASJ,IAAI,CAACd,KAAK,EAAEgB,GAAG,EAAE;IACxB;IACA,IAAIhB,KAAK,CAACmB,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IAEA,CAAC,CAAC,EAAEhB,MAAM,CAACiB,aAAa,EAAEN,GAAG,EAAEhB,KAAK,CAACmB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAII,WAAW,GAAGV,KAAK,CAAC,CAAC,EAAEb,KAAK,CAACmB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3C,IAAIK,KAAK,GAAG,IAAIb,KAAK,CAACK,GAAG,EAAEO,WAAW,CAAC;IACvC,OAAOvB,KAAK,CAACyB,MAAM,CAACD,KAAK,CAAC;EAC5B;AACF,CAAC,CAAC;AACFzB,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}