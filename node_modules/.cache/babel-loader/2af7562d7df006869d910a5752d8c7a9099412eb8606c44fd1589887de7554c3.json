{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetUnion = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'setUnion';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\nvar createSetUnion = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    size = _ref.size,\n    concat = _ref.concat,\n    subset = _ref.subset,\n    setIntersect = _ref.setIntersect,\n    setSymDifference = _ref.setSymDifference,\n    Index = _ref.Index;\n\n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return (0, _array.flatten)(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return (0, _array.flatten)(a1);\n      }\n      var b1 = (0, _array.flatten)(a1);\n      var b2 = (0, _array.flatten)(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n});\nexports.createSetUnion = createSetUnion;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSetUnion","_array","require","_factory","name","dependencies","factory","_ref","typed","size","concat","subset","setIntersect","setSymDifference","Index","ArrayMatrixArrayMatrix","a1","a2","flatten","b1","b2"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/set/setUnion.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetUnion = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setUnion';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\nvar createSetUnion = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      concat = _ref.concat,\n      subset = _ref.subset,\n      setIntersect = _ref.setIntersect,\n      setSymDifference = _ref.setSymDifference,\n      Index = _ref.Index;\n\n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return (0, _array.flatten)(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return (0, _array.flatten)(a1);\n      }\n\n      var b1 = (0, _array.flatten)(a1);\n      var b2 = (0, _array.flatten)(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n});\nexports.createSetUnion = createSetUnion;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAE/B,IAAIC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,kBAAkB,EAAE,OAAO,CAAC;AACrG,IAAIL,cAAc,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC5F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,IAAI,GAAGF,IAAI,CAACE,IAAI;IAChBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,MAAM,GAAGJ,IAAI,CAACI,MAAM;IACpBC,YAAY,GAAGL,IAAI,CAACK,YAAY;IAChCC,gBAAgB,GAAGN,IAAI,CAACM,gBAAgB;IACxCC,KAAK,GAAGP,IAAI,CAACO,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAON,KAAK,CAACJ,IAAI,EAAE;IACjB,gCAAgC,EAAE,SAASW,sBAAsB,CAACC,EAAE,EAAEC,EAAE,EAAE;MACxE,IAAIN,MAAM,CAACF,IAAI,CAACO,EAAE,CAAC,EAAE,IAAIF,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACxC;QACA,OAAO,CAAC,CAAC,EAAEb,MAAM,CAACiB,OAAO,EAAED,EAAE,CAAC;MAChC,CAAC,MAAM,IAAIN,MAAM,CAACF,IAAI,CAACQ,EAAE,CAAC,EAAE,IAAIH,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC/C,OAAO,CAAC,CAAC,EAAEb,MAAM,CAACiB,OAAO,EAAEF,EAAE,CAAC;MAChC;MAEA,IAAIG,EAAE,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACiB,OAAO,EAAEF,EAAE,CAAC;MAChC,IAAII,EAAE,GAAG,CAAC,CAAC,EAAEnB,MAAM,CAACiB,OAAO,EAAED,EAAE,CAAC;MAChC,OAAOP,MAAM,CAACG,gBAAgB,CAACM,EAAE,EAAEC,EAAE,CAAC,EAAER,YAAY,CAACO,EAAE,EAAEC,EAAE,CAAC,CAAC;IAC/D;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFtB,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}