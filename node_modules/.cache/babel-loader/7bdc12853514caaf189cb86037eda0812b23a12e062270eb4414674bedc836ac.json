{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tablePlot = void 0;\n/**\n* Display Series or DataFrame as table.\n* Uses the Plotly as backend, so supoorts Plotly's configuration parameters,\n* @param ndframe Series or DataFrame to plot\n* @param divId HTML div id to plot in.\n* @param plotConfig configuration options for making Plots, supports Plotly.js Config and Layout parameters.\n*/\nvar tablePlot = function (ndframe, divId, plotConfig, Plotly) {\n  var config = plotConfig[\"config\"];\n  var layout = plotConfig[\"layout\"];\n  var header = {};\n  var cells = {};\n  var colsData = [];\n  var cols2Show = [];\n  if (config['columns']) {\n    config['columns'].forEach(function (cname) {\n      if (!ndframe.columns.includes(cname)) {\n        throw Error(\"Column Error: \" + cname + \" not found in columns. Columns should be one of [ \" + ndframe.columns + \" ]\");\n      }\n      var idx = ndframe.columns.indexOf(cname);\n      colsData.push(ndframe.getColumnData[idx]);\n    });\n    cols2Show = config['columns'];\n  } else {\n    cols2Show = ndframe.columns;\n    colsData = ndframe.getColumnData;\n  }\n  header['values'] = cols2Show.map(function (col) {\n    return [col];\n  });\n  cells['values'] = colsData;\n  if (config['tableHeaderStyle']) {\n    Object.keys(config['tableHeaderStyle']).forEach(function (param) {\n      header[param] = config['tableHeaderStyle'][param];\n    });\n  }\n  if (config['tableCellStyle']) {\n    Object.keys(config['tableCellStyle']).forEach(function (param) {\n      cells[param] = config['tableCellStyle'][param];\n    });\n  }\n  var trace = {\n    type: 'table',\n    header: header,\n    cells: cells\n  };\n  /* @ts-ignore */\n  Plotly.newPlot(divId, [trace], layout, config);\n};\nexports.tablePlot = tablePlot;","map":{"version":3,"names":["Object","defineProperty","exports","value","tablePlot","ndframe","divId","plotConfig","Plotly","config","layout","header","cells","colsData","cols2Show","forEach","cname","columns","includes","Error","idx","indexOf","push","getColumnData","map","col","keys","param","trace","type","newPlot"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/plotting/plotly/table.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tablePlot = void 0;\n/**\n* Display Series or DataFrame as table.\n* Uses the Plotly as backend, so supoorts Plotly's configuration parameters,\n* @param ndframe Series or DataFrame to plot\n* @param divId HTML div id to plot in.\n* @param plotConfig configuration options for making Plots, supports Plotly.js Config and Layout parameters.\n*/\nvar tablePlot = function (ndframe, divId, plotConfig, Plotly) {\n    var config = plotConfig[\"config\"];\n    var layout = plotConfig[\"layout\"];\n    var header = {};\n    var cells = {};\n    var colsData = [];\n    var cols2Show = [];\n    if (config['columns']) {\n        config['columns'].forEach(function (cname) {\n            if (!ndframe.columns.includes(cname)) {\n                throw Error(\"Column Error: \" + cname + \" not found in columns. Columns should be one of [ \" + ndframe.columns + \" ]\");\n            }\n            var idx = ndframe.columns.indexOf(cname);\n            colsData.push(ndframe.getColumnData[idx]);\n        });\n        cols2Show = config['columns'];\n    }\n    else {\n        cols2Show = ndframe.columns;\n        colsData = ndframe.getColumnData;\n    }\n    header['values'] = cols2Show.map(function (col) { return [col]; });\n    cells['values'] = colsData;\n    if (config['tableHeaderStyle']) {\n        Object.keys(config['tableHeaderStyle']).forEach(function (param) {\n            header[param] = config['tableHeaderStyle'][param];\n        });\n    }\n    if (config['tableCellStyle']) {\n        Object.keys(config['tableCellStyle']).forEach(function (param) {\n            cells[param] = config['tableCellStyle'][param];\n        });\n    }\n    var trace = {\n        type: 'table',\n        header: header,\n        cells: cells\n    };\n    /* @ts-ignore */\n    Plotly.newPlot(divId, [trace], layout, config);\n};\nexports.tablePlot = tablePlot;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAG,UAAUC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEC,MAAM,EAAE;EAC1D,IAAIC,MAAM,GAAGF,UAAU,CAAC,QAAQ,CAAC;EACjC,IAAIG,MAAM,GAAGH,UAAU,CAAC,QAAQ,CAAC;EACjC,IAAII,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIL,MAAM,CAAC,SAAS,CAAC,EAAE;IACnBA,MAAM,CAAC,SAAS,CAAC,CAACM,OAAO,CAAC,UAAUC,KAAK,EAAE;MACvC,IAAI,CAACX,OAAO,CAACY,OAAO,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;QAClC,MAAMG,KAAK,CAAC,gBAAgB,GAAGH,KAAK,GAAG,oDAAoD,GAAGX,OAAO,CAACY,OAAO,GAAG,IAAI,CAAC;MACzH;MACA,IAAIG,GAAG,GAAGf,OAAO,CAACY,OAAO,CAACI,OAAO,CAACL,KAAK,CAAC;MACxCH,QAAQ,CAACS,IAAI,CAACjB,OAAO,CAACkB,aAAa,CAACH,GAAG,CAAC,CAAC;IAC7C,CAAC,CAAC;IACFN,SAAS,GAAGL,MAAM,CAAC,SAAS,CAAC;EACjC,CAAC,MACI;IACDK,SAAS,GAAGT,OAAO,CAACY,OAAO;IAC3BJ,QAAQ,GAAGR,OAAO,CAACkB,aAAa;EACpC;EACAZ,MAAM,CAAC,QAAQ,CAAC,GAAGG,SAAS,CAACU,GAAG,CAAC,UAAUC,GAAG,EAAE;IAAE,OAAO,CAACA,GAAG,CAAC;EAAE,CAAC,CAAC;EAClEb,KAAK,CAAC,QAAQ,CAAC,GAAGC,QAAQ;EAC1B,IAAIJ,MAAM,CAAC,kBAAkB,CAAC,EAAE;IAC5BT,MAAM,CAAC0B,IAAI,CAACjB,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAACM,OAAO,CAAC,UAAUY,KAAK,EAAE;MAC7DhB,MAAM,CAACgB,KAAK,CAAC,GAAGlB,MAAM,CAAC,kBAAkB,CAAC,CAACkB,KAAK,CAAC;IACrD,CAAC,CAAC;EACN;EACA,IAAIlB,MAAM,CAAC,gBAAgB,CAAC,EAAE;IAC1BT,MAAM,CAAC0B,IAAI,CAACjB,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAACM,OAAO,CAAC,UAAUY,KAAK,EAAE;MAC3Df,KAAK,CAACe,KAAK,CAAC,GAAGlB,MAAM,CAAC,gBAAgB,CAAC,CAACkB,KAAK,CAAC;IAClD,CAAC,CAAC;EACN;EACA,IAAIC,KAAK,GAAG;IACRC,IAAI,EAAE,OAAO;IACblB,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA;EACX,CAAC;EACD;EACAJ,MAAM,CAACsB,OAAO,CAACxB,KAAK,EAAE,CAACsB,KAAK,CAAC,EAAElB,MAAM,EAAED,MAAM,CAAC;AAClD,CAAC;AACDP,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}