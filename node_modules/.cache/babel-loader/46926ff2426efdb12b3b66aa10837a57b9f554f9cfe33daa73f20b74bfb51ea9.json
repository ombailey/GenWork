{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csPost = csPost;\nvar _csTdfs = require(\"./csTdfs.js\");\n\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nfunction csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  } // vars\n\n  var k = 0;\n  var j; // allocate result\n\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n\n  var w = []; // (3 * n)\n\n  var head = 0;\n  var next = n;\n  var stack = 2 * n; // initialize workspace\n\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  } // traverse nodes in reverse order\n\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    } // add j to list of its parent\n\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  } // loop nodes\n\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    } // depth-first search\n\n    k = (0, _csTdfs.csTdfs)(j, k, w, head, next, post, stack);\n  }\n  return post;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","csPost","_csTdfs","require","parent","n","k","j","post","w","head","next","stack","csTdfs"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/algebra/sparse/csPost.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csPost = csPost;\n\nvar _csTdfs = require(\"./csTdfs.js\");\n\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nfunction csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  } // vars\n\n\n  var k = 0;\n  var j; // allocate result\n\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n\n  var w = []; // (3 * n)\n\n  var head = 0;\n  var next = n;\n  var stack = 2 * n; // initialize workspace\n\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  } // traverse nodes in reverse order\n\n\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    } // add j to list of its parent\n\n\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  } // loop nodes\n\n\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    } // depth-first search\n\n\n    k = (0, _csTdfs.csTdfs)(j, k, w, head, next, post, stack);\n  }\n\n  return post;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,MAAM,GAAGA,MAAM;AAEvB,IAAIC,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,MAAM,CAACG,MAAM,EAAEC,CAAC,EAAE;EACzB;EACA,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,IAAI;EACb,CAAC,CAAC;;EAGF,IAAIE,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,CAAC,CAAC;;EAEP,IAAIC,IAAI,GAAG,EAAE,CAAC,CAAC;EACf;;EAEA,IAAIC,CAAC,GAAG,EAAE,CAAC,CAAC;;EAEZ,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,IAAI,GAAGN,CAAC;EACZ,IAAIO,KAAK,GAAG,CAAC,GAAGP,CAAC,CAAC,CAAC;;EAEnB,KAAKE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;IACtB;IACAE,CAAC,CAACC,IAAI,GAAGH,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,CAAC,CAAC;;EAGF,KAAKA,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3B;IACA,IAAIH,MAAM,CAACG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;MACpB;IACF,CAAC,CAAC;;IAGFE,CAAC,CAACE,IAAI,GAAGJ,CAAC,CAAC,GAAGE,CAAC,CAACC,IAAI,GAAGN,MAAM,CAACG,CAAC,CAAC,CAAC;IACjCE,CAAC,CAACC,IAAI,GAAGN,MAAM,CAACG,CAAC,CAAC,CAAC,GAAGA,CAAC;EACzB,CAAC,CAAC;;EAGF,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;IACtB;IACA,IAAIH,MAAM,CAACG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;MACpB;IACF,CAAC,CAAC;;IAGFD,CAAC,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACW,MAAM,EAAEN,CAAC,EAAED,CAAC,EAAEG,CAAC,EAAEC,IAAI,EAAEC,IAAI,EAAEH,IAAI,EAAEI,KAAK,CAAC;EAC3D;EAEA,OAAOJ,IAAI;AACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}