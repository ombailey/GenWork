{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createObjectNode = void 0;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'ObjectNode';\nvar dependencies = ['Node'];\nvar createObjectNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   object with key/value pairs\n   */\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.properties = properties || {}; // validate input\n\n    if (properties) {\n      if (!((0, _typeof2[\"default\"])(properties) === 'object') || !Object.keys(properties).every(function (key) {\n        return (0, _is.isNode)(properties[key]);\n      })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n  ObjectNode.prototype = new Node();\n  ObjectNode.prototype.type = 'ObjectNode';\n  ObjectNode.prototype.isObjectNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ObjectNode.prototype._compile = function (math, argNames) {\n    var evalEntries = {};\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        // we stringify/parse the key here to resolve unicode characters,\n        // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n        var stringifiedKey = (0, _string.stringify)(key);\n        var parsedKey = JSON.parse(stringifiedKey);\n        if (!(0, _customs.isSafeProperty)(this.properties, parsedKey)) {\n          throw new Error('No access to property \"' + parsedKey + '\"');\n        }\n        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n      }\n    }\n    return function evalObjectNode(scope, args, context) {\n      var obj = {};\n      for (var _key in evalEntries) {\n        if ((0, _object.hasOwnProperty)(evalEntries, _key)) {\n          obj[_key] = evalEntries[_key](scope, args, context);\n        }\n      }\n      return obj;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this);\n      }\n    }\n  };\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this));\n      }\n    }\n    return new ObjectNode(properties);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n\n  ObjectNode.prototype.clone = function () {\n    var properties = {};\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n    return new ObjectNode(properties);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  ObjectNode.prototype._toString = function (options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        entries.push((0, _string.stringify)(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n    return '{' + entries.join(', ') + '}';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  ObjectNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ObjectNode',\n      properties: this.properties\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n   *                       where mathjs is optional\n   * @returns {ObjectNode}\n   */\n\n  ObjectNode.fromJSON = function (json) {\n    return new ObjectNode(json.properties);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  ObjectNode.prototype.toHTML = function (options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + (0, _string.escape)(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ObjectNode.prototype._toTex = function (options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n      }\n    }\n    return \"\\\\left\\\\{\\\\begin{array}{ll}\".concat(entries.join('\\n'), \"\\\\end{array}\\\\right\\\\}\");\n  };\n  return ObjectNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createObjectNode = createObjectNode;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createObjectNode","_typeof2","_is","_string","_customs","_object","_factory","name","dependencies","factory","_ref","Node","ObjectNode","properties","SyntaxError","keys","every","key","isNode","TypeError","prototype","type","isObjectNode","_compile","math","argNames","evalEntries","hasOwnProperty","stringifiedKey","stringify","parsedKey","JSON","parse","isSafeProperty","Error","evalObjectNode","scope","args","context","obj","_key","forEach","callback","map","_ifNode","clone","_toString","options","entries","push","toString","join","toJSON","mathjs","fromJSON","json","toHTML","escape","_toTex","toTex","concat","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/node/ObjectNode.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createObjectNode = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ObjectNode';\nvar dependencies = ['Node'];\nvar createObjectNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   object with key/value pairs\n   */\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.properties = properties || {}; // validate input\n\n    if (properties) {\n      if (!((0, _typeof2[\"default\"])(properties) === 'object') || !Object.keys(properties).every(function (key) {\n        return (0, _is.isNode)(properties[key]);\n      })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n\n  ObjectNode.prototype = new Node();\n  ObjectNode.prototype.type = 'ObjectNode';\n  ObjectNode.prototype.isObjectNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ObjectNode.prototype._compile = function (math, argNames) {\n    var evalEntries = {};\n\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        // we stringify/parse the key here to resolve unicode characters,\n        // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n        var stringifiedKey = (0, _string.stringify)(key);\n        var parsedKey = JSON.parse(stringifiedKey);\n\n        if (!(0, _customs.isSafeProperty)(this.properties, parsedKey)) {\n          throw new Error('No access to property \"' + parsedKey + '\"');\n        }\n\n        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n      }\n    }\n\n    return function evalObjectNode(scope, args, context) {\n      var obj = {};\n\n      for (var _key in evalEntries) {\n        if ((0, _object.hasOwnProperty)(evalEntries, _key)) {\n          obj[_key] = evalEntries[_key](scope, args, context);\n        }\n      }\n\n      return obj;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this);\n      }\n    }\n  };\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n\n\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this));\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n\n\n  ObjectNode.prototype.clone = function () {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype._toString = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        entries.push((0, _string.stringify)(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n\n    return '{' + entries.join(', ') + '}';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ObjectNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ObjectNode',\n      properties: this.properties\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n   *                       where mathjs is optional\n   * @returns {ObjectNode}\n   */\n\n\n  ObjectNode.fromJSON = function (json) {\n    return new ObjectNode(json.properties);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype.toHTML = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + (0, _string.escape)(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ObjectNode.prototype._toTex = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if ((0, _object.hasOwnProperty)(this.properties, key)) {\n        entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n      }\n    }\n\n    return \"\\\\left\\\\{\\\\begin{array}{ll}\".concat(entries.join('\\n'), \"\\\\end{array}\\\\right\\\\}\");\n  };\n\n  return ObjectNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createObjectNode = createObjectNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}