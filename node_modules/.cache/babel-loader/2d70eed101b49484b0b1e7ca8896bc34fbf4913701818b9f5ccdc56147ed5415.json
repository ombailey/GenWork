{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFactory = configFactory;\nexports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;\nvar _object = require(\"../../utils/object.js\");\nvar _config2 = require(\"../config.js\");\nvar MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexports.MATRIX_OPTIONS = MATRIX_OPTIONS;\nvar NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexports.NUMBER_OPTIONS = NUMBER_OPTIONS;\nfunction configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      (0, _object.deepExtend)(config, options);\n      var curr = (0, _object.mapObject)(config, _object.clone);\n      var changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return (0, _object.mapObject)(config, _object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(_config2.DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","configFactory","NUMBER_OPTIONS","MATRIX_OPTIONS","_object","require","_config2","config","emit","_config","options","prev","mapObject","clone","validateOption","deepExtend","curr","changes","keys","DEFAULT_CONFIG","forEach","key","get","enumerable","configurable","contains","array","item","indexOf","name","values","undefined","console","warn","map","JSON","stringify","join"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/core/function/config.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFactory = configFactory;\nexports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _config2 = require(\"../config.js\");\n\nvar MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexports.MATRIX_OPTIONS = MATRIX_OPTIONS;\nvar NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexports.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\nfunction configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      (0, _object.deepExtend)(config, options);\n      var curr = (0, _object.mapObject)(config, _object.clone);\n      var changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return (0, _object.mapObject)(config, _object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(_config2.DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrCF,OAAO,CAACG,cAAc,GAAGH,OAAO,CAACI,cAAc,GAAG,KAAK,CAAC;AAExD,IAAIC,OAAO,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE9C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,cAAc,CAAC;AAEtC,IAAIF,cAAc,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;;AAE1CJ,OAAO,CAACI,cAAc,GAAGA,cAAc;AACvC,IAAID,cAAc,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;;AAE1DH,OAAO,CAACG,cAAc,GAAGA,cAAc;AAEvC,SAASD,aAAa,CAACM,MAAM,EAAEC,IAAI,EAAE;EACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,OAAO,CAACC,OAAO,EAAE;IACxB,IAAIA,OAAO,EAAE;MACX,IAAIC,IAAI,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACQ,SAAS,EAAEL,MAAM,EAAEH,OAAO,CAACS,KAAK,CAAC,CAAC,CAAC;;MAE1DC,cAAc,CAACJ,OAAO,EAAE,QAAQ,EAAEP,cAAc,CAAC;MACjDW,cAAc,CAACJ,OAAO,EAAE,QAAQ,EAAER,cAAc,CAAC,CAAC,CAAC;;MAEnD,CAAC,CAAC,EAAEE,OAAO,CAACW,UAAU,EAAER,MAAM,EAAEG,OAAO,CAAC;MACxC,IAAIM,IAAI,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACQ,SAAS,EAAEL,MAAM,EAAEH,OAAO,CAACS,KAAK,CAAC;MACxD,IAAII,OAAO,GAAG,CAAC,CAAC,EAAEb,OAAO,CAACQ,SAAS,EAAEF,OAAO,EAAEN,OAAO,CAACS,KAAK,CAAC,CAAC,CAAC;;MAE9DL,IAAI,CAAC,QAAQ,EAAEQ,IAAI,EAAEL,IAAI,EAAEM,OAAO,CAAC;MACnC,OAAOD,IAAI;IACb,CAAC,MAAM;MACL,OAAO,CAAC,CAAC,EAAEZ,OAAO,CAACQ,SAAS,EAAEL,MAAM,EAAEH,OAAO,CAACS,KAAK,CAAC;IACtD;EACF,CAAC,CAAC;;EAGFJ,OAAO,CAACN,cAAc,GAAGA,cAAc;EACvCM,OAAO,CAACP,cAAc,GAAGA,cAAc,CAAC,CAAC;;EAEzCL,MAAM,CAACqB,IAAI,CAACZ,QAAQ,CAACa,cAAc,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;IAC1DxB,MAAM,CAACC,cAAc,CAACW,OAAO,EAAEY,GAAG,EAAE;MAClCC,GAAG,EAAE,SAASA,GAAG,GAAG;QAClB,OAAOf,MAAM,CAACc,GAAG,CAAC;MACpB,CAAC;MACDE,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOf,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASgB,QAAQ,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC7B,OAAOD,KAAK,CAACE,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASb,cAAc,CAACJ,OAAO,EAAEmB,IAAI,EAAEC,MAAM,EAAE;EAC7C,IAAIpB,OAAO,CAACmB,IAAI,CAAC,KAAKE,SAAS,IAAI,CAACN,QAAQ,CAACK,MAAM,EAAEpB,OAAO,CAACmB,IAAI,CAAC,CAAC,EAAE;IACnE;IACAG,OAAO,CAACC,IAAI,CAAC,0BAA0B,GAAGvB,OAAO,CAACmB,IAAI,CAAC,GAAG,8BAA8B,GAAGA,IAAI,GAAG,KAAK,GAAG,qBAAqB,GAAGC,MAAM,CAACI,GAAG,CAAC,UAAUlC,KAAK,EAAE;MAC5J,OAAOmC,IAAI,CAACC,SAAS,CAACpC,KAAK,CAAC;IAC9B,CAAC,CAAC,CAACqC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}