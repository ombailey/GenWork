{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultinomial = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nvar createMultinomial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    divide = _ref.divide,\n    multiply = _ref.multiply,\n    factorial = _ref.factorial,\n    isInteger = _ref.isInteger,\n    isPositive = _ref.isPositive;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      (0, _collection.deepForEach)(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});\nexports.createMultinomial = createMultinomial;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMultinomial","_collection","require","_factory","name","dependencies","factory","_ref","typed","add","divide","multiply","factorial","isInteger","isPositive","ArrayMatrix","a","sum","denom","deepForEach","ai","TypeError"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/probability/multinomial.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultinomial = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nvar createMultinomial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      multiply = _ref.multiply,\n      factorial = _ref.factorial,\n      isInteger = _ref.isInteger,\n      isPositive = _ref.isPositive;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      (0, _collection.deepForEach)(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});\nexports.createMultinomial = createMultinomial;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAElC,IAAIC,WAAW,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;AACjG,IAAIL,iBAAiB,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC/F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,GAAG,GAAGF,IAAI,CAACE,GAAG;IACdC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;IACxBC,SAAS,GAAGL,IAAI,CAACK,SAAS;IAC1BC,SAAS,GAAGN,IAAI,CAACM,SAAS;IAC1BC,UAAU,GAAGP,IAAI,CAACO,UAAU;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAON,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASW,WAAW,CAACC,CAAC,EAAE;MACxC,IAAIC,GAAG,GAAG,CAAC;MACX,IAAIC,KAAK,GAAG,CAAC;MACb,CAAC,CAAC,EAAEjB,WAAW,CAACkB,WAAW,EAAEH,CAAC,EAAE,UAAUI,EAAE,EAAE;QAC5C,IAAI,CAACP,SAAS,CAACO,EAAE,CAAC,IAAI,CAACN,UAAU,CAACM,EAAE,CAAC,EAAE;UACrC,MAAM,IAAIC,SAAS,CAAC,yDAAyD,CAAC;QAChF;QAEAJ,GAAG,GAAGR,GAAG,CAACQ,GAAG,EAAEG,EAAE,CAAC;QAClBF,KAAK,GAAGP,QAAQ,CAACO,KAAK,EAAEN,SAAS,CAACQ,EAAE,CAAC,CAAC;MACxC,CAAC,CAAC;MACF,OAAOV,MAAM,CAACE,SAAS,CAACK,GAAG,CAAC,EAAEC,KAAK,CAAC;IACtC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFpB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}