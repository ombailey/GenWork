{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetDifference = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    size = _ref.size,\n    subset = _ref.subset,\n    compareNatural = _ref.compareNatural,\n    Index = _ref.Index,\n    DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return (0, _array.flatten)(a1.toArray());\n      } else {\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return (0, _array.generalize)(result);\n      } // return a matrix otherwise\n\n      return new DenseMatrix((0, _array.generalize)(result));\n    }\n  });\n});\nexports.createSetDifference = createSetDifference;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSetDifference","_array","require","_factory","name","dependencies","factory","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrixArrayMatrix","a1","a2","result","flatten","toArray","b1","identify","Array","isArray","sort","b2","inb2","i","length","j","identifier","push","generalize"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/set/setDifference.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetDifference = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return (0, _array.flatten)(a1.toArray());\n      } else {\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return (0, _array.generalize)(result);\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix((0, _array.generalize)(result));\n    }\n  });\n});\nexports.createSetDifference = createSetDifference;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}