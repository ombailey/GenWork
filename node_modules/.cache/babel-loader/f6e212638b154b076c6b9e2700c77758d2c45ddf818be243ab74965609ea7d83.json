{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMax = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nvar createMax = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    numeric = _ref.numeric,\n    larger = _ref.larger;\n\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return (0, _collection.reduce)(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n      return _max(args);\n    }\n  });\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n  function _max(array) {\n    var res;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', value);\n      }\n    });\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n    return res;\n  }\n});\nexports.createMax = createMax;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMax","_collection","require","_factory","_improveErrorMessage","name","dependencies","factory","_ref","typed","config","numeric","larger","_max","ArrayMatrixNumberBigNumber","array","dim","reduce","valueOf","_largest","_","args","containsCollections","TypeError","x","y","err","improveErrorMessage","res","deepForEach","isNaN","NaN","undefined","Error","number"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/statistics/max.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMax = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nvar createMax = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      numeric = _ref.numeric,\n      larger = _ref.larger;\n\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return (0, _collection.reduce)(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var res;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', value);\n      }\n    });\n\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n\n    return res;\n  }\n});\nexports.createMax = createMax;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}