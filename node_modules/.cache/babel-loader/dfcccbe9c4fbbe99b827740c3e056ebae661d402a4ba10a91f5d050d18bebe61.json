{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEigs = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _complexEigs = require(\"./eigs/complexEigs.js\");\nvar _realSymetric = require(\"./eigs/realSymetric.js\");\nvar _is = require(\"../../utils/is.js\");\nvar name = 'eigs'; // The absolute state of math.js's dependency system:\n\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nvar createEigs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n    typed = _ref.typed,\n    matrix = _ref.matrix,\n    addScalar = _ref.addScalar,\n    subtract = _ref.subtract,\n    equal = _ref.equal,\n    abs = _ref.abs,\n    atan = _ref.atan,\n    cos = _ref.cos,\n    sin = _ref.sin,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    inv = _ref.inv,\n    bignumber = _ref.bignumber,\n    multiply = _ref.multiply,\n    add = _ref.add,\n    larger = _ref.larger,\n    column = _ref.column,\n    flatten = _ref.flatten,\n    number = _ref.number,\n    complex = _ref.complex,\n    sqrt = _ref.sqrt,\n    diag = _ref.diag,\n    qr = _ref.qr,\n    usolve = _ref.usolve,\n    usolveAll = _ref.usolveAll,\n    im = _ref.im,\n    re = _ref.re,\n    smaller = _ref.smaller,\n    matrixFromColumns = _ref.matrixFromColumns,\n    dot = _ref.dot;\n  var doRealSymetric = (0, _realSymetric.createRealSymmetric)({\n    config: config,\n    addScalar: addScalar,\n    subtract: subtract,\n    column: column,\n    flatten: flatten,\n    equal: equal,\n    abs: abs,\n    atan: atan,\n    cos: cos,\n    sin: sin,\n    multiplyScalar: multiplyScalar,\n    inv: inv,\n    bignumber: bignumber,\n    complex: complex,\n    multiply: multiply,\n    add: add\n  });\n  var doComplexEigs = (0, _complexEigs.createComplexEigs)({\n    config: config,\n    addScalar: addScalar,\n    subtract: subtract,\n    multiply: multiply,\n    multiplyScalar: multiplyScalar,\n    flatten: flatten,\n    divideScalar: divideScalar,\n    sqrt: sqrt,\n    abs: abs,\n    bignumber: bignumber,\n    diag: diag,\n    qr: qr,\n    inv: inv,\n    usolve: usolve,\n    usolveAll: usolveAll,\n    equal: equal,\n    complex: complex,\n    larger: larger,\n    smaller: smaller,\n    matrixFromColumns: matrixFromColumns,\n    dot: dot\n  });\n  /**\n   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.\n   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –\n   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).\n   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information\n   * in `err.values` and `err.vectors`.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x, [prec])\n   *\n   * Examples:\n   *\n   *     const { eigs, multiply, column, transpose } = math\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H\n   *     E[0] == UTxHxU[0][0]  // returns true\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   *\n   * @param {number | BigNumber} [prec] Precision, default value: 1e-15\n   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n   *\n   */\n\n  return typed('eigs', {\n    Array: function Array(x) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat);\n    },\n    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat, prec);\n    },\n    Matrix: function Matrix(mat) {\n      var _computeValuesAndVect = computeValuesAndVectors(mat),\n        values = _computeValuesAndVect.values,\n        vectors = _computeValuesAndVect.vectors;\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    },\n    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {\n      var _computeValuesAndVect2 = computeValuesAndVectors(mat, prec),\n        values = _computeValuesAndVect2.values,\n        vectors = _computeValuesAndVect2.vectors;\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    }\n  });\n  function computeValuesAndVectors(mat, prec) {\n    if (prec === undefined) {\n      prec = config.epsilon;\n    }\n    var size = mat.size();\n    if (size.length !== 2 || size[0] !== size[1]) {\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n    }\n    var arr = mat.toArray();\n    var N = size[0];\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N);\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N);\n        return doRealSymetric(arr, N, prec, _type);\n      }\n    }\n    var type = coerceTypes(mat, arr, N);\n    return doComplexEigs(arr, N, prec, type);\n  }\n  /** @return {boolean} */\n\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /** @return {boolean} */\n\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n        if ((0, _is.isNumber)(el) || (0, _is.isFraction)(el)) {\n          hasNumber = true;\n        } else if ((0, _is.isBigNumber)(el)) {\n          hasBig = true;\n        } else if ((0, _is.isComplex)(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + (0, _is.typeOf)(el));\n        }\n      }\n    }\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n      return 'Complex';\n    }\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n      return 'BigNumber';\n    }\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});\nexports.createEigs = createEigs;","map":{"version":3,"names":["Object","defineProperty","exports","value","createEigs","_factory","require","_string","_complexEigs","_realSymetric","_is","name","dependencies","factory","_ref","config","typed","matrix","addScalar","subtract","equal","abs","atan","cos","sin","multiplyScalar","divideScalar","inv","bignumber","multiply","add","larger","column","flatten","number","complex","sqrt","diag","qr","usolve","usolveAll","im","re","smaller","matrixFromColumns","dot","doRealSymetric","createRealSymmetric","doComplexEigs","createComplexEigs","Array","x","mat","computeValuesAndVectors","ArrayNumberBigNumber","prec","Matrix","_computeValuesAndVect","values","vectors","MatrixNumberBigNumber","_computeValuesAndVect2","undefined","epsilon","size","length","RangeError","format","arr","toArray","N","isReal","coerceReal","isSymmetric","_type","coerceTypes","type","i","j","datatype","hasNumber","hasBig","hasComplex","el","isNumber","isFraction","isBigNumber","isComplex","TypeError","typeOf","console","warn","_i","_j","_i2","_j2","_i3","_j3"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/eigs.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEigs = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _complexEigs = require(\"./eigs/complexEigs.js\");\n\nvar _realSymetric = require(\"./eigs/realSymetric.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'eigs'; // The absolute state of math.js's dependency system:\n\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nvar createEigs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      equal = _ref.equal,\n      abs = _ref.abs,\n      atan = _ref.atan,\n      cos = _ref.cos,\n      sin = _ref.sin,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      inv = _ref.inv,\n      bignumber = _ref.bignumber,\n      multiply = _ref.multiply,\n      add = _ref.add,\n      larger = _ref.larger,\n      column = _ref.column,\n      flatten = _ref.flatten,\n      number = _ref.number,\n      complex = _ref.complex,\n      sqrt = _ref.sqrt,\n      diag = _ref.diag,\n      qr = _ref.qr,\n      usolve = _ref.usolve,\n      usolveAll = _ref.usolveAll,\n      im = _ref.im,\n      re = _ref.re,\n      smaller = _ref.smaller,\n      matrixFromColumns = _ref.matrixFromColumns,\n      dot = _ref.dot;\n  var doRealSymetric = (0, _realSymetric.createRealSymmetric)({\n    config: config,\n    addScalar: addScalar,\n    subtract: subtract,\n    column: column,\n    flatten: flatten,\n    equal: equal,\n    abs: abs,\n    atan: atan,\n    cos: cos,\n    sin: sin,\n    multiplyScalar: multiplyScalar,\n    inv: inv,\n    bignumber: bignumber,\n    complex: complex,\n    multiply: multiply,\n    add: add\n  });\n  var doComplexEigs = (0, _complexEigs.createComplexEigs)({\n    config: config,\n    addScalar: addScalar,\n    subtract: subtract,\n    multiply: multiply,\n    multiplyScalar: multiplyScalar,\n    flatten: flatten,\n    divideScalar: divideScalar,\n    sqrt: sqrt,\n    abs: abs,\n    bignumber: bignumber,\n    diag: diag,\n    qr: qr,\n    inv: inv,\n    usolve: usolve,\n    usolveAll: usolveAll,\n    equal: equal,\n    complex: complex,\n    larger: larger,\n    smaller: smaller,\n    matrixFromColumns: matrixFromColumns,\n    dot: dot\n  });\n  /**\n   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.\n   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –\n   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).\n   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information\n   * in `err.values` and `err.vectors`.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x, [prec])\n   *\n   * Examples:\n   *\n   *     const { eigs, multiply, column, transpose } = math\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H\n   *     E[0] == UTxHxU[0][0]  // returns true\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   *\n   * @param {number | BigNumber} [prec] Precision, default value: 1e-15\n   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n   *\n   */\n\n  return typed('eigs', {\n    Array: function Array(x) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat);\n    },\n    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat, prec);\n    },\n    Matrix: function Matrix(mat) {\n      var _computeValuesAndVect = computeValuesAndVectors(mat),\n          values = _computeValuesAndVect.values,\n          vectors = _computeValuesAndVect.vectors;\n\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    },\n    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {\n      var _computeValuesAndVect2 = computeValuesAndVectors(mat, prec),\n          values = _computeValuesAndVect2.values,\n          vectors = _computeValuesAndVect2.vectors;\n\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    }\n  });\n\n  function computeValuesAndVectors(mat, prec) {\n    if (prec === undefined) {\n      prec = config.epsilon;\n    }\n\n    var size = mat.size();\n\n    if (size.length !== 2 || size[0] !== size[1]) {\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');\n    }\n\n    var arr = mat.toArray();\n    var N = size[0];\n\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N);\n\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N);\n\n        return doRealSymetric(arr, N, prec, _type);\n      }\n    }\n\n    var type = coerceTypes(mat, arr, N);\n    return doComplexEigs(arr, N, prec, type);\n  }\n  /** @return {boolean} */\n\n\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /** @return {boolean} */\n\n\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n\n\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n\n        if ((0, _is.isNumber)(el) || (0, _is.isFraction)(el)) {\n          hasNumber = true;\n        } else if ((0, _is.isBigNumber)(el)) {\n          hasBig = true;\n        } else if ((0, _is.isComplex)(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + (0, _is.typeOf)(el));\n        }\n      }\n    }\n\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n\n      return 'Complex';\n    }\n\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n\n      return 'BigNumber';\n    }\n\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});\nexports.createEigs = createEigs;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}