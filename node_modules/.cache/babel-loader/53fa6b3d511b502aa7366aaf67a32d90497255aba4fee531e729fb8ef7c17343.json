{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.endsWith = endsWith;\nexports.format = format;\nexports.stringify = stringify;\nexports.escape = escape;\nexports.compareText = compareText;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _is = require(\"./is.js\");\nvar _number = require(\"./number.js\");\nvar _formatter = require(\"./bignumber/formatter.js\");\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nfunction endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\nfunction format(value, options) {\n  if (typeof value === 'number') {\n    return (0, _number.format)(value, options);\n  }\n  if ((0, _is.isBigNumber)(value)) {\n    return (0, _formatter.format)(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n  if ((0, _is.isString)(value)) {\n    return '\"' + value + '\"';\n  }\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n  if (value && (0, _typeof2[\"default\"])(value) === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(function (key) {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\nfunction stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n    i++;\n  }\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\nfunction escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\nfunction looksLikeFraction(value) {\n  return value && (0, _typeof2[\"default\"])(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\nfunction compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!(0, _is.isString)(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(x) + ', index: 0)');\n  }\n  if (!(0, _is.isString)(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(y) + ', index: 1)');\n  }\n  return x === y ? 0 : x > y ? 1 : -1;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","endsWith","format","stringify","escape","compareText","_typeof2","_is","_number","_formatter","text","search","start","length","end","substring","options","isBigNumber","looksLikeFraction","fraction","s","n","d","toString","Array","isArray","formatArray","isString","syntax","String","entries","keys","map","key","join","escaped","i","c","charAt","indexOf","replace","array","str","len","x","y","TypeError","typeOf"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/utils/string.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.endsWith = endsWith;\nexports.format = format;\nexports.stringify = stringify;\nexports.escape = escape;\nexports.compareText = compareText;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _is = require(\"./is.js\");\n\nvar _number = require(\"./number.js\");\n\nvar _formatter = require(\"./bignumber/formatter.js\");\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nfunction endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\n\nfunction format(value, options) {\n  if (typeof value === 'number') {\n    return (0, _number.format)(value, options);\n  }\n\n  if ((0, _is.isBigNumber)(value)) {\n    return (0, _formatter.format)(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if ((0, _is.isString)(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && (0, _typeof2[\"default\"])(value) === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(function (key) {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nfunction stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\n\nfunction escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && (0, _typeof2[\"default\"])(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\n\nfunction compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!(0, _is.isString)(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(x) + ', index: 0)');\n  }\n\n  if (!(0, _is.isString)(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(y) + ', index: 1)');\n  }\n\n  return x === y ? 0 : x > y ? 1 : -1;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}