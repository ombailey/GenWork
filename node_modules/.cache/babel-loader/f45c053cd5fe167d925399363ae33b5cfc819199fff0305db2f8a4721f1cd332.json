{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndexTransform = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'index';\nvar dependencies = ['Index'];\nvar createIndexTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Index = _ref.Index;\n\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if ((0, _is.isRange)(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isNumber)(arg)) {\n        arg--;\n      } else if ((0, _is.isBigNumber)(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      args[i] = arg;\n    }\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});\nexports.createIndexTransform = createIndexTransform;","map":{"version":3,"names":["Object","defineProperty","exports","value","createIndexTransform","_is","require","_factory","name","dependencies","factory","_ref","Index","indexTransform","args","i","ii","arguments","length","arg","isRange","start","end","step","isSet","map","v","isArray","isMatrix","isNumber","isBigNumber","toNumber","TypeError","res","apply","isTransformFunction"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/expression/transform/index.transform.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndexTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'index';\nvar dependencies = ['Index'];\nvar createIndexTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Index = _ref.Index;\n\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if ((0, _is.isRange)(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isNumber)(arg)) {\n        arg--;\n      } else if ((0, _is.isBigNumber)(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});\nexports.createIndexTransform = createIndexTransform;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,oBAAoB,GAAG,KAAK,CAAC;AAErC,IAAIC,GAAG,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEtC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIE,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIL,oBAAoB,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAClG,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;EACE,OAAO,SAASC,cAAc,GAAG;IAC/B,IAAIC,IAAI,GAAG,EAAE;IAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MAClD,IAAII,GAAG,GAAGF,SAAS,CAACF,CAAC,CAAC,CAAC,CAAC;;MAExB,IAAI,CAAC,CAAC,EAAEV,GAAG,CAACe,OAAO,EAAED,GAAG,CAAC,EAAE;QACzBA,GAAG,CAACE,KAAK,EAAE;QACXF,GAAG,CAACG,GAAG,IAAIH,GAAG,CAACI,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;MACjC,CAAC,MAAM,IAAIJ,GAAG,IAAIA,GAAG,CAACK,KAAK,KAAK,IAAI,EAAE;QACpCL,GAAG,GAAGA,GAAG,CAACM,GAAG,CAAC,UAAUC,CAAC,EAAE;UACzB,OAAOA,CAAC,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAAC,CAAC,EAAErB,GAAG,CAACsB,OAAO,EAAER,GAAG,CAAC,IAAI,CAAC,CAAC,EAAEd,GAAG,CAACuB,QAAQ,EAAET,GAAG,CAAC,EAAE;QAC1DA,GAAG,GAAGA,GAAG,CAACM,GAAG,CAAC,UAAUC,CAAC,EAAE;UACzB,OAAOA,CAAC,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAAC,CAAC,EAAErB,GAAG,CAACwB,QAAQ,EAAEV,GAAG,CAAC,EAAE;QACjCA,GAAG,EAAE;MACP,CAAC,MAAM,IAAI,CAAC,CAAC,EAAEd,GAAG,CAACyB,WAAW,EAAEX,GAAG,CAAC,EAAE;QACpCA,GAAG,GAAGA,GAAG,CAACY,QAAQ,EAAE,GAAG,CAAC;MAC1B,CAAC,MAAM,IAAI,OAAOZ,GAAG,KAAK,QAAQ,EAAE,CAAC;MAAA,CACpC,MAAM;QACL,MAAM,IAAIa,SAAS,CAAC,8DAA8D,CAAC;MACrF;MAEAlB,IAAI,CAACC,CAAC,CAAC,GAAGI,GAAG;IACf;IAEA,IAAIc,GAAG,GAAG,IAAIrB,KAAK,EAAE;IACrBA,KAAK,CAACsB,KAAK,CAACD,GAAG,EAAEnB,IAAI,CAAC;IACtB,OAAOmB,GAAG;EACZ,CAAC;AACH,CAAC,EAAE;EACDE,mBAAmB,EAAE;AACvB,CAAC,CAAC;AACFjC,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}