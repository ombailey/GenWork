{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRange = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _noop = require(\"../../utils/noop.js\");\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nvar createRange = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    matrix = _ref.matrix,\n    bignumber = _ref.bignumber,\n    smaller = _ref.smaller,\n    smallerEq = _ref.smallerEq,\n    larger = _ref.larger,\n    largerEq = _ref.largerEq;\n\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : (0, _noop.noMatrix)();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    var fn;\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        (0, _noop.noBignumber)();\n      }\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n\n  function _parse(str) {\n    var args = str.split(':'); // number\n\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});\nexports.createRange = createRange;","map":{"version":3,"names":["Object","defineProperty","exports","value","createRange","_factory","require","_noop","name","dependencies","factory","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","string","_strRange","numberNumber","start","end","_out","_rangeEx","numberNumberNumber","step","numberNumberBoolean","includeEnd","_rangeInc","numberNumberNumberBoolean","BigNumberBigNumber","BigNumber","constructor","_bigRangeEx","BigNumberBigNumberBigNumber","BigNumberBigNumberBoolean","_bigRangeInc","BigNumberBigNumberBigNumberBoolean","arr","noMatrix","str","r","_parse","SyntaxError","fn","number","undefined","noBignumber","array","x","push","zero","gt","plus","lt","args","split","nums","map","arg","Number","invalid","some","num","isNaN","length"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/range.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRange = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _noop = require(\"../../utils/noop.js\");\n\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nvar createRange = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : (0, _noop.noMatrix)();\n    }\n\n    return arr;\n  }\n\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    var fn;\n\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        (0, _noop.noBignumber)();\n      }\n\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n\n\n  function _parse(str) {\n    var args = str.split(':'); // number\n\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n});\nexports.createRange = createRange;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}