{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMedian = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nvar createMedian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    divide = _ref.divide,\n    compare = _ref.compare,\n    partitionSelect = _ref.partitionSelect;\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = (0, _array.flatten)(array.valueOf());\n      var num = array.length;\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n      return _median(args);\n    }\n  });\n});\nexports.createMedian = createMedian;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMedian","_collection","require","_array","_factory","_improveErrorMessage","name","dependencies","factory","_ref","typed","add","divide","compare","partitionSelect","_median","array","flatten","valueOf","num","length","Error","mid","right","left","i","middle2","m","middle","err","improveErrorMessage","numberBigNumberComplexUnit","numberBigNumberComplexUnitNumberBigNumberComplexUnit","ArrayMatrixNumberBigNumber","dim","_","args","containsCollections","TypeError"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/statistics/median.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMedian = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nvar createMedian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      compare = _ref.compare,\n      partitionSelect = _ref.partitionSelect;\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = (0, _array.flatten)(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});\nexports.createMedian = createMedian;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}