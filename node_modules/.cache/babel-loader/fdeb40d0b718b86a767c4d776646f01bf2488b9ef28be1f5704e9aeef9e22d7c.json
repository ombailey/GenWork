{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMean = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nvar createMean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    divide = _ref.divide;\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n      return _mean(args);\n    }\n  });\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      var s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);\n      }\n    });\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n    return divide(sum, num);\n  }\n});\nexports.createMean = createMean;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMean","_collection","require","_array","_factory","_improveErrorMessage","name","dependencies","factory","_ref","typed","add","divide","_mean","_nmeanDim","_","args","containsCollections","TypeError","array","dim","sum","reduce","s","Array","isArray","arraySize","size","err","improveErrorMessage","num","deepForEach","undefined","Error"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/statistics/mean.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMean = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nvar createMean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide;\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      var s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n});\nexports.createMean = createMean;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}