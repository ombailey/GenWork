{"ast":null,"code":"\"use strict\";\n\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar utils_1 = __importDefault(require(\"../shared/utils\"));\nvar config_1 = __importDefault(require(\"../shared/config\"));\nvar errors_1 = __importDefault(require(\"../shared/errors\"));\nvar defaults_1 = require(\"../shared/defaults\");\nvar tensorflowlib_1 = __importDefault(require(\"../shared/tensorflowlib\"));\nvar utils = new utils_1.default();\n/**\n * N-Dimension data structure. Stores multi-dimensional\n * data in a size-mutable, labeled data structure. Analogous to the Python Pandas DataFrame.\n *\n * @param  Object\n *\n *  data:  1D or 2D Array, JSON, Tensor, Block of data.\n *\n *  index: Array of numeric or string names for subseting array. If not specified, indexes are auto generated.\n *\n *  columns: Array of column names. If not specified, column names are auto generated.\n *\n *  dtypes: Array of data types for each the column. If not specified, dtypes inferred.\n *\n *  config: General configuration object for NDframe\n *\n * @returns NDframe\n */\nvar NDframe = /** @class */function () {\n  function NDframe(_a) {\n    var data = _a.data,\n      index = _a.index,\n      columns = _a.columns,\n      dtypes = _a.dtypes,\n      config = _a.config,\n      isSeries = _a.isSeries;\n    this.$dataIncolumnFormat = [];\n    this.$index = [];\n    this.$columns = [];\n    this.$dtypes = [];\n    this.$isSeries = isSeries;\n    if (config) {\n      this.$config = new config_1.default(__assign(__assign({}, defaults_1.BASE_CONFIG), config));\n    } else {\n      this.$config = new config_1.default(defaults_1.BASE_CONFIG);\n    }\n    if (data instanceof tensorflowlib_1.default.Tensor) {\n      data = data.arraySync();\n    }\n    if (data === undefined || Array.isArray(data) && data.length === 0) {\n      if (columns === undefined) columns = [];\n      if (dtypes === undefined) dtypes = [];\n      if (columns.length === 0 && dtypes.length !== 0) errors_1.default.throwDtypeWithoutColumnError();\n      this.loadArrayIntoNdframe({\n        data: [],\n        index: [],\n        columns: columns,\n        dtypes: dtypes\n      });\n    } else if (utils.is1DArray(data)) {\n      this.loadArrayIntoNdframe({\n        data: data,\n        index: index,\n        columns: columns,\n        dtypes: dtypes\n      });\n    } else {\n      if (Array.isArray(data) && utils.isObject(data[0])) {\n        this.loadObjectIntoNdframe({\n          data: data,\n          type: 1,\n          index: index,\n          columns: columns,\n          dtypes: dtypes\n        });\n      } else if (utils.isObject(data)) {\n        this.loadObjectIntoNdframe({\n          data: data,\n          type: 2,\n          index: index,\n          columns: columns,\n          dtypes: dtypes\n        });\n      } else if (Array.isArray(data[0]) || utils.isNumber(data[0]) || utils.isString(data[0])) {\n        this.loadArrayIntoNdframe({\n          data: data,\n          index: index,\n          columns: columns,\n          dtypes: dtypes\n        });\n      } else if (Array.isArray(data) && data.length > 0 && utils.isDate(data[0])) {\n        this.loadArrayIntoNdframe({\n          data: data,\n          index: index,\n          columns: columns,\n          dtypes: dtypes\n        });\n      } else {\n        throw new Error(\"File format not supported!\");\n      }\n    }\n  }\n  /**\n   * Internal function to load array of data into NDFrame\n   * @param data The array of data to load into NDFrame\n   * @param index Array of numeric or string names for subsetting array.\n   * @param columns Array of column names.\n   * @param dtypes Array of data types for each the column.\n  */\n  NDframe.prototype.loadArrayIntoNdframe = function (_a) {\n    var data = _a.data,\n      index = _a.index,\n      columns = _a.columns,\n      dtypes = _a.dtypes;\n    // this.$data = utils.replaceUndefinedWithNaN(data, this.$isSeries);\n    this.$data = data;\n    if (!this.$config.isLowMemoryMode) {\n      //In NOT low memory mode, we transpose the array and save in column format.\n      //This makes column data retrieval run in constant time\n      this.$dataIncolumnFormat = utils.transposeArray(data);\n    }\n    this.$setIndex(index);\n    this.$setDtypes(dtypes);\n    this.$setColumnNames(columns);\n  };\n  /**\n   * Internal function to format and load a Javascript object or object of arrays into NDFrame.\n   * @param data Object or object of arrays.\n   * @param type The type of the object. There are two recognized types:\n   *\n   * - type 1 object are in JSON format `[{a: 1, b: 2}, {a: 30, b: 20}]`.\n   *\n   * - type 2 object are of the form `{a: [1,2,3,4], b: [30,20, 30, 20}]}`\n   * @param index Array of numeric or string names for subsetting array.\n   * @param columns Array of column names.\n   * @param dtypes Array of data types for each the column.\n  */\n  NDframe.prototype.loadObjectIntoNdframe = function (_a) {\n    var data = _a.data,\n      type = _a.type,\n      index = _a.index,\n      columns = _a.columns,\n      dtypes = _a.dtypes;\n    if (type === 1 && Array.isArray(data)) {\n      var _data = data.map(function (item) {\n        return Object.values(item);\n      });\n      var _columnNames = void 0;\n      if (columns) {\n        _columnNames = columns;\n      } else {\n        _columnNames = Object.keys(data[0]);\n      }\n      this.loadArrayIntoNdframe({\n        data: _data,\n        index: index,\n        columns: _columnNames,\n        dtypes: dtypes\n      });\n    } else {\n      var _b = utils.getRowAndColValues(data),\n        _data = _b[0],\n        _colNames = _b[1];\n      var _columnNames = void 0;\n      if (columns) {\n        _columnNames = columns;\n      } else {\n        _columnNames = _colNames;\n      }\n      this.loadArrayIntoNdframe({\n        data: _data,\n        index: index,\n        columns: _columnNames,\n        dtypes: dtypes\n      });\n    }\n  };\n  Object.defineProperty(NDframe.prototype, \"tensor\", {\n    /**\n     * Converts and returns the data in the NDframe as a Tensorflow.js Tensor.\n    */\n    get: function () {\n      if (this.$isSeries) {\n        return tensorflowlib_1.default.tensor1d(this.$data, this.$dtypes[0]);\n      } else {\n        return tensorflowlib_1.default.tensor2d(this.$data, this.shape, \"float32\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NDframe.prototype, \"dtypes\", {\n    /**\n     * Returns the dtypes of the columns\n    */\n    get: function () {\n      return this.$dtypes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Internal function to set the Dtypes of the NDFrame from an array. This function\n   * performs the necessary checks.\n  */\n  NDframe.prototype.$setDtypes = function (dtypes) {\n    if (this.$isSeries) {\n      if (dtypes) {\n        if (this.$data.length != 0 && dtypes.length != 1) {\n          errors_1.default.throwDtypesLengthError(this, dtypes);\n        }\n        if (!defaults_1.DATA_TYPES.includes(\"\" + dtypes[0])) {\n          errors_1.default.throwDtypeNotSupportedError(dtypes[0]);\n        }\n        this.$dtypes = dtypes;\n      } else {\n        this.$dtypes = utils.inferDtype(this.$data);\n      }\n    } else {\n      if (dtypes) {\n        if (this.$data.length != 0 && dtypes.length != this.shape[1]) {\n          errors_1.default.throwDtypesLengthError(this, dtypes);\n        }\n        if (this.$data.length == 0 && dtypes.length == 0) {\n          this.$dtypes = dtypes;\n        } else {\n          dtypes.forEach(function (dtype) {\n            if (!defaults_1.DATA_TYPES.includes(dtype)) {\n              errors_1.default.throwDtypeNotSupportedError(dtype);\n            }\n          });\n          this.$dtypes = dtypes;\n        }\n      } else {\n        this.$dtypes = utils.inferDtype(this.$data);\n      }\n    }\n  };\n  Object.defineProperty(NDframe.prototype, \"ndim\", {\n    /**\n     * Returns the dimension of the data. Series have a dimension of 1,\n     * while DataFrames have a dimension of 2.\n    */\n    get: function () {\n      if (this.$isSeries) {\n        return 1;\n      } else {\n        return 2;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NDframe.prototype, \"axis\", {\n    /**\n     * Returns the axis labels of the NDFrame.\n    */\n    get: function () {\n      return {\n        index: this.$index,\n        columns: this.$columns\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NDframe.prototype, \"config\", {\n    /**\n     * Returns the configuration object of the NDFrame.\n    */\n    get: function () {\n      return this.$config;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Internal function to set the configuration of the ndframe\n  */\n  NDframe.prototype.$setConfig = function (config) {\n    this.$config = config;\n  };\n  Object.defineProperty(NDframe.prototype, \"index\", {\n    /**\n     * Returns the indices of the NDFrame\n    */\n    get: function () {\n      return this.$index;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Internal function to set the index of the NDFrame with the specified\n   * array of indices. Performs all necessary checks to ensure that the\n   * index is valid.\n  */\n  NDframe.prototype.$setIndex = function (index) {\n    if (index) {\n      if (this.$data.length != 0 && index.length != this.shape[0]) {\n        errors_1.default.throwIndexLengthError(this, index);\n      }\n      if (Array.from(new Set(index)).length !== this.shape[0]) {\n        errors_1.default.throwIndexDuplicateError();\n      }\n      this.$index = index;\n    } else {\n      this.$index = utils.range(0, this.shape[0] - 1); //generate index\n    }\n  };\n  /**\n   * Internal function to reset the index of the NDFrame using a range of indices.\n  */\n  NDframe.prototype.$resetIndex = function () {\n    this.$index = utils.range(0, this.shape[0] - 1);\n  };\n  Object.defineProperty(NDframe.prototype, \"columns\", {\n    /**\n     * Returns the column names of the NDFrame\n    */\n    get: function () {\n      return this.$columns;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Internal function to set the column names for the NDFrame. This function\n   * performs a check to ensure that the column names are unique, and same length as the\n   * number of columns in the data.\n  */\n  NDframe.prototype.$setColumnNames = function (columns) {\n    // console.log(columns);\n    if (this.$isSeries) {\n      if (columns) {\n        if (this.$data.length != 0 && columns.length != 1 && typeof columns != 'string') {\n          errors_1.default.throwColumnNamesLengthError(this, columns);\n        }\n        this.$columns = columns;\n      } else {\n        this.$columns = [\"0\"];\n      }\n    } else {\n      if (columns) {\n        if (this.$data.length != 0 && columns.length != this.shape[1]) {\n          errors_1.default.throwColumnNamesLengthError(this, columns);\n        }\n        if (Array.from(new Set(columns)).length !== columns.length) {\n          errors_1.default.throwColumnDuplicateError();\n        }\n        this.$columns = columns;\n      } else {\n        this.$columns = utils.range(0, this.shape[1] - 1).map(function (val) {\n          return \"\" + val;\n        }); //generate columns\n      }\n    }\n  };\n\n  Object.defineProperty(NDframe.prototype, \"shape\", {\n    /**\n     * Returns the shape of the NDFrame. Shape is determined by [row length, column length]\n    */\n    get: function () {\n      if (this.$data.length === 0) {\n        if (this.$columns.length === 0) return [0, 0];else return [0, this.$columns.length];\n      }\n      if (this.$isSeries) {\n        return [this.$data.length, 1];\n      } else {\n        var rowLen = this.$data.length;\n        var colLen = this.$data[0].length;\n        return [rowLen, colLen];\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NDframe.prototype, \"values\", {\n    /**\n     * Returns the underlying data in Array format.\n    */\n    get: function () {\n      return this.$data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates the internal $data property to the specified value\n   * @param values An array of values to set\n   * @param checkLength Whether to check the length of the new values and the existing row length\n   * @param checkColumnLength Whether to check the length of the new values and the existing column length\n   * */\n  NDframe.prototype.$setValues = function (values, checkLength, checkColumnLength) {\n    var _this = this;\n    if (checkLength === void 0) {\n      checkLength = true;\n    }\n    if (checkColumnLength === void 0) {\n      checkColumnLength = true;\n    }\n    if (this.$isSeries) {\n      if (checkLength && values.length != this.shape[0]) {\n        errors_1.default.throwRowLengthError(this, values.length);\n      }\n      this.$data = values;\n      this.$dtypes = utils.inferDtype(values); //Dtype may change depeneding on the value set\n      if (!this.$config.isLowMemoryMode) {\n        this.$dataIncolumnFormat = values;\n      }\n    } else {\n      if (checkLength && values.length != this.shape[0]) {\n        errors_1.default.throwRowLengthError(this, values.length);\n      }\n      if (checkColumnLength) {\n        values.forEach(function (value) {\n          if (value.length != _this.shape[1]) {\n            errors_1.default.throwColumnLengthError(_this, values.length);\n          }\n        });\n      }\n      this.$data = values;\n      this.$dtypes = utils.inferDtype(values);\n      if (!this.$config.isLowMemoryMode) {\n        this.$dataIncolumnFormat = utils.transposeArray(values);\n      }\n    }\n  };\n  Object.defineProperty(NDframe.prototype, \"getColumnData\", {\n    /**\n      * Returns the underlying data in Array column format.\n      * Similar to this.values, but in column format.\n    */\n    get: function () {\n      if (this.config.isLowMemoryMode) {\n        return utils.transposeArray(this.values);\n      } else {\n        return this.$dataIncolumnFormat;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NDframe.prototype, \"size\", {\n    /**\n     * Returns the size of the NDFrame object\n     *\n    */\n    get: function () {\n      return this.shape[0] * this.shape[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Converts a DataFrame or Series to CSV.\n   * @deprecated Use `toCSV` function directly instead.\n  * @example\n  * ```\n  * import * as dfd from \"danfojs\"\n  * const df = new dfd.DataFrame([[1, 2, 3], [4, 5, 6]])\n  * const csv = dfd.toCSV(df)\n  * ```\n  * @example\n  * ```\n  * import { toCSV } from \"danfojs-node\"\n  * const df = new DataFrame([[1, 2, 3], [4, 5, 6]])\n  * toCSV(df, {\n  *     filePath: \"./data/sample.csv\",\n  *     header: true,\n  *     sep: \"+\"\n  *   })\n   */\n  NDframe.prototype.toCSV = function (options) {\n    throw new Error(\"`toCSV` function is deprecated. Use `toCSV` function directly instead. e.g. `dfd.toCSV(df)`\");\n  };\n  /**\n   * Converts a DataFrame or Series to JSON.\n   * @deprecated Use `toJSON` function directly instead.\n  * @example\n  * ```\n  * import * as dfd from \"danfojs-node\"\n  * const df = new dfd.DataFrame([[1, 2, 3], [4, 5, 6]])\n  * const json = dfd.toJSON(df)\n  * ```\n  * @example\n  * ```\n  * import { toJSON } from \"danfojs-node\"\n  * const df = new DataFrame([[1, 2, 3], [4, 5, 6]])\n  * toJSON(df, {\n  *     filePath: \"./data/sample.json\",\n  *     format: \"row\"\n  *   })\n  * ```\n  */\n  NDframe.prototype.toJSON = function (options) {\n    throw new Error(\"`toJSON` function is deprecated. Use `toJSON` function directly instead. e.g. `dfd.toJSON(df, { format: 'row' })`\");\n  };\n  /**\n   * Converts a DataFrame or Series to Excel.\n   * @deprecated Use `toExcel` function directly instead.\n   * @example\n   * ```\n   * import * as dfd from \"danfojs\"\n   * const df = new dfd.DataFrame([[1, 2, 3], [4, 5, 6]])\n   * dfd.toExcel(df, {\n   *     filePath: \"./data/sample.xlsx\",\n   *     sheetName: \"MySheet\",\n   *   })\n   * ```\n   *\n   * @example\n   * ```\n   * import { toExcel } from \"danfojs-node\"\n   * const df = new DataFrame([[1, 2, 3], [4, 5, 6]])\n   * toExcel(df, {\n   *     filePath: \"./data/sample.xlsx\",\n   *     sheetName: \"MySheet\",\n   *   })\n   * ```\n   */\n  NDframe.prototype.toExcel = function (options) {\n    throw new Error(\"Deprecated. Use `toExcel` function directly instead. e.g. `dfd.toExcel(df, {filePath: 'path/to/file.xlsx'})`\");\n  };\n  /**\n   * Pretty prints a DataFrame or Series to the console\n   */\n  NDframe.prototype.print = function () {\n    console.log(this + \"\");\n  };\n  return NDframe;\n}();\nexports.default = NDframe;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","utils_1","require","config_1","errors_1","defaults_1","tensorflowlib_1","utils","default","NDframe","_a","data","index","columns","dtypes","config","isSeries","$dataIncolumnFormat","$index","$columns","$dtypes","$isSeries","$config","BASE_CONFIG","Tensor","arraySync","undefined","Array","isArray","throwDtypeWithoutColumnError","loadArrayIntoNdframe","is1DArray","isObject","loadObjectIntoNdframe","type","isNumber","isString","isDate","Error","$data","isLowMemoryMode","transposeArray","$setIndex","$setDtypes","$setColumnNames","_data","map","item","values","_columnNames","keys","_b","getRowAndColValues","_colNames","get","tensor1d","tensor2d","shape","enumerable","configurable","throwDtypesLengthError","DATA_TYPES","includes","throwDtypeNotSupportedError","inferDtype","forEach","dtype","$setConfig","throwIndexLengthError","from","Set","throwIndexDuplicateError","range","$resetIndex","throwColumnNamesLengthError","throwColumnDuplicateError","val","rowLen","colLen","$setValues","checkLength","checkColumnLength","_this","throwRowLengthError","throwColumnLengthError","toCSV","options","toJSON","toExcel","print","console","log"],"sources":["/Users/omarbailey/node_modules/danfojs/dist/danfojs-base/core/generic.js"],"sourcesContent":["\"use strict\";\n/**\n*  @license\n* Copyright 2022 JsData. All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* ==========================================================================\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = __importDefault(require(\"../shared/utils\"));\nvar config_1 = __importDefault(require(\"../shared/config\"));\nvar errors_1 = __importDefault(require(\"../shared/errors\"));\nvar defaults_1 = require(\"../shared/defaults\");\nvar tensorflowlib_1 = __importDefault(require(\"../shared/tensorflowlib\"));\nvar utils = new utils_1.default();\n/**\n * N-Dimension data structure. Stores multi-dimensional\n * data in a size-mutable, labeled data structure. Analogous to the Python Pandas DataFrame.\n *\n * @param  Object\n *\n *  data:  1D or 2D Array, JSON, Tensor, Block of data.\n *\n *  index: Array of numeric or string names for subseting array. If not specified, indexes are auto generated.\n *\n *  columns: Array of column names. If not specified, column names are auto generated.\n *\n *  dtypes: Array of data types for each the column. If not specified, dtypes inferred.\n *\n *  config: General configuration object for NDframe\n *\n * @returns NDframe\n */\nvar NDframe = /** @class */ (function () {\n    function NDframe(_a) {\n        var data = _a.data, index = _a.index, columns = _a.columns, dtypes = _a.dtypes, config = _a.config, isSeries = _a.isSeries;\n        this.$dataIncolumnFormat = [];\n        this.$index = [];\n        this.$columns = [];\n        this.$dtypes = [];\n        this.$isSeries = isSeries;\n        if (config) {\n            this.$config = new config_1.default(__assign(__assign({}, defaults_1.BASE_CONFIG), config));\n        }\n        else {\n            this.$config = new config_1.default(defaults_1.BASE_CONFIG);\n        }\n        if (data instanceof tensorflowlib_1.default.Tensor) {\n            data = data.arraySync();\n        }\n        if (data === undefined || (Array.isArray(data) && data.length === 0)) {\n            if (columns === undefined)\n                columns = [];\n            if (dtypes === undefined)\n                dtypes = [];\n            if (columns.length === 0 && dtypes.length !== 0)\n                errors_1.default.throwDtypeWithoutColumnError();\n            this.loadArrayIntoNdframe({ data: [], index: [], columns: columns, dtypes: dtypes });\n        }\n        else if (utils.is1DArray(data)) {\n            this.loadArrayIntoNdframe({ data: data, index: index, columns: columns, dtypes: dtypes });\n        }\n        else {\n            if (Array.isArray(data) && utils.isObject(data[0])) {\n                this.loadObjectIntoNdframe({ data: data, type: 1, index: index, columns: columns, dtypes: dtypes });\n            }\n            else if (utils.isObject(data)) {\n                this.loadObjectIntoNdframe({ data: data, type: 2, index: index, columns: columns, dtypes: dtypes });\n            }\n            else if (Array.isArray((data)[0]) ||\n                utils.isNumber((data)[0]) ||\n                utils.isString((data)[0])) {\n                this.loadArrayIntoNdframe({ data: data, index: index, columns: columns, dtypes: dtypes });\n            }\n            else if (Array.isArray(data) && data.length > 0 && utils.isDate(data[0])) {\n                this.loadArrayIntoNdframe({ data: data, index: index, columns: columns, dtypes: dtypes });\n            }\n            else {\n                throw new Error(\"File format not supported!\");\n            }\n        }\n    }\n    /**\n     * Internal function to load array of data into NDFrame\n     * @param data The array of data to load into NDFrame\n     * @param index Array of numeric or string names for subsetting array.\n     * @param columns Array of column names.\n     * @param dtypes Array of data types for each the column.\n    */\n    NDframe.prototype.loadArrayIntoNdframe = function (_a) {\n        var data = _a.data, index = _a.index, columns = _a.columns, dtypes = _a.dtypes;\n        // this.$data = utils.replaceUndefinedWithNaN(data, this.$isSeries);\n        this.$data = data;\n        if (!this.$config.isLowMemoryMode) {\n            //In NOT low memory mode, we transpose the array and save in column format.\n            //This makes column data retrieval run in constant time\n            this.$dataIncolumnFormat = utils.transposeArray(data);\n        }\n        this.$setIndex(index);\n        this.$setDtypes(dtypes);\n        this.$setColumnNames(columns);\n    };\n    /**\n     * Internal function to format and load a Javascript object or object of arrays into NDFrame.\n     * @param data Object or object of arrays.\n     * @param type The type of the object. There are two recognized types:\n     *\n     * - type 1 object are in JSON format `[{a: 1, b: 2}, {a: 30, b: 20}]`.\n     *\n     * - type 2 object are of the form `{a: [1,2,3,4], b: [30,20, 30, 20}]}`\n     * @param index Array of numeric or string names for subsetting array.\n     * @param columns Array of column names.\n     * @param dtypes Array of data types for each the column.\n    */\n    NDframe.prototype.loadObjectIntoNdframe = function (_a) {\n        var data = _a.data, type = _a.type, index = _a.index, columns = _a.columns, dtypes = _a.dtypes;\n        if (type === 1 && Array.isArray(data)) {\n            var _data = (data).map(function (item) {\n                return Object.values(item);\n            });\n            var _columnNames = void 0;\n            if (columns) {\n                _columnNames = columns;\n            }\n            else {\n                _columnNames = Object.keys((data)[0]);\n            }\n            this.loadArrayIntoNdframe({ data: _data, index: index, columns: _columnNames, dtypes: dtypes });\n        }\n        else {\n            var _b = utils.getRowAndColValues(data), _data = _b[0], _colNames = _b[1];\n            var _columnNames = void 0;\n            if (columns) {\n                _columnNames = columns;\n            }\n            else {\n                _columnNames = _colNames;\n            }\n            this.loadArrayIntoNdframe({ data: _data, index: index, columns: _columnNames, dtypes: dtypes });\n        }\n    };\n    Object.defineProperty(NDframe.prototype, \"tensor\", {\n        /**\n         * Converts and returns the data in the NDframe as a Tensorflow.js Tensor.\n        */\n        get: function () {\n            if (this.$isSeries) {\n                return tensorflowlib_1.default.tensor1d(this.$data, this.$dtypes[0]);\n            }\n            else {\n                return tensorflowlib_1.default.tensor2d(this.$data, this.shape, \"float32\");\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NDframe.prototype, \"dtypes\", {\n        /**\n         * Returns the dtypes of the columns\n        */\n        get: function () {\n            return this.$dtypes;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Internal function to set the Dtypes of the NDFrame from an array. This function\n     * performs the necessary checks.\n    */\n    NDframe.prototype.$setDtypes = function (dtypes) {\n        if (this.$isSeries) {\n            if (dtypes) {\n                if (this.$data.length != 0 && dtypes.length != 1) {\n                    errors_1.default.throwDtypesLengthError(this, dtypes);\n                }\n                if (!(defaults_1.DATA_TYPES.includes(\"\" + dtypes[0]))) {\n                    errors_1.default.throwDtypeNotSupportedError(dtypes[0]);\n                }\n                this.$dtypes = dtypes;\n            }\n            else {\n                this.$dtypes = utils.inferDtype(this.$data);\n            }\n        }\n        else {\n            if (dtypes) {\n                if (this.$data.length != 0 && dtypes.length != this.shape[1]) {\n                    errors_1.default.throwDtypesLengthError(this, dtypes);\n                }\n                if (this.$data.length == 0 && dtypes.length == 0) {\n                    this.$dtypes = dtypes;\n                }\n                else {\n                    dtypes.forEach(function (dtype) {\n                        if (!(defaults_1.DATA_TYPES.includes(dtype))) {\n                            errors_1.default.throwDtypeNotSupportedError(dtype);\n                        }\n                    });\n                    this.$dtypes = dtypes;\n                }\n            }\n            else {\n                this.$dtypes = utils.inferDtype(this.$data);\n            }\n        }\n    };\n    Object.defineProperty(NDframe.prototype, \"ndim\", {\n        /**\n         * Returns the dimension of the data. Series have a dimension of 1,\n         * while DataFrames have a dimension of 2.\n        */\n        get: function () {\n            if (this.$isSeries) {\n                return 1;\n            }\n            else {\n                return 2;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NDframe.prototype, \"axis\", {\n        /**\n         * Returns the axis labels of the NDFrame.\n        */\n        get: function () {\n            return {\n                index: this.$index,\n                columns: this.$columns\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NDframe.prototype, \"config\", {\n        /**\n         * Returns the configuration object of the NDFrame.\n        */\n        get: function () {\n            return this.$config;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Internal function to set the configuration of the ndframe\n    */\n    NDframe.prototype.$setConfig = function (config) {\n        this.$config = config;\n    };\n    Object.defineProperty(NDframe.prototype, \"index\", {\n        /**\n         * Returns the indices of the NDFrame\n        */\n        get: function () {\n            return this.$index;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Internal function to set the index of the NDFrame with the specified\n     * array of indices. Performs all necessary checks to ensure that the\n     * index is valid.\n    */\n    NDframe.prototype.$setIndex = function (index) {\n        if (index) {\n            if (this.$data.length != 0 && index.length != this.shape[0]) {\n                errors_1.default.throwIndexLengthError(this, index);\n            }\n            if (Array.from(new Set(index)).length !== this.shape[0]) {\n                errors_1.default.throwIndexDuplicateError();\n            }\n            this.$index = index;\n        }\n        else {\n            this.$index = utils.range(0, this.shape[0] - 1); //generate index\n        }\n    };\n    /**\n     * Internal function to reset the index of the NDFrame using a range of indices.\n    */\n    NDframe.prototype.$resetIndex = function () {\n        this.$index = utils.range(0, this.shape[0] - 1);\n    };\n    Object.defineProperty(NDframe.prototype, \"columns\", {\n        /**\n         * Returns the column names of the NDFrame\n        */\n        get: function () {\n            return this.$columns;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Internal function to set the column names for the NDFrame. This function\n     * performs a check to ensure that the column names are unique, and same length as the\n     * number of columns in the data.\n    */\n    NDframe.prototype.$setColumnNames = function (columns) {\n        // console.log(columns);\n        if (this.$isSeries) {\n            if (columns) {\n                if (this.$data.length != 0 && columns.length != 1 && typeof columns != 'string') {\n                    errors_1.default.throwColumnNamesLengthError(this, columns);\n                }\n                this.$columns = columns;\n            }\n            else {\n                this.$columns = [\"0\"];\n            }\n        }\n        else {\n            if (columns) {\n                if (this.$data.length != 0 && columns.length != this.shape[1]) {\n                    errors_1.default.throwColumnNamesLengthError(this, columns);\n                }\n                if (Array.from(new Set(columns)).length !== columns.length) {\n                    errors_1.default.throwColumnDuplicateError();\n                }\n                this.$columns = columns;\n            }\n            else {\n                this.$columns = (utils.range(0, this.shape[1] - 1)).map(function (val) { return \"\" + val; }); //generate columns\n            }\n        }\n    };\n    Object.defineProperty(NDframe.prototype, \"shape\", {\n        /**\n         * Returns the shape of the NDFrame. Shape is determined by [row length, column length]\n        */\n        get: function () {\n            if (this.$data.length === 0) {\n                if (this.$columns.length === 0)\n                    return [0, 0];\n                else\n                    return [0, this.$columns.length];\n            }\n            if (this.$isSeries) {\n                return [this.$data.length, 1];\n            }\n            else {\n                var rowLen = (this.$data).length;\n                var colLen = this.$data[0].length;\n                return [rowLen, colLen];\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NDframe.prototype, \"values\", {\n        /**\n         * Returns the underlying data in Array format.\n        */\n        get: function () {\n            return this.$data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the internal $data property to the specified value\n     * @param values An array of values to set\n     * @param checkLength Whether to check the length of the new values and the existing row length\n     * @param checkColumnLength Whether to check the length of the new values and the existing column length\n     * */\n    NDframe.prototype.$setValues = function (values, checkLength, checkColumnLength) {\n        var _this = this;\n        if (checkLength === void 0) { checkLength = true; }\n        if (checkColumnLength === void 0) { checkColumnLength = true; }\n        if (this.$isSeries) {\n            if (checkLength && values.length != this.shape[0]) {\n                errors_1.default.throwRowLengthError(this, values.length);\n            }\n            this.$data = values;\n            this.$dtypes = utils.inferDtype(values); //Dtype may change depeneding on the value set\n            if (!this.$config.isLowMemoryMode) {\n                this.$dataIncolumnFormat = values;\n            }\n        }\n        else {\n            if (checkLength && values.length != this.shape[0]) {\n                errors_1.default.throwRowLengthError(this, values.length);\n            }\n            if (checkColumnLength) {\n                values.forEach(function (value) {\n                    if (value.length != _this.shape[1]) {\n                        errors_1.default.throwColumnLengthError(_this, values.length);\n                    }\n                });\n            }\n            this.$data = values;\n            this.$dtypes = utils.inferDtype(values);\n            if (!this.$config.isLowMemoryMode) {\n                this.$dataIncolumnFormat = utils.transposeArray(values);\n            }\n        }\n    };\n    Object.defineProperty(NDframe.prototype, \"getColumnData\", {\n        /**\n          * Returns the underlying data in Array column format.\n          * Similar to this.values, but in column format.\n        */\n        get: function () {\n            if (this.config.isLowMemoryMode) {\n                return utils.transposeArray(this.values);\n            }\n            else {\n                return this.$dataIncolumnFormat;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NDframe.prototype, \"size\", {\n        /**\n         * Returns the size of the NDFrame object\n         *\n        */\n        get: function () {\n            return this.shape[0] * this.shape[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Converts a DataFrame or Series to CSV.\n     * @deprecated Use `toCSV` function directly instead.\n    * @example\n    * ```\n    * import * as dfd from \"danfojs\"\n    * const df = new dfd.DataFrame([[1, 2, 3], [4, 5, 6]])\n    * const csv = dfd.toCSV(df)\n    * ```\n    * @example\n    * ```\n    * import { toCSV } from \"danfojs-node\"\n    * const df = new DataFrame([[1, 2, 3], [4, 5, 6]])\n    * toCSV(df, {\n    *     filePath: \"./data/sample.csv\",\n    *     header: true,\n    *     sep: \"+\"\n    *   })\n     */\n    NDframe.prototype.toCSV = function (options) {\n        throw new Error(\"`toCSV` function is deprecated. Use `toCSV` function directly instead. e.g. `dfd.toCSV(df)`\");\n    };\n    /**\n     * Converts a DataFrame or Series to JSON.\n     * @deprecated Use `toJSON` function directly instead.\n    * @example\n    * ```\n    * import * as dfd from \"danfojs-node\"\n    * const df = new dfd.DataFrame([[1, 2, 3], [4, 5, 6]])\n    * const json = dfd.toJSON(df)\n    * ```\n    * @example\n    * ```\n    * import { toJSON } from \"danfojs-node\"\n    * const df = new DataFrame([[1, 2, 3], [4, 5, 6]])\n    * toJSON(df, {\n    *     filePath: \"./data/sample.json\",\n    *     format: \"row\"\n    *   })\n    * ```\n    */\n    NDframe.prototype.toJSON = function (options) {\n        throw new Error(\"`toJSON` function is deprecated. Use `toJSON` function directly instead. e.g. `dfd.toJSON(df, { format: 'row' })`\");\n    };\n    /**\n     * Converts a DataFrame or Series to Excel.\n     * @deprecated Use `toExcel` function directly instead.\n     * @example\n     * ```\n     * import * as dfd from \"danfojs\"\n     * const df = new dfd.DataFrame([[1, 2, 3], [4, 5, 6]])\n     * dfd.toExcel(df, {\n     *     filePath: \"./data/sample.xlsx\",\n     *     sheetName: \"MySheet\",\n     *   })\n     * ```\n     *\n     * @example\n     * ```\n     * import { toExcel } from \"danfojs-node\"\n     * const df = new DataFrame([[1, 2, 3], [4, 5, 6]])\n     * toExcel(df, {\n     *     filePath: \"./data/sample.xlsx\",\n     *     sheetName: \"MySheet\",\n     *   })\n     * ```\n     */\n    NDframe.prototype.toExcel = function (options) {\n        throw new Error(\"Deprecated. Use `toExcel` function directly instead. e.g. `dfd.toExcel(df, {filePath: 'path/to/file.xlsx'})`\");\n    };\n    /**\n     * Pretty prints a DataFrame or Series to the console\n     */\n    NDframe.prototype.print = function () {\n        console.log(this + \"\");\n    };\n    return NDframe;\n}());\nexports.default = NDframe;\n"],"mappings":"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AAI,CAACA,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIlD,OAAO,CAAClB,SAAS,CAAC8F,KAAK,GAAG,UAAUC,OAAO,EAAE;IACzC,MAAM,IAAIhD,KAAK,CAAC,6FAA6F,CAAC;EAClH,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI7B,OAAO,CAAClB,SAAS,CAACgG,MAAM,GAAG,UAAUD,OAAO,EAAE;IAC1C,MAAM,IAAIhD,KAAK,CAAC,mHAAmH,CAAC;EACxI,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI7B,OAAO,CAAClB,SAAS,CAACiG,OAAO,GAAG,UAAUF,OAAO,EAAE;IAC3C,MAAM,IAAIhD,KAAK,CAAC,8GAA8G,CAAC;EACnI,CAAC;EACD;AACJ;AACA;EACI7B,OAAO,CAAClB,SAAS,CAACkG,KAAK,GAAG,YAAY;IAClCC,OAAO,CAACC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;EAC1B,CAAC;EACD,OAAOlF,OAAO;AAClB,CAAC,EAAG;AACJV,OAAO,CAACS,OAAO,GAAGC,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}