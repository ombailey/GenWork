{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDet = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];\nvar createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply,\n    unaryMinus = _ref.unaryMinus,\n    lup = _ref.lup;\n\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return (0, _object.clone)(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n      if ((0, _is.isMatrix)(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n      switch (size.length) {\n        case 0:\n          // scalar\n          return (0, _object.clone)(x);\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return (0, _object.clone)(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return (0, _object.clone)(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Compute the LU decomposition\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\n\n      var det = decomp.U[0][0];\n      for (var _i = 1; _i < rows; _i++) {\n        det = multiply(det, decomp.U[_i][_i]);\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\n\n      var evenCycles = 0;\n      var i = 0;\n      var visited = [];\n      while (true) {\n        while (visited[i]) {\n          i++;\n        }\n        if (i >= rows) break;\n        var j = i;\n        var cycleLen = 0;\n        while (!visited[decomp.p[j]]) {\n          visited[decomp.p[j]] = true;\n          j = decomp.p[j];\n          cycleLen++;\n        }\n        if (cycleLen % 2 === 0) {\n          evenCycles++;\n        }\n      }\n      return evenCycles % 2 === 0 ? det : unaryMinus(det);\n    }\n  }\n});\nexports.createDet = createDet;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDet","_is","require","_object","_string","_factory","name","dependencies","factory","_ref","typed","matrix","subtract","multiply","unaryMinus","lup","any","x","clone","det","size","isMatrix","Array","isArray","length","valueOf","RangeError","format","rows","cols","_det","decomp","U","_i","evenCycles","i","visited","j","cycleLen","p"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/det.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDet = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];\nvar createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      unaryMinus = _ref.unaryMinus,\n      lup = _ref.lup;\n\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return (0, _object.clone)(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n\n      if ((0, _is.isMatrix)(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return (0, _object.clone)(x);\n\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return (0, _object.clone)(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return (0, _object.clone)(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Compute the LU decomposition\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\n\n      var det = decomp.U[0][0];\n\n      for (var _i = 1; _i < rows; _i++) {\n        det = multiply(det, decomp.U[_i][_i]);\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\n\n\n      var evenCycles = 0;\n      var i = 0;\n      var visited = [];\n\n      while (true) {\n        while (visited[i]) {\n          i++;\n        }\n\n        if (i >= rows) break;\n        var j = i;\n        var cycleLen = 0;\n\n        while (!visited[decomp.p[j]]) {\n          visited[decomp.p[j]] = true;\n          j = decomp.p[j];\n          cycleLen++;\n        }\n\n        if (cycleLen % 2 === 0) {\n          evenCycles++;\n        }\n      }\n\n      return evenCycles % 2 === 0 ? det : unaryMinus(det);\n    }\n  }\n});\nexports.createDet = createDet;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}