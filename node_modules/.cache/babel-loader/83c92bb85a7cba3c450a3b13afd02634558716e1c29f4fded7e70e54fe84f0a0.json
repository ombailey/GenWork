{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSparseMatrixClass = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _is = require(\"../../utils/is.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _DimensionError = require(\"../../error/DimensionError.js\");\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nvar createSparseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    equalScalar = _ref.equalScalar,\n    Matrix = _ref.Matrix;\n\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !(0, _is.isString)(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if ((0, _is.isMatrix)(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && (0, _is.isArray)(data.index) && (0, _is.isArray)(data.ptr) && (0, _is.isArray)(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if ((0, _is.isArray)(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? (0, _object.clone)(source._values) : undefined;\n      matrix._index = (0, _object.clone)(source._index);\n      matrix._ptr = (0, _object.clone)(source._ptr);\n      matrix._size = (0, _object.clone)(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice\n\n    var rows = data.length;\n    var columns = 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n    if ((0, _is.isString)(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    } // check we have rows (empty array)\n\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length); // loop rows\n\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i]; // check row is an array\n\n          if ((0, _is.isArray)(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            } // check row has column\n\n            if (j < row.length) {\n              // value\n              var v = row[j]; // check value != 0\n\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v); // index\n\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            } // check value != 0 (row is a scalar)\n\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row); // index\n\n              matrix._index.push(i);\n            }\n          }\n        } // increment index\n\n        j++;\n      } while (j < columns);\n    } // store number of values in ptr\n\n    matrix._ptr.push(matrix._index.length); // size\n\n    matrix._size = [rows, columns];\n  }\n  SparseMatrix.prototype = new Matrix();\n  /**\n   * Create a new SparseMatrix\n   */\n\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  SparseMatrix.prototype.getDataType = function () {\n    return (0, _array.getArrayDataType)(this._values, _is.typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // calculate density\n\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    } // check arguments\n\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!(0, _is.isIndex)(idx)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    } // validate dimensions\n\n    var size = idx.size();\n    if (size.length !== matrix._size.length) {\n      throw new _DimensionError.DimensionError(size.length, matrix._size.length);\n    } // vars\n\n    var i, ii, k, kk; // validate if any of the ranges in the index is out of range\n\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      (0, _array.validateIndex)(min[i], matrix._size[i]);\n      (0, _array.validateIndex)(max[i], matrix._size[i]);\n    } // matrix arrays\n\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr; // rows & columns dimensions for result matrix\n\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1); // workspace & permutation vector\n\n    var w = [];\n    var pv = []; // loop rows in resulting matrix\n\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0]; // mark i in workspace\n\n      w[i] = true;\n    }); // result matrix arrays\n\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = []; // loop columns in result matrix\n\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length); // loop values in column j\n\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k]; // check row is in result matrix\n\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]); // check we need to process values\n\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    }); // update ptr\n\n    ptr.push(index.length); // return matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: size,\n      datatype: matrix._datatype\n    });\n  }\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n    if ((0, _is.isMatrix)(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size(); // use array representation\n\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = (0, _array.arraySize)(submatrix);\n    } // check index is a scalar\n\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      } // set value\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');\n      } // check submatrix and index have the same dimensions\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {\n        throw new _DimensionError.DimensionError(iSize, sSize, '>');\n      } // offsets\n\n      var x0 = index.min()[0];\n      var y0 = index.min()[1]; // submatrix rows and columns\n\n      var m = sSize[0];\n      var n = sSize[1]; // loop submatrix\n\n      for (var x = 0; x < m; x++) {\n        // loop columns\n        for (var y = 0; y < n; y++) {\n          // value at i, j\n          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)\n\n          matrix.set([x + x0, y + y0], v, defaultValue);\n        }\n      }\n    }\n    return matrix;\n  }\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n  SparseMatrix.prototype.get = function (index) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    } // row and column\n\n    var i = index[0];\n    var j = index[1]; // check i, j are valid\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[1]); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n    return 0;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    } // row and column\n\n    var i = index[0];\n    var j = index[1]; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n    if ((0, _is.isString)(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, this._datatype);\n    } // check we need to resize matrix\n\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns\n\n      rows = this._size[0];\n      columns = this._size[1];\n    } // check i, j are valid\n\n    (0, _array.validateIndex)(i, rows);\n    (0, _array.validateIndex)(j, columns); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      // insert value @ (i, j)\n      _insert(k, i, j, v, this._values, this._index, this._ptr);\n    }\n    return this;\n  };\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    } // loop rows [top, bottom[\n\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    } // we did not find row\n\n    return top;\n  }\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1); // update pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v); // update row for k\n\n    index.splice(k, 0, i); // update column pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!(0, _is.isCollection)(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n    var sizeArray = size.valueOf().map(function (value) {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // check sizes\n\n    sizeArray.forEach(function (value) {\n      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(sizeArray) + ')');\n      }\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n    if ((0, _is.isString)(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype\n\n      value = typed.convert(value, matrix._datatype);\n    } // should we insert the value?\n\n    var ins = !eq(value, zero); // old columns and rows\n\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k; // check we need to increase columns\n\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values\n\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value); // update matrix._index\n\n            matrix._index.push(i);\n          }\n        }\n      } // store number of matrix._values in matrix._ptr\n\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index\n\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    } // update columns\n\n    c = columns; // check we need to increase rows\n\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0; // loop columns\n\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values\n\n          k = matrix._ptr[j + 1] + n; // pointer\n\n          var p = 0; // loop new rows, initialize pointer\n\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value); // update matrix._index\n\n            matrix._index.splice(k + p, 0, i); // increment inserts\n\n            n++;\n          }\n        } // store number of matrix._values in matrix._ptr\n\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0; // loop columns\n\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column\n\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index\n\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k]; // check we need to delete value and matrix._index\n\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1); // remove item from matrix._index\n\n            matrix._index.splice(k, 1); // increase deletes\n\n            d++;\n          }\n        }\n      } // update matrix._ptr for current column\n\n      matrix._ptr[j] = matrix._values.length;\n    } // update matrix._size\n\n    matrix._size[0] = rows;\n    matrix._size[1] = columns; // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!(0, _is.isArray)(sizes)) {\n      throw new TypeError('Array expected');\n    }\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    } // check sizes\n\n    sizes.forEach(function (value) {\n      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + (0, _string.format)(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = (0, _array.processSizesWildcard)(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1]; // m * n must not change\n\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    } // matrix to reshape\n\n    var m = copy ? this.clone() : this; // return unchanged if the same shape\n\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    } // Convert to COO format (generate a column index)\n\n    var colIndex = [];\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    } // Clone the values array\n\n    var values = m._values.slice(); // Clone the row index array\n\n    var rowIndex = m._index.slice(); // Transform the (row, column) indices\n\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n    // OR, we could easily just:\n    // 1. Remove all values from the matrix\n\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    } // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  };\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? (0, _object.clone)(this._values) : undefined,\n      index: (0, _object.clone)(this._index),\n      ptr: (0, _object.clone)(this._ptr),\n      size: (0, _object.clone)(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    } // matrix instance\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // invoke callback\n\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      return callback(v, [i, j], me);\n    }; // invoke _map\n\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = []; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n    if ((0, _is.isString)(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype);\n    } // invoke callback\n\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y); // check value != 0\n\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v); // index\n\n        index.push(x);\n      }\n    }; // loop columns\n\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k]; // check i is in range\n\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    } // store number of values in ptr\n\n    ptr.push(values.length); // return sparse matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    } // matrix instance\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k]; // value @ k\n\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n  SparseMatrix.prototype[Symbol.iterator] = /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n    var columns, j, k0, k1, k, i;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (this._values) {\n              _context.next = 2;\n              break;\n            }\n            throw new Error('Cannot iterate a Pattern only matrix');\n          case 2:\n            columns = this._size[1];\n            j = 0;\n          case 4:\n            if (!(j < columns)) {\n              _context.next = 18;\n              break;\n            }\n            k0 = this._ptr[j];\n            k1 = this._ptr[j + 1];\n            k = k0;\n          case 8:\n            if (!(k < k1)) {\n              _context.next = 15;\n              break;\n            }\n\n            // row index\n            i = this._index[k];\n            _context.next = 12;\n            return {\n              value: this._values[k],\n              index: [i, j]\n            };\n          case 12:\n            k++;\n            _context.next = 8;\n            break;\n          case 15:\n            j++;\n            _context.next = 4;\n            break;\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  });\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1]; // result\n\n    var a = []; // vars\n\n    var i, j; // initialize array\n\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    } // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k]; // set value (use one for pattern matrix)\n\n        a[i][j] = values ? copy ? (0, _object.clone)(values[k]) : values[k] : 1;\n      }\n    }\n    return a;\n  }\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // density\n\n    var density = this.density(); // rows & columns\n\n    var str = 'Sparse Matrix [' + (0, _string.format)(rows, options) + ' x ' + (0, _string.format)(columns, options) + '] density: ' + (0, _string.format)(density, options) + '\\n'; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k]; // append value\n\n        str += '\\n    (' + (0, _string.format)(i, options) + ', ' + (0, _string.format)(j, options) + ') ==> ' + (this._values ? (0, _string.format)(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n\n  SparseMatrix.prototype.toString = function () {\n    return (0, _string.format)(this.toArray());\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays\n\n    var values = [];\n    var index = [];\n    var ptr = []; // initial ptr value\n\n    ptr[0] = 0; // loop columns\n\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[\n\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x]; // check row\n\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]); // store row\n\n          index[values.length - 1] = i - kSub; // exit loop\n\n          break;\n        }\n      }\n    } // close ptr\n\n    ptr.push(values.length); // return matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [n, 1]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!(0, _is.isArray)(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if ((0, _is.isBigNumber)(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    } // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n    if ((0, _is.isString)(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n    if ((0, _is.isArray)(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if ((0, _is.isMatrix)(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // create arrays\n\n    var values = [];\n    var index = [];\n    var ptr = []; // loop items\n\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length); // diagonal index\n\n      var i = j - kSuper; // check we need to set diagonal value\n\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i); // check for zero\n\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub); // add value\n\n          values.push(v);\n        }\n      }\n    } // last value should be number of values\n\n    ptr.push(values.length); // create SparseMatrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[0]); // swap rows\n\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance\n\n    return this;\n  };\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1]; // loop\n\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // find value index @ x\n\n      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x\n\n      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix\n\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        } // next column\n\n        continue;\n      } // check x row exist & no y row\n\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined; // insert value @ y\n\n        index.splice(ky, 0, y);\n        if (values) {\n          values.splice(ky, 0, vx);\n        } // remove value @ x (adjust array index if needed)\n\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        } // next column\n\n        continue;\n      } // check y row exist & no x row\n\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined; // insert value @ x\n\n        index.splice(kx, 0, x);\n        if (values) {\n          values.splice(kx, 0, vy);\n        } // remove value @ y (adjust array index if needed)\n\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n  return SparseMatrix;\n}, {\n  isClass: true\n});\nexports.createSparseMatrixClass = createSparseMatrixClass;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createSparseMatrixClass","_regenerator","_is","_number","_string","_object","_array","_factory","_DimensionError","name","dependencies","factory","_ref","typed","equalScalar","Matrix","SparseMatrix","data","datatype","SyntaxError","isString","Error","isMatrix","_createFromMatrix","isArray","index","ptr","size","_values","values","_index","_ptr","_size","_datatype","_createFromArray","TypeError","typeOf","matrix","source","type","clone","undefined","valueOf","rows","length","columns","eq","zero","find","convert","j","push","i","row","v","prototype","createSparseMatrix","isSparseMatrix","getDataType","getArrayDataType","storage","create","density","subset","replacement","defaultValue","arguments","_getsubset","_setsubset","idx","isIndex","isScalar","get","min","DimensionError","ii","k","kk","max","validateIndex","mvalues","mindex","mptr","dimension","w","pv","forEach","r","submatrix","iSize","sSize","toArray","arraySize","set","outer","unsqueeze","deepStrictEqual","x0","y0","m","n","x","y","_getValueIndex","_resize","Math","_remove","_insert","top","bottom","splice","resize","copy","isCollection","sizeArray","map","Array","isNumber","isInteger","format","ins","c","p","d","k0","k1","reshape","sizes","currentLength","processSizesWildcard","newLength","colIndex","slice","rowIndex","_i","r1","c1","flat","floor","_i2","h","_i3","_j","callback","skipZeros","me","invoke","_map","minRow","maxRow","minColumn","maxColumn","_k","_i4","_i5","_k2","_i6","_i7","Symbol","iterator","mark","_callee","wrap","_callee$","_context","prev","next","stop","_toArray","a","options","str","toString","toJSON","mathjs","diagonal","isBigNumber","toNumber","kSuper","kSub","fromJSON","json","s","_value","ms","swapRows","_swapRows","_forEachRow","kx","ky","vx","vy","isClass"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/type/matrix/SparseMatrix.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSparseMatrixClass = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nvar createSparseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar,\n      Matrix = _ref.Matrix;\n\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !(0, _is.isString)(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if ((0, _is.isMatrix)(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && (0, _is.isArray)(data.index) && (0, _is.isArray)(data.ptr) && (0, _is.isArray)(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if ((0, _is.isArray)(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? (0, _object.clone)(source._values) : undefined;\n      matrix._index = (0, _object.clone)(source._index);\n      matrix._ptr = (0, _object.clone)(source._ptr);\n      matrix._size = (0, _object.clone)(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice\n\n    var rows = data.length;\n    var columns = 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    } // check we have rows (empty array)\n\n\n    if (rows > 0) {\n      // column index\n      var j = 0;\n\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length); // loop rows\n\n\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i]; // check row is an array\n\n          if ((0, _is.isArray)(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            } // check row has column\n\n\n            if (j < row.length) {\n              // value\n              var v = row[j]; // check value != 0\n\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v); // index\n\n\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            } // check value != 0 (row is a scalar)\n\n\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row); // index\n\n\n              matrix._index.push(i);\n            }\n          }\n        } // increment index\n\n\n        j++;\n      } while (j < columns);\n    } // store number of values in ptr\n\n\n    matrix._ptr.push(matrix._index.length); // size\n\n\n    matrix._size = [rows, columns];\n  }\n\n  SparseMatrix.prototype = new Matrix();\n  /**\n   * Create a new SparseMatrix\n   */\n\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  SparseMatrix.prototype.getDataType = function () {\n    return (0, _array.getArrayDataType)(this._values, _is.typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n\n\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // calculate density\n\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    } // check arguments\n\n\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!(0, _is.isIndex)(idx)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = idx.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    } // validate dimensions\n\n\n    var size = idx.size();\n\n    if (size.length !== matrix._size.length) {\n      throw new _DimensionError.DimensionError(size.length, matrix._size.length);\n    } // vars\n\n\n    var i, ii, k, kk; // validate if any of the ranges in the index is out of range\n\n    var min = idx.min();\n    var max = idx.max();\n\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      (0, _array.validateIndex)(min[i], matrix._size[i]);\n      (0, _array.validateIndex)(max[i], matrix._size[i]);\n    } // matrix arrays\n\n\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr; // rows & columns dimensions for result matrix\n\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1); // workspace & permutation vector\n\n    var w = [];\n    var pv = []; // loop rows in resulting matrix\n\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0]; // mark i in workspace\n\n      w[i] = true;\n    }); // result matrix arrays\n\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = []; // loop columns in result matrix\n\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length); // loop values in column j\n\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k]; // check row is in result matrix\n\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]); // check we need to process values\n\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    }); // update ptr\n\n    ptr.push(index.length); // return matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: size,\n      datatype: matrix._datatype\n    });\n  }\n\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if ((0, _is.isMatrix)(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size(); // use array representation\n\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = (0, _array.arraySize)(submatrix);\n    } // check index is a scalar\n\n\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      } // set value\n\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');\n      } // check submatrix and index have the same dimensions\n\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {\n        throw new _DimensionError.DimensionError(iSize, sSize, '>');\n      } // offsets\n\n\n      var x0 = index.min()[0];\n      var y0 = index.min()[1]; // submatrix rows and columns\n\n      var m = sSize[0];\n      var n = sSize[1]; // loop submatrix\n\n      for (var x = 0; x < m; x++) {\n        // loop columns\n        for (var y = 0; y < n; y++) {\n          // value at i, j\n          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)\n\n          matrix.set([x + x0, y + y0], v, defaultValue);\n        }\n      }\n    }\n\n    return matrix;\n  }\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  SparseMatrix.prototype.get = function (index) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // check i, j are valid\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[1]); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n\n    return 0;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n\n\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!(0, _is.isArray)(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new _DimensionError.DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, this._datatype);\n    } // check we need to resize matrix\n\n\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns\n\n\n      rows = this._size[0];\n      columns = this._size[1];\n    } // check i, j are valid\n\n\n    (0, _array.validateIndex)(i, rows);\n    (0, _array.validateIndex)(j, columns); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      // insert value @ (i, j)\n      _insert(k, i, j, v, this._values, this._index, this._ptr);\n    }\n\n    return this;\n  };\n\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    } // loop rows [top, bottom[\n\n\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    } // we did not find row\n\n\n    return top;\n  }\n\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1); // update pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v); // update row for k\n\n    index.splice(k, 0, i); // update column pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!(0, _is.isCollection)(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(function (value) {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // check sizes\n\n\n    sizeArray.forEach(function (value) {\n      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(sizeArray) + ')');\n      }\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype\n\n      value = typed.convert(value, matrix._datatype);\n    } // should we insert the value?\n\n\n    var ins = !eq(value, zero); // old columns and rows\n\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k; // check we need to increase columns\n\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values\n\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value); // update matrix._index\n\n\n            matrix._index.push(i);\n          }\n        }\n      } // store number of matrix._values in matrix._ptr\n\n\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index\n\n\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    } // update columns\n\n\n    c = columns; // check we need to increase rows\n\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0; // loop columns\n\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values\n\n          k = matrix._ptr[j + 1] + n; // pointer\n\n          var p = 0; // loop new rows, initialize pointer\n\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value); // update matrix._index\n\n\n            matrix._index.splice(k + p, 0, i); // increment inserts\n\n\n            n++;\n          }\n        } // store number of matrix._values in matrix._ptr\n\n\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0; // loop columns\n\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column\n\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index\n\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k]; // check we need to delete value and matrix._index\n\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1); // remove item from matrix._index\n\n\n            matrix._index.splice(k, 1); // increase deletes\n\n\n            d++;\n          }\n        }\n      } // update matrix._ptr for current column\n\n\n      matrix._ptr[j] = matrix._values.length;\n    } // update matrix._size\n\n\n    matrix._size[0] = rows;\n    matrix._size[1] = columns; // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!(0, _is.isArray)(sizes)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    } // check sizes\n\n\n    sizes.forEach(function (value) {\n      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + (0, _string.format)(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = (0, _array.processSizesWildcard)(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1]; // m * n must not change\n\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    } // matrix to reshape\n\n\n    var m = copy ? this.clone() : this; // return unchanged if the same shape\n\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    } // Convert to COO format (generate a column index)\n\n\n    var colIndex = [];\n\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    } // Clone the values array\n\n\n    var values = m._values.slice(); // Clone the row index array\n\n\n    var rowIndex = m._index.slice(); // Transform the (row, column) indices\n\n\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n    // OR, we could easily just:\n    // 1. Remove all values from the matrix\n\n\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n\n\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    } // The value indices are inserted out of order, but apparently that's... still OK?\n\n\n    return m;\n  };\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n\n\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? (0, _object.clone)(this._values) : undefined,\n      index: (0, _object.clone)(this._index),\n      ptr: (0, _object.clone)(this._ptr),\n      size: (0, _object.clone)(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n\n\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n\n\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // invoke callback\n\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      return callback(v, [i, j], me);\n    }; // invoke _map\n\n\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n\n\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = []; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype);\n    } // invoke callback\n\n\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y); // check value != 0\n\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v); // index\n\n        index.push(x);\n      }\n    }; // loop columns\n\n\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k]; // check i is in range\n\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    } // store number of values in ptr\n\n\n    ptr.push(values.length); // return sparse matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n\n\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k]; // value @ k\n\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n\n  SparseMatrix.prototype[Symbol.iterator] = /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n    var columns, j, k0, k1, k, i;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (this._values) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('Cannot iterate a Pattern only matrix');\n\n          case 2:\n            columns = this._size[1];\n            j = 0;\n\n          case 4:\n            if (!(j < columns)) {\n              _context.next = 18;\n              break;\n            }\n\n            k0 = this._ptr[j];\n            k1 = this._ptr[j + 1];\n            k = k0;\n\n          case 8:\n            if (!(k < k1)) {\n              _context.next = 15;\n              break;\n            }\n\n            // row index\n            i = this._index[k];\n            _context.next = 12;\n            return {\n              value: this._values[k],\n              index: [i, j]\n            };\n\n          case 12:\n            k++;\n            _context.next = 8;\n            break;\n\n          case 15:\n            j++;\n            _context.next = 4;\n            break;\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  });\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1]; // result\n\n    var a = []; // vars\n\n    var i, j; // initialize array\n\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k]; // set value (use one for pattern matrix)\n\n        a[i][j] = values ? copy ? (0, _object.clone)(values[k]) : values[k] : 1;\n      }\n    }\n\n    return a;\n  }\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // density\n\n    var density = this.density(); // rows & columns\n\n    var str = 'Sparse Matrix [' + (0, _string.format)(rows, options) + ' x ' + (0, _string.format)(columns, options) + '] density: ' + (0, _string.format)(density, options) + '\\n'; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k]; // append value\n\n        str += '\\n    (' + (0, _string.format)(i, options) + ', ' + (0, _string.format)(j, options) + ') ==> ' + (this._values ? (0, _string.format)(this._values[k], options) : 'X');\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.toString = function () {\n    return (0, _string.format)(this.toArray());\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n\n\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n\n\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays\n\n    var values = [];\n    var index = [];\n    var ptr = []; // initial ptr value\n\n    ptr[0] = 0; // loop columns\n\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[\n\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x]; // check row\n\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]); // store row\n\n          index[values.length - 1] = i - kSub; // exit loop\n\n          break;\n        }\n      }\n    } // close ptr\n\n\n    ptr.push(values.length); // return matrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [n, 1]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!(0, _is.isArray)(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if ((0, _is.isBigNumber)(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if ((0, _is.isBigNumber)(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    } // equal signature to use\n\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if ((0, _is.isString)(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if ((0, _is.isArray)(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if ((0, _is.isMatrix)(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // create arrays\n\n\n    var values = [];\n    var index = [];\n    var ptr = []; // loop items\n\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length); // diagonal index\n\n      var i = j - kSuper; // check we need to set diagonal value\n\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i); // check for zero\n\n\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub); // add value\n\n          values.push(v);\n        }\n      }\n    } // last value should be number of values\n\n\n    ptr.push(values.length); // create SparseMatrix\n\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    (0, _array.validateIndex)(i, this._size[0]);\n    (0, _array.validateIndex)(j, this._size[0]); // swap rows\n\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n\n\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1]; // loop\n\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n\n\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // find value index @ x\n\n      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x\n\n\n      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix\n\n\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        } // next column\n\n\n        continue;\n      } // check x row exist & no y row\n\n\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined; // insert value @ y\n\n        index.splice(ky, 0, y);\n\n        if (values) {\n          values.splice(ky, 0, vx);\n        } // remove value @ x (adjust array index if needed)\n\n\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        } // next column\n\n\n        continue;\n      } // check y row exist & no x row\n\n\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined; // insert value @ x\n\n        index.splice(kx, 0, x);\n\n        if (values) {\n          values.splice(kx, 0, vy);\n        } // remove value @ y (adjust array index if needed)\n\n\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n\n  return SparseMatrix;\n}, {\n  isClass: true\n});\nexports.createSparseMatrixClass = createSparseMatrixClass;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}