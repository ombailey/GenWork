{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOnes = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createOnes = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    matrix = _ref.matrix,\n    BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return (0, _array.resize)(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if ((0, _is.isBigNumber)(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});\nexports.createOnes = createOnes;","map":{"version":3,"names":["Object","defineProperty","exports","value","createOnes","_is","require","_number","_array","_factory","name","dependencies","factory","_ref","typed","config","matrix","BigNumber","_","_ones","numberBigNumberString","size","last","length","format","pop","Array","Matrix","storage","valueOf","ArrayMatrixString","hasBigNumbers","_normalize","defaultValue","_validate","m","resize","arr","forEach","index","isBigNumber","toNumber","isInteger","Error"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/ones.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOnes = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createOnes = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return (0, _array.resize)(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if ((0, _is.isBigNumber)(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});\nexports.createOnes = createOnes;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}