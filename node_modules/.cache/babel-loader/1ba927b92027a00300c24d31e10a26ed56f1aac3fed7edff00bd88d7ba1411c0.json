{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqueeze = void 0;\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'squeeze';\nvar dependencies = ['typed', 'matrix'];\nvar createSqueeze = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3])           // returns 3\n   *     math.squeeze([[3]])         // returns 3\n   *\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\n   *\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.squeeze)((0, _object.clone)(x));\n    },\n    Matrix: function Matrix(x) {\n      var res = (0, _array.squeeze)(x.toArray()); // FIXME: return the same type of matrix as the input\n\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n    any: function any(x) {\n      // scalar\n      return (0, _object.clone)(x);\n    }\n  });\n});\nexports.createSqueeze = createSqueeze;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSqueeze","_object","require","_array","_factory","name","dependencies","factory","_ref","typed","matrix","Array","x","squeeze","clone","Matrix","res","toArray","isArray","any"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/matrix/squeeze.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqueeze = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'squeeze';\nvar dependencies = ['typed', 'matrix'];\nvar createSqueeze = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3])           // returns 3\n   *     math.squeeze([[3]])         // returns 3\n   *\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\n   *\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.squeeze)((0, _object.clone)(x));\n    },\n    Matrix: function Matrix(x) {\n      var res = (0, _array.squeeze)(x.toArray()); // FIXME: return the same type of matrix as the input\n\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n    any: function any(x) {\n      // scalar\n      return (0, _object.clone)(x);\n    }\n  });\n});\nexports.createSqueeze = createSqueeze;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAE9B,IAAIC,OAAO,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE9C,IAAIC,MAAM,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAE5C,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIG,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,IAAIN,aAAa,GAAG,eAAe,CAAC,CAAC,EAAEI,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC3F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjBM,KAAK,EAAE,SAASA,KAAK,CAACC,CAAC,EAAE;MACvB,OAAO,CAAC,CAAC,EAAET,MAAM,CAACU,OAAO,EAAE,CAAC,CAAC,EAAEZ,OAAO,CAACa,KAAK,EAAEF,CAAC,CAAC,CAAC;IACnD,CAAC;IACDG,MAAM,EAAE,SAASA,MAAM,CAACH,CAAC,EAAE;MACzB,IAAII,GAAG,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACU,OAAO,EAAED,CAAC,CAACK,OAAO,EAAE,CAAC,CAAC,CAAC;;MAE5C,OAAON,KAAK,CAACO,OAAO,CAACF,GAAG,CAAC,GAAGN,MAAM,CAACM,GAAG,CAAC,GAAGA,GAAG;IAC/C,CAAC;IACDG,GAAG,EAAE,SAASA,GAAG,CAACP,CAAC,EAAE;MACnB;MACA,OAAO,CAAC,CAAC,EAAEX,OAAO,CAACa,KAAK,EAAEF,CAAC,CAAC;IAC9B;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFd,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}