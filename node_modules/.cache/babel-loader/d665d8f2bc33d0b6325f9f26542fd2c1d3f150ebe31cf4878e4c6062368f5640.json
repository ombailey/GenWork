{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCube = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'cube';\nvar dependencies = ['typed'];\nvar createCube = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2)            // returns number 8\n   *    math.pow(2, 3)          // returns number 8\n   *    math.cube(4)            // returns number 64\n   *    4 * 4 * 4               // returns number 64\n   *\n   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n   */\n  return typed(name, {\n    number: _index.cubeNumber,\n    Complex: function Complex(x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x.times(x).times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since cube(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return x.pow(3);\n    }\n  });\n});\nexports.createCube = createCube;","map":{"version":3,"names":["Object","defineProperty","exports","value","createCube","_factory","require","_collection","_index","name","dependencies","factory","_ref","typed","number","cubeNumber","Complex","x","mul","BigNumber","times","Fraction","pow","ArrayMatrix","deepMap","Unit"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/cube.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCube = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'cube';\nvar dependencies = ['typed'];\nvar createCube = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2)            // returns number 8\n   *    math.pow(2, 3)          // returns number 8\n   *    math.cube(4)            // returns number 64\n   *    4 * 4 * 4               // returns number 64\n   *\n   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n   */\n  return typed(name, {\n    number: _index.cubeNumber,\n    Complex: function Complex(x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n    BigNumber: function BigNumber(x) {\n      return x.times(x).times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since cube(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return x.pow(3);\n    }\n  });\n});\nexports.createCube = createCube;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAE3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAIC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAIE,MAAM,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAEnD,IAAIG,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIN,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,MAAM,CAACO,UAAU;IACzBC,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,GAAG,CAACD,CAAC,CAAC,CAACC,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;;IACDE,SAAS,EAAE,SAASA,SAAS,CAACF,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACG,KAAK,CAACH,CAAC,CAAC,CAACG,KAAK,CAACH,CAAC,CAAC;IAC5B,CAAC;IACDI,QAAQ,EAAE,SAASA,QAAQ,CAACJ,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC;;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACN,CAAC,EAAE;MACxC;MACA,OAAO,CAAC,CAAC,EAAEV,WAAW,CAACiB,OAAO,EAAEP,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IAChD,CAAC;IACDQ,IAAI,EAAE,SAASA,IAAI,CAACR,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACK,GAAG,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFpB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}