{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXgcd = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createXgcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    matrix = _ref.matrix,\n    BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = (0, _index.xgcdNumber)(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\n  });\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var\n    // used to swap two variables\n    t;\n    var\n    // quotient\n    q;\n    var\n    // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});\nexports.createXgcd = createXgcd;","map":{"version":3,"names":["Object","defineProperty","exports","value","createXgcd","_factory","require","_index","name","dependencies","factory","_ref","typed","config","matrix","BigNumber","numberNumber","a","b","res","xgcdNumber","_xgcdBigNumber","t","q","r","zero","one","x","lastx","y","lasty","isInt","Error","isZero","div","floor","mod","minus","times","lt","neg"],"sources":["/Users/omarbailey/node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXgcd = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createXgcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = (0, _index.xgcdNumber)(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\n\n  });\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var // used to swap two variables\n    t;\n    var // quotient\n    q;\n    var // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n\n    var res;\n\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});\nexports.createXgcd = createXgcd;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}